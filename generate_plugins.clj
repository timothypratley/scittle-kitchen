#!/usr/bin/env bb

(ns generate-plugins
  (:require [babashka.fs :as fs]
            [clojure.edn :as edn]
            [clojure.pprint :as pprint]
            [clojure.java.io :as io]
            [clojure.string :as str]))

(def plugins
  [{:name "emmy"
    :namespaces '[emmy.env]
    :deps {'org.mentat/emmy {:mvn/version "0.30.0"}}}
   {:name "mathbox"
    :namespaces '[mathbox.core mathbox.primitives]
    :deps {'org.mentat/mathbox.cljs {:mvn/version "0.2.0"}}}
   {:name "tmdjs"
    :namespaces '[tech.v3.dataset]
    :deps {'com.cnuernber/tmdjs {:mvn/version "2.000-beta-10"}}}])

(defn plugin-edn [{:keys [name namespaces deps]}]
  (let [module (str "scittle." name)]
    [{:name (symbol "scittle" name)
      :namespaces namespaces
      :js (str "./scittle." name ".js")
      :shadow-config {:modules {(keyword module) {:init-fn (symbol module "init")
                                                 :depends-on (into #{:scittle} deps)
                                                 :entries namespaces}}}}]))

(defn plugin-dir [plugin]
  (str "scittle/plugins/" (:name plugin)))

(defn src-dir [plugin]
  (str (plugin-dir plugin) "/src/scittle"))

(defn cljs-file [plugin]
  (str (src-dir plugin) "/" (:name plugin) ".cljs"))

(defn edn-file [plugin]
  (str (plugin-dir plugin) "/src/scittle_plugin.edn"))

(defn write-plugin [plugin]
  (fs/create-dirs (src-dir plugin))
  (let [namespaces (:namespaces plugin)
        config-map (str "{:namespaces\n   {"
                        (clojure.string/join
                          "\n    "
                          (for [ns namespaces]
                            (str "'" ns " (sci/copy-ns " ns " (sci/create-ns '" ns " nil))")))
                        "}}")]
    (spit (cljs-file plugin)
      (str "(ns scittle." (:name plugin) "\n"
           "  {:no-doc true}\n"
           "  (:require [scittle.core :as scittle]\n"
           "            [sci.core :as sci]))\n\n"
           ";; Plugin: " (:name plugin) "\n"
           ";; Generated by generate-plugins.clj\n\n"
           "(defn init []\n"
           "  (scittle/register-plugin!\n"
           "   ::" (:name plugin) "\n"
           "   " config-map "\n"
           "   ))\n")))
  (spit (edn-file plugin)
    (with-out-str (clojure.pprint/pprint (plugin-edn plugin)))))

(defn deps-file [plugin]
  (str (plugin-dir plugin) "/deps.edn"))

(defn write-deps [plugin]
  (let [path (deps-file plugin)
        deps (or (:deps plugin) {})]
    (spit path (with-out-str (clojure.pprint/pprint {:deps deps})))))

(doseq [plugin plugins]
  (write-plugin plugin)
  (write-deps plugin))

;; Generate scittle/kitchen/bb.edn with local/root deps for each plugin
(let [bb-edn-path "scittle/plugins/kitchen/bb.edn"
      bb-edn-content (edn/read-string (slurp "scittle/plugins/demo/bb.edn"))
      dep-key (fn [plugin]
                (symbol (str "io.github.babashka/scittle." (:name plugin))))
      dep-val (fn [plugin]
                {:local/root (str "../" (:name plugin))})
      new-deps (reduce (fn [deps plugin]
                         (assoc deps (dep-key plugin) (dep-val plugin)))
                       (:deps bb-edn-content)
                       plugins)
      bb-new (assoc bb-edn-content :deps new-deps)]
  (fs/create-dirs (fs/parent bb-edn-path))
  (with-open [w (clojure.java.io/writer bb-edn-path)]
    (clojure.pprint/write bb-new :stream w :dispatch clojure.pprint/code-dispatch)))

(println "Generated plugin directories and stubs for:" (map :name plugins))
