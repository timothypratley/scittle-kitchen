#!/usr/bin/env bb

(ns build
  "A way to build more plugins for scittle"
  (:require [babashka.fs :as fs]
            [clojure.edn :as edn]
            [clojure.pprint :as pprint]
            [clojure.string :as str]))

(def plugins
  (edn/read-string (slurp "plugin-templates.edn")))

(defn pretty-spit [f x]
  (spit (str f)
        (with-out-str (binding [*print-namespace-maps* false]
                        (clojure.pprint/pprint x))))
  (println "scittle-kitchen build created" (str f)))

(defn plugin-edn [nm {:keys [namespaces depends-on]}]
  (let [module (str "scittle." nm)]
    [{:name (symbol "scittle" nm)
      :namespaces namespaces
      :js (str "./scittle." nm ".js")
      :shadow-config {:modules {(keyword module) {:init-fn (symbol module "init")
                                                  :depends-on (into #{:scittle} depends-on)
                                                  :entries namespaces}}}}]))

(defn write-plugin [k plugin]
  (let [nm (name k)
        plugin-dir (fs/path "plugins" nm)
        src-dir (fs/path plugin-dir "src" "scittle")
        cljs-file (fs/path src-dir (str nm ".cljs"))
        edn-file (fs/path plugin-dir "src" "scittle_plugin.edn")
        deps-file (fs/path plugin-dir "deps.edn")
        config-map (str "{:namespaces\n   {"
                        (clojure.string/join
                         "\n    "
                         (for [ns (:namespaces plugin)]
                           (str "'" ns " (sci/copy-ns " ns " (sci/create-ns '" ns " nil))")))
                        "}}")]
    (fs/create-dirs src-dir)
    (spit (str cljs-file)
          (str "(ns scittle." nm "\n"
               "  {:no-doc true}\n"
               "  (:require [scittle.core :as scittle]\n"
               "            [sci.core :as sci]))\n\n"
               ";; Plugin: " nm "\n"
               ";; Generated by build.clj\n\n"
               "(defn init []\n"
               "  (scittle/register-plugin!\n"
               "   ::" nm "\n"
               "   " config-map "\n"
               "   ))\n"))
    (pretty-spit edn-file (plugin-edn nm plugin))
    (pretty-spit deps-file {:deps (or (:deps plugin) {})})))

(fs/create-dirs (fs/path "plugins"))
(doseq [[k plugin] plugins]
  (write-plugin k plugin))

(defn find-plugins
  "Not all plugins are generated, so look for them in the plugin directories"
  [base]
  (->> (fs/list-dir base fs/directory?)
       (map fs/file-name)
       (remove #{"demo"})
       (map (fn [name]
              [(keyword name) (fs/path base name)]))))

(defn official-plugins []
  (find-plugins "scittle/plugins"))

(defn kitchen-plugins []
  (find-plugins "plugins"))

(def all-plugins
  (into {} (concat (official-plugins) (kitchen-plugins))))

(defn scittle-sci-version
  "Otherwise there will be a version conflict"
  []
  (get-in (edn/read-string (slurp "scittle/deps.edn"))
          [:deps 'org.babashka/sci]))

(defn local [build path]
  {:local/root (str (fs/relativize build path))})

(defn generate-deps-edn
  "Generate a deps.edn in ./<build-name>/ with plugins, scittle, and sci on the classpath."
  ([] (generate-deps-edn (keys all-plugins) "all"))
  ([plugins build]
   (fs/create-dirs build)
   (let [scittle-deps {'io.github.babashka/scittle (local build "scittle")
                       'io.github.babashka/scittle.build (local build (fs/path "scittle" "build"))
                       'org.babashka/sci (scittle-sci-version)}
         plugin-deps (map (fn [plugin]
                            [(symbol "scittle-kitchen.plugins" (str "scittle." (name plugin)))
                             (local build (get all-plugins plugin))])
                          plugins)
         deps (into scittle-deps plugin-deps)]
     (pretty-spit (fs/path build "bb.edn")
                  {:deps deps
                   :tasks '{:requires ([scittle.build :as build])
                            release {:task (scittle.build/build {})}}})
     (pretty-spit (fs/path build "deps.edn")
                  {:deps scittle-deps}))))

(generate-deps-edn)
