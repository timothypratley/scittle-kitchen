{"version":3,"file":"scittle.cljs-ajax.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"file":"scittle.cljs-ajax.js","lineCount":115,"mappings":"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\/B,CAAd+B,CAAc\/B,CAZjBgC,GAAA5B,CAAA4B,EAAAA,IAAAA,EAAA5B,CAYiBJ,CAAAA,EAZjBgC,EAYiBhC,IAZjBgC,CAYiBhC,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAZjBgC,KAAAA,CAYiBhC,IAZjBK,EAAA0B,GAAAA,CAAAzB,IAAAA,CAAAA,EAAAA,CAAA2B,CAAAzB,EAAAwB,IAAAxB,CAAAwB,IAAAxB,CAAAyB,CAAA3B,CAAAyB,CAAAC,IAAA3B,CAAA2B,EAAAA,IAAAA,CAAAA,CAAAA,CAAA3B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA4B,CAAA5B,CAAAA,CAYiBL,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAZjBiC,CAYiBjC,CAZjBgC,KAAAA,IAAAvB,CAAAA,CAAAsB,GAAAA,CAAAA,CAAAtB,CAAAA,CAAAA,EAAAuB,IAAAA,CAAAA,CAAAA,CAAAvB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAwB,CAAAxB,CAAAA,CAYiBT,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAZjBiC,CAYiBjC,CAZjBgC,KAAAA,MAAAtB,KAAAA,CAAAA,EAAAA,CAAAsB,2BAAAtB,CAAAuB,CAAAvB,CAAAsB,CAAAA,CAAAA,MAAAA,EAYiBhC,CVsCjBzI;AUjCG2K,IAAAA,QAAAA,CAAkBlC,CAAlBkC,CAAuBjC,CAAvBiC,CAAuBjC,CAF1BkC,GAAA\/B,CAAA+B,EAAAA,IAAAA,EAAA\/B,CAEqBJ,CAAAA,EAFrBmC,EAEqBnC,IAFrBmC,CAEqBnC,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAFrBmC,KAAAA,CAEqBnC,IAFrBK,EAAA6B,GAAAA,CAAA5B,IAAAA,CAAAA,EAAAA,CAAA8B,CAAA5B,EAAA2B,IAAA3B,CAAA2B,IAAA3B,CAAA4B,CAAA9B,CAAA4B,CAAAC,IAAA9B,CAAA8B,EAAAA,IAAAA,CAAAA,CAAAA,CAAA9B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA+B,CAAA\/B,CAAA+B,CAAA\/B,CAAAA,CAAAA,CAEqBL,CAAAA,IAFrBK,CAEqBL,IAFrBK,CAAA+B,CAAA\/B,CAAA+B,CAAA\/B,CAAA8B,KAAAA,IAAA1B,CAAAA,CAAAyB,GAAAA,CAAAA,CAAAzB,CAAAA,CAAAA,EAAA0B,IAAAA,CAAAA,CAAAA,CAAA1B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA2B,CAAA3B,CAAA2B,CAAA3B,CAAAA,CAAAA,CAEqBT,CAAAA,IAFrBS,CAEqBT,IAFrBS,CAAA2B,CAAA3B,CAAA2B,CAAA3B,CAAA0B,KAAAA,MAAAzB,KAAAA,CAAAA,EAAAA,CAAAyB,8BAAAzB,CAAA0B,CAAA1B,CAAAyB,CAAAA,CAAAA,MAAAA,EAE0BlC,CViC1B1I,CU\/BG8K,IAAAA,QAAAA,CAAmBrC,CAAnBqC,CAAwBR,CAAxBQ,CAAwBR,CAJ3BS,GAAAlC,CAAAkC,EAAAA,IAAAA,EAAAlC,CAIsBJ,CAAAA,EAJtBsC,EAIsBtC,IAJtBsC,CAIsBtC,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAJtBsC,KAAAA,CAIsBtC,IAJtBK,EAAAgC,GAAAA,CAAA\/B,IAAAA,CAAAA,EAAAA,CAAAiC,CAAA\/B,EAAA8B,IAAA9B,CAAA8B,IAAA9B,CAAA+B,CAAAjC,CAAA+B,CAAAC,IAAAjC,CAAAiC,EAAAA,IAAAA,CAAAA,CAAAA,CAAAjC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAkC,CAAAlC,CAAAkC,CAAAlC,CAAAA,CAAAA,CAIsBL,CAAAA,IAJtBK,CAIsBL,IAJtBK,CAAAkC,CAAAlC,CAAAkC,CAAAlC,CAAAiC,KAAAA,IAAA7B,CAAAA,CAAA4B,GAAAA,CAAAA,CAAA5B,CAAAA,CAAAA,EAAA6B,IAAAA,CAAAA,CAAAA,CAAA7B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA8B,CAAA9B,CAAA8B,CAAA9B,CAAAA,CAAAA,CAIsBT,CAAAA,IAJtBS,CAIsBT,IAJtBS,CAAA8B,CAAA9B,CAAA8B,CAAA9B,CAAA6B,KAAAA,MAAA5B,KAAAA,CAAAA,EAAAA,CAAA4B,+BAAA5B,CAAA6B,CAAA7B,CAAA4B;AAAAA,CAAAA,MAAAA,EAI2BT,CV+B3BtK,CWxDMiL,IAAAA,QAAAA,CAEHC,CAFGD,CAEHC,CAFHC,KAGSC,MAAAD,CACEE,IAAAA,CAAAA,CAAAC,CAAAA,CAAAH,CAAKD,CAALC,CADFA,CAHTA,CAEGD,CXsDHlL,CWlDMuL,IAAAA,QAAAA,CAA0BjB,CAA1BiB,CAA0BjB,CAC9BkB,CAAAA,CAAKrB,GAADsB,CAAyBnB,CAAzBmB,CAAJA,OAAAC,KAAAA,CAAAA,CAAAD,CAAAD,CAAAC,CAAAA,CAAAD,CAAAC,CAAAA,EAD8BnB,CXkDhCtK,CWrBM2L,IAAAA,QAAAA,CAEH3G,CAFG2G,CAEH3G,CAFH4G,MAGGC,KAAAA,CAAAA,EAAAA,CAAUC,GAAVD,CACU7G,CADV6G,CADA7G,CXmBHhF,CYRO+L,IAAAA,QAAAA,CAAY3L,CAAZ2L,CAAY3L,CAAnB4L,MAEKC,KAAAA,CAAAA,EAADD,CAAoB5L,CAApB4L,CAFJA,CAE6BE,IAAAA,CAAAA,EAAAC,CAAAA,CAAAH,CAAAA,GAAAA,CAAgBI,IAAAA,CAAAA,EAAAA,CAAAA,CAADJ,CAAMK,IAAAA,CAAAA,EAANL,CAAgBM,IAAAA,CAAAA,EAAhBN,CAAAA,CAAsB5L,CAAtB4L,CAAfA,CAF7BA,CAGI5L,CAFF4L,WAEY5L,KAAAA,CAAAA,CAFZ4L,CAE4BM,IAAAA,CAAAA,EAAAA,CAAKlM,CAALkM,CAF5BN,CAG2B5L,CAJVA,CZQnBJ,CYEAuM,IAAAA,QAAAA,CAAAC,CAAAD,CAAOE,CAAPD,IAAAA,EAAAE,IAAAA,CAAAA,CAAAA,CAAAA,CAAAH,CAAAC,CAAAD,CAAAA,CAAAA,CAAAA,IAAAA,CAA+BI,EAAAA,CAA\/BD,IAAAA,CAAAA,CAAAA,CAAAA,CAAAH,CAAAC,CAAAD,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,OACOA,CAAAlB,IAAAA,CAAAA,CAAAC,CAAAA,CAAAiB,CAAAP,GAAAO,CAAiBI,CAAjBJ,CAAAA,CAAAA,CAAiBI,MAAjBJ,CAAiBI,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQC,GAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAaC,CAAbD,CAAAA,CAAaC,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAArBF,CAAjBJ,CAAsCM,CAAAA,IAAtCN,CAAsCM,EAAtCN,CADAE,CZFPzM,CYKO8M,IAAAA,QAAAA,CAAsBC,CAAtBD,CAAqCH,CAArCG,CAAuCD,CAAvCC,CAAuCD,CAA9CG,MAAAA,KAAAC,IAAAA,CAAAA,CAAAD,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAE,IAAAA,CAAAA,CAAAF,CAAAA,CACMD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAeJ,CAAfI,CAAAA,CAAeJ,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CADrBK,CACwBH,CADxBG,CAAAA,CACwBH,IADxBG,CAA8CH,CZL9C7M,CYQOmN,IAAAA,QAAAA,CAAsBC,CAAtBD,CAAsBC,CACzBC,IAAMN;AAAeM,QAAAA,EAAAA,CAAAA,IAAAC,EAAM5B,IAAAA,CAAAA,CAAA2B,CAAID,CAAJC,CAAAA,CAAID,CAAJC,CAAAA,GAANC,EAAAA,CAAAA,CAAAD,WAAAE,KAAAA,CAAAA,CAAAF,CAAAC,CAAAA,CAAAA,EAAAD,CAAAA,IAAAA,QAAAC,CAAAD,CAAAA,CAAAC,KAAAD,MAAAC,CACYD,MAAAA,SAAAA,EAAKV,CAALU,MAAAA,KAAKV,CAALU,MADZA,OACYA,CACCA,MAAAA,SAAAA,EAAKV,CAALU,MAAAA,EAAKV,CAALU,MAFbA,SAEaA,CACEG,MAAAA,KAAAA,CAAAA,EAAAA,SAHfH,KAAAjC,MAAAiC,CAAAA,CAAAA,sBAAAA,CAAAhC,IAAAA,CAAAA,CAAAC,CAAAA,CAAA+B,CAAAC,CAAAD,CAAAA,CAAAC,CAAAA,IAAAD,CAAAC,EAAAD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAArBA,OAIKI,KAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAQX,GAARW,CAA6BV,CAA7BU,CALoBL,CZR7BpN,CYkDM0N,IAAAA,QAAAA,CAKHN,CALGM,CAKUC,CALVD,CAKUC,CALhBC,MAAA1B,KAAAA,CAAAA,EAAAC,CAAAA,CAAAyB,CAAAA,MAAAA,CAAAC,IAAAA,CAAAA,EAAA1B,CAAAA,CAAAyB,CAAArB,GAAAqB,CAAAE,GAAAF,CASUG,GAFyBH,CAEzBG,CAFyBH,CAPnCA,CASUG,IATVH,CASUG,IAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CATVH,CAAAA,CAAAA,CAKgBD,CZvDhB3N,Ca\/BAgO,GAAAA,QAAAA,CAAAC,CAAAD,CAAAtF,CAAAsF,CAAA1D,CAAA0D,CAAAE,CAAAF,CAAAG,CAAAH,CAAAI,CAAAJ,CAAAA,CAAAA,IAAAC,CAAAA,IAAAD,CAAAC,CAAAD,KAAAtF,CAAAA,OAAAsF,CAAAtF,CAAAsF,KAAA1D,CAAAA,QAAA0D,CAAA1D,CAAA0D,KAAAE,CAAAA,CAAAF,CAAAE,CAAAF,KAAAG,CAAAA,CAAAH,CAAAG,CAAAH,KAAAI,CAAAA,CAAAJ,CAAAI,CAAAJ,KAAAK,CAAAA,CAAAL;AAAAA,UAAAA,KAAAM,CAAAA,CAAAN,CAAAA,MAAAA,Cb+BAhO,CaiBMuO,IAAAA,QAAAA,CAAgCC,CAAhCD,CAAgCC,CAAtCC,MAAAvC,KAAAA,CAAAA,EAAAC,CAAAA,CAAAsC,CAAAA,IAAAA,CACOA,MAAaD,EAAbC,GAGCV,QAHDU,CAGCV,IAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAHDU,CAGCV,CAJRU,CAAsCD,CbjBtCxO,Ca6BA0O,GAAAA,QAAAA,CAAAC,CAAAD,CAAAE,CAAAF,CAAAG,CAAAH,CAAAR,CAAAQ,CAAAP,CAAAO,CAAAN,CAAAM,CAAAA,CAAAA,IAAAC,CAAAA,IAAAD,CAAAC,CAAAD,KAAAE,CAAAA,WAAAF,CAAAE,CAAAF,KAAAG,CAAAA,EAAAH,CAAAG,CAAAH,KAAAR,CAAAA,CAAAQ,CAAAR,CAAAQ,KAAAP,CAAAA,CAAAO,CAAAP,CAAAO,KAAAN,CAAAA,CAAAM,CAAAN,CAAAM,KAAAL,CAAAA,CAAAK,CAAAA,UAAAA,KAAAJ,CAAAA,CAAAI,CAAAA,MAAAA,Cb7BA1O,Ca6BA8O,GAAAA,QAAAA,CAAAC,CAAAD,CAAWE,CAAXC,IAAAA,EAAAC,IAAAA,CAAAA,EAAAA,CAAAA,CAAAJ,CAAAC,CAAAD,CAAAA,EAAAA,CAAAK,IAAAA,CAAAA,CAAAL,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAM,IAAAA,CAAAA,EAAAN,CAAAC,CAAAD,CAAAA,CAAAO,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAC,IAAAA,CAAAA,CAAAD,CAAAJ,CAAAI,CAAAP,CAAAG,CAAAH,OAAAA,KAAAS,EAAAT,CAAAA,EAAAxD,CAAAA,CAAAwD,CAAAC,CAAAD,CAAAA,CAAAA,EAAAxD,CAAAA,CAAAwD,CAAAC,CAAAD,CAAAA,CAAAA,EAAAxD,CAAAA,CAAAwD,CAAAC,CAAAD,CAAAA,CAAAA,IAAAA,CAAAU,IAAAA,CAAAA,EAAAA,CAAAC,CAAAD,CAAAV,CAAAA,IAAAA,CAAWE,Cb7BXhP,Ca6FA0P,IAAAA,QAAAA,CAAAxB,CAAAwB,CAAAvB,CAAAuB,CAAAtB,CAAAsB,CAAAA,CAAAA,IAAAxB,CAAAA,CAAAwB,CAAAxB,CAAAwB,KAAAvB,CAAAA,CAAAuB,CAAAvB,CAAAuB,KAAAtB,CAAAA,CAAAsB,CAAAtB,CAAAsB,KAAArB,CAAAA,CAAAqB,CAAAA,UAAAA,KAAApB,CAAAA,CAAAoB,CAAAA,MAAAA,Cb7FA1P,CagHA2P,IAAAA,QAAAA,CAAAC,CAAAD,CAGmDhK,CAHnDgK,CAGmDhK,CAHnDiK,IAAAC;AAAAC,IAAAA,CAAAA,EAAAH,CAAAC,CAAAD,CAAAE,EAAAA,CAAAE,IAAAA,CAAAA,CAAAA,CAAAA,CAAAJ,CAAAE,CAAAF,CAAAA,GAAAA,CAGWvC,KAAAA,EAHX2C,IAAAA,CAAAA,CAAAA,CAAAA,CAAAJ,CAAAE,CAAAF,CAAAA,IAAAA,CAAAA,EAAAA,CAGWvC,CAAaO,EAHxBoC,IAAAA,CAAAA,CAAAA,CAAAA,CAAAJ,CAAAE,CAAAF,CAAAA,IAAAA,CAAAA,EAAAA,CAG+BK,EAAAA,CAH\/BD,IAAAA,CAAAA,CAAAA,CAAAA,CAAAJ,CAAAE,CAAAF,CAAAA,GAAAA,CAIEM,EAAAA,CAAmCC,IAAAA,CAAAA,CAAA\/D,CAAAA,CAAAwD,CAAAK,CAAAL,CAAAA,KAAAA,CAATA,EAA0BQ,CAA1BR,EAA0BA,IAA1BA,CACEhC,CADFgC,CAEES,CAF5BT,OAAAjE,KAAAA,CAAAA,CAAAiE,CAAAM,CAAAN,CAAAA,CAGEA,CAAAtE,IAAAA,CAAAA,CAAAC,CAAAA,CAAAqE,CAAKhK,CAALgK,CAAAA,CACKjE,IAAAA,CAAAA,CAAAiE,CAAKU,IAAAA,CAAAA,EAADV,CAACU,IAADV,CAAehK,CAAfgK,CAAJA,CAAAA,CAAmBhK,MAAnBgK,CAAmBhK,GADxBgK,CAEMjC,GAADiC,CAAmBvC,CAAnBuC,CALPM,CAKON,CAFLA,CAEqCW,CAAAA,IAFrCX,CAEqCW,EAFrCX,CAHFA,CAMEhK,CAP+CA,CbnHnD3F,CaiIAuQ,IAAAA,QAAAA,CAAArC,CAAAqC,CAAApC,CAAAoC,CAAAnC,CAAAmC,CAAAA,CAAAA,IAAArC,CAAAA,CAAAqC,CAAArC,CAAAqC,KAAApC,CAAAA,CAAAoC,CAAApC,CAAAoC,KAAAnC,CAAAA,CAAAmC,CAAAnC,CAAAmC,KAAAlC,CAAAA,CAAAkC,CAAAA,UAAAA,KAAAjC,CAAAA,CAAAiC,CAAAA,MAAAA,CbjIAvQ,CagJAwQ,IAAAA,QAAAA,CAAAtC,CAAAsC,CAAArC,CAAAqC,CAAApC,CAAAoC,CAAAA,CAAAA,IAAAtC,CAAAA,CAAAsC,CAAAtC,CAAAsC,KAAArC,CAAAA,CAAAqC,CAAArC,CAAAqC,KAAApC,CAAAA,CAAAoC,CAAApC,CAAAoC,KAAAnC,CAAAA,CAAAmC,CAAAA,UAAAA,KAAAlC,CAAAA,CAAAkC,CAAAA,MAAAA,CbhJAxQ,CaiKAyQ,IAAAA,QAAAA,CAAAC,CAAAD,CAA2BE,CAA3BC,IAAAA,ECxL+CC,GDwL\/CC,EAAAA,CAAAhB,IAAAA,CAAAA,EAAAW,CAAAC,CAAAD,CAAyEM,KAAAA,EAAzEhB,IAAAA,CAAAA,CAAAA,CAAAA,CAAAU,CAAAK,CAAAL,CAAAA,EAAAA,CAAAA,OAEwBO,EAFxBP,WAH4BO,GAG5BP,CAEyCO,CAFzCP,CAGIQ,IAAAA,CAAAA,EAADR,CAASO,CAATP,CAFDA,CAE4BE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAH9BG,CAG8BH,CAAAA,CAAiBI,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAH\/CD,CAG+CC,CAF7CN,CAGES,IAAAA,CAAAA,EAADT,CAAMO,CAANP,CAHDA;AAGyBzB,EAAAA,CAAoBgC,CAApBhC,CAHzByB,CAICU,CAJDV,WAIWO,KAAAA,CAAAA,CAJXP,CAI4BtF,GAAAsF,CAAAA,IAAAxD,IAAAA,CAAAA,CAAAwD,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAvD,IAAAA,CAAAA,CAAAuD,CAAAA,CAAAA,8DAAAA,CAA+EO,CAA\/EP,CAAAA,CAA+EO,IAA\/EP,CAAAA,CAJ5BA,CAKEW,IAAAA,CAAAA,EAADX,CAAMO,CAANP,CALDA,CAMC3B,EAAA2B,CAAAA,IAAAY,IAAAA,CAAAA,CAAAZ,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAU,CAAAV,CAAAA,EAAAA,CAAAA,QAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAA4BO,IAA5BP,CAAAA,CANDA,CASOtF,GAAAsF,CAAAA,IAACxF,IAAAA,CAAAA,CAADwF,CAACxF,IAADwF,CAACxF,CAADwF,CAACxF,CAADwF,CAACxF,IAAAA,CAAAA,CAADwF,CAACxF,CAAAA,gCAAAA,CACe+F,CADf\/F,CAADwF,CACgBO,IADhBP,CAAAA,CAVkBE,CbjK3B3Q,Ce1DAsR,IAAAA,QAAAA,CAAAC,CAAAD,CAAME,CAANC,CAAAA,CAAA3B,IAAAA,CAAAA,EAAAwB,CAAAC,CAAAD,CACE9F,EAAAA,CADFuE,IAAAA,CAAAA,CAAAA,CAAAA,CAAA3I,CAAAqK,CAAArK,CAAAkK,IAAAA,CAAAA,EAAAlK,CACEkK,OAAA5F,KAAAA,CAAAA,CAAA4F,CAAA9F,CAAA8F,CAAAA,CAAA9F,CAAA8F,CAAAA,IAAAA,CAAAA,EADIE,Cf0DNxR,CevDgB0R,IAAAA,QAAAA,CACHtK,CADGsK,CACEX,CADFW,CACEX,CACNY,IAAMC,EAAOD,QAAAA,EAAAA,CAAAA,IAAAnG,EAAImG,GAAArG,CAAAA,CAAAqG,CAASZ,CAATY,CAAJA,OAAAjG,KAAAA,CAAAA,CAAAiG,CAAAnG,CAAAmG,CAAAA,CAAAnG,CAAAmG,CACKE,IAAAA,CAAAA,GAAAA,CAASzK,CAATyK,CAAcd,CAAdc,CADLF,CAAAA,EAEXA,OAAAG,SAAAH,CAA0BhE,CAA1BgE,CAA0BhE,CAA1BgE,MACWC,EC0RfG,CAAAA,KAAAA,CD1RsBpE,CC0RtBoE,CD3R8BpE,CAHtBoD,CfsDlB\/Q,Ce3BgBgS,IAAAA,QAAAA,CAAiBjB,CAAjBiB,CAAiBjB,CACrBkB,IAAMC,EAAOD,QAAAA,EAAAA,CAAAA,IAAAzG;AAAIyG,IAAAA,CAAAA,EAAA3G,CAAAA,CAAA2G,CAASlB,CAATkB,CAAJA,OAAAvG,KAAAA,CAAAA,CAAAuG,CAAAzG,CAAAyG,CAAAA,CAAAzG,CAAAyG,CACIE,IAAAA,CAAAA,GAAAF,CAAAA,IAAAA,CAAAA,EAAAA,CAAgBlB,CAAhBkB,CADJA,CAAAA,EAEXA,OAAAG,SAAAH,CAA2B3H,CAA3B2H,CAA2B3H,CACTN,CAAAA,CAAAA,GAAAA,CAASM,CAATN,CAAhBiI,OAAQC,EC4GfG,CAAAA,IAAAA,CAAE7R,CAAF6R,CD7GgC\/H,CAHRyG,Cf2BjC\/Q,CiB5CMsS,IAAAA,QAAAA,EAAAA,CAANC,MAAAA,KAAAlB,IAAAA,CAAAA,CAAAkB,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAC,IAAAA,CAAAA,EAAAD,CAAAA,EAAAA,CAC4B\/E,8BAD5B+E,CAAAA,CAC4B\/E,IAD5B+E,CAAMD,CjB4CNtS,CiBGMyS,IAAAA,QAAAA,CAAoB\/J,CAApB+J,CAA4BC,CAA5BD,CAA4BC,CAC1BC,CAAAA,CAAQ1B,IAAAA,CAAAA,EAAAA,CAAQyB,CAARzB,CAAL2B,CACGC,IAAAA,CAAAA,CAADD,CAAOF,CAAPE,CADFA,CAEEA,EAAAtH,CAAAA,CAAAsH,CAAgBE,GAAAA,CAAWpK,CAAXoK,CAAmBJ,CAAnBI,CAAhBF,CAFXA,OAGQD,EAHRC,EAGQA,IAHRA,CAGEA,IAAA3F,IAAAA,CAAAA,CAAA2F,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA1F,IAAAA,CAAAA,CAAA0F,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAHFA,CAIQA,MAASD,EADfC,GACeD,QADfC,CAAAA,IAAA3F,IAAAA,CAAAA,CAAA2F,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA1F,IAAAA,CAAAA,CAAA0F,CAAAA,CACoBD,CADpBC,CAAAA,CACoBD,IADpBC,CAAAA,CAEYD,CANkBD,CjBHlC1S,CiBgBM+S,IAAAA,QAAAA,CACHvE,CADGuE,CACUrK,CADVqK,CACkBL,CADlBK,CACkBL,CAChBM,CAAAA,CAAQP,GAADQ,CAAoBvK,CAApBuK,CAA4BP,CAA5BO,CAAbA,OACEC,KAAAA,CAAAA,EAAAD,CAAAA,QAAAA,CAAAE,CAAAF,CAACG,CAADH,MANE\/C,KAAAA,CAAAA,CAAA\/D,CAAAA,CAAA8G,CAMKE,CANLF,CAAGD,KAAHC,CAMFA,EAAOpE,CALSL,CAAAA,OAAVyE,CAKCE,CALDF,CAKNA,EAL6BD,CAK5BI,CAADH,CAA6CD,CAA7CC,CAFoBP,CjBjBxB1S,CiBqBAqT,IAAAA,QAAAA,CAAA\/I,CAAA+I,CAAAC,CAAAD,CACG\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\/D,CAAT+D,CANNA,CAMe\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\/CpC\/Q,CqBpDM0Z,IAAAA,QAAAA,CAAQC,CAARD,CAAgBE,CAAhBF,CAAgBE,CACpBC,MAAAnO,KAAAA,CAAAA,CAAAmO,CAAIF,CAAJE,CAAAA,CACEA,CAAAxO,IAAAA,CAAAA,CAAAC,CAAAA,CAAAuO,CAAAF,CAAAE,CAAAA,CAAAA,IAAAA,CAAKF,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAaC,CAAbD,CAALE,CAAkBD,CAAAA,IAAlBC,CAAkBD,EAAlBC,CADFA,CAEED,CAHkBA,CrBoDtB5Z,CqB\/CM8Z,IAAAA,QAAAA,CAAiBC,CAAjBD,CAAiBC,CACrBC,MAAAtO,KAAAA,CAAAA,CAAAsO,CAAID,CAAJC,CAAAA,CACGpE,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAOoE,QAAAA,CAAKpS,CAALoS,CAAaC,CAAbD,CAAaC,CAAbD,GACEtO,IAAAA,CAAAA,CAAAsO,CAAKE,IAAAA,CAAAA,EAADF,CAAiCC,CAAjCD,CAAJA,CADFA,CAEIpS,MAAAA,EACMuS,EAAAA,CAAU5Z,GAAAyZ,CAAAI,CAAAJ,CAAAA,IAAAA,CAAwBC,CAAxBD,CAAhBA,OACG7D,KAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAOvO,CAAPuO,CAAekE,CAAAL,CAAMG,CAANH,CAAf7D,CAAkCuD,GAAlCvD,CAAyCkE,CAAAL,CAAMG,CAANH,CAAzC7D,CAJM8D,CAApBrE,CAADtG,IAAAA,CAAAA,CAACsG,CAMO0E,CAAA1Z,CAAAA,KAAAoZ,CAAAA,MAAAA,CANPpE,CADHoE,CAAA1K,IAAAA,CAAAA,CADqByK,CrB+CvB\/Z;AK6KEua,IAASA,EL7KXva,CKkNAwa,IAAqC,WLlNrCxa,CK4NAya,IAAwC,CAAC,MAAD,CAAS,KAAT,CAzDnCC,KAAAA,CAAAA,GAAL,CAAuBlT,GAAvB,CAA0CmT,IAAAA,CAAAA,GAA1C,CAmNA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,SAAyBC,KAAAA,CAAAA,CAAzBC,CAAAA,kBAAA,CAA8CC,QAAQ,CAACC,CAAD,CAAK,CAEzD,IAAK7S,CAAAA,EAAL,CAAwB8S,IAAKC,CAAAA,GAAL,CAAS,CAAT,CAAYF,CAAZ,CAFiC,CAclCH,KAAAA,CAAAA,CAAzBM,CAAAA,eAAA,CAA2CC,QAAQ,CAAC\/T,CAAD,CAAO,CAExD,IAAKe,CAAAA,EAAL,CAAqBf,CAFmC,CAyBjCwT,KAAAA,CAAAA,CAAzBQ,CAAAA,kBAAA,CAA8CC,QAAQ,CAACC,CAAD,CAAkB,CAEtE,IAAKhT,CAAAA,EAAL,CAAwBgT,CAF8C,CAuB\/CV,KAAAA,CAAAA,CAAzBW,CAAAA,wBAAA,CAAoDC,QAAQ,CAACC,CAAD,CAAU,CAEpE,IAAKpT,CAAAA,EAAL,CAA8BoT,CAFsC,CAoB7Cb,KAAAA,CAAAA,CAAzBc,CAAAA,aAAA,CAAyCC,QAAQ,CAACC,CAAD,CAAa,CAE5D,IAAKrT,CAAAA,EAAL,CAAmBqT,CAFyC,CAgBrChB;IAAAA,CAAAA,CAAzBiB,CAAAA,IAAA,CAAgCC,QAAQ,CACpCC,CADoC,CAC\/BC,CAD+B,CACnBC,CADmB,CACNC,CADM,CACO,CAE7C,GAAI,IAAKnZ,CAAAA,EAAT,CACE,KAAUvB,MAAJ,CACF,4DADE,CAEF,IAAKoE,CAAAA,EAFH,CAEc,cAFd,CAE4BmW,CAF5B,CAAN,CAKI\/L,CAAAA,CAASgM,CAAA,CAAaA,CAAWG,CAAAA,WAAX,EAAb,CAAwC,KAEvD,KAAKvW,CAAAA,EAAL,CAAgBmW,CAChB,KAAKjV,CAAAA,EAAL,CAAkB,EAClB,KAAKF,CAAAA,EAAL,CI9gBUmB,CJghBV,KAAKvE,CAAAA,EAAL,CAAwB,CAAA,CACxB,KAAKe,CAAAA,EAAL,CAAe,CAAA,CAGf,KAAKxB,CAAAA,EAAL,CAAYqZ,IA4KAtU,CAAAA,EAAL,CAA4CuU,GAArB,CA5KlBD,IA4KuBtU,CAAAA,EAAL,CAAvB,CF3rB0BuU,GAA1B,CAAiBC,IAAAA,CAAAA,GAAjB,CEghBP,KAAKtY,CAAAA,EAAL,CAAmB,IAAK8D,CAAAA,EAAL,CAA4CyU,GAArB,CAAA,IAAKzU,CAAAA,EAAL,CAAvB,CF7ecyU,GAA1B,CAAiBC,IAAAA,CAAAA,GAAjB,CEifP,KAAKzZ,CAAAA,EAAKmB,CAAAA,kBAAV,CAA+B,GAAK5C,IAAAA,CAAAA,EAAL,EAAU,IAAKuD,CAAAA,EAAf,CAAoC,IAApC,CAG3B4X,KAnDQpU,CAAAA,EAmDZ,EAAuC,YAAvC,EAAuD,KAAKtF,CAAAA,EAA5D,GAEE,IAAKA,CAAAA,EAAK2Z,CAAAA,UAIV,CAJuB,GAAKpb,IAAAA,CAAAA,EAAL,EAAU,QAAQ,CAACe,CAAD,CAAI,CAE3C,IAAKsa,CAAAA,EAAL,CAAwBta,CAAxB,CAA2B,CAAA,CAA3B,CAF2C,CAAtB,CAGpB,IAHoB,CAIvB,CAAI,IAAKU,CAAAA,EAAK6Z,CAAAA,MAAd,GAIE,IAAK7Z,CAAAA,EAAK6Z,CAAAA,MAAOF,CAAAA,UAJnB,CAIgC,GAAKpb,IAAAA,CAAAA,EAAL,EAAU,IAAKqb,CAAAA,EAAf;AAAmC,IAAnC,CAJhC,CANF,CAkBA,IAAI,CAC0BhY,IAq2BrBD,CAAAA,SAAL,EAl2BF,CAFA,IAAKuD,CAAAA,EAEL,CAFe,CAAA,CAEf,CADA,IAAKlF,CAAAA,EAAK8Z,CAAAA,IAAV,CAAe7M,CAAf,CAAuBtK,MAAA,CAAOqW,CAAP,CAAvB,CAAoC,CAAA,CAApC,CACA,CAAA,IAAK9T,CAAAA,EAAL,CAAe,CAAA,CAJb,CAKF,MAAO6U,CAAP,CAAY,CAEMnY,IA+1BXD,CAAAA,SAAL,EA91BF,KAAKqY,CAAAA,EAAL,CAA0CD,CAA1C,CACA,OAJY,CAURE,CAAAA,CAAUf,CAAVe,EAAyB,EAEzBpV,EAAAA,CAAU,IAAIC,GAAJ,CAAQ,IAAKD,CAAAA,OAAb,CAGhB,IAAIsU,CAAJ,CACE,GAAIe,MAAOC,CAAAA,cAAP,CAAsBhB,CAAtB,CAAJ,GAA2Ce,MAAOE,CAAAA,SAAlD,CACE,IAAK,IAAI\/c,CAAT,GAAgB8b,EAAhB,CACEtU,CAAQwV,CAAAA,GAAR,CAAYhd,CAAZ,CAAiB8b,CAAA,CAAY9b,CAAZ,CAAjB,CAFJ,KAIO,IACH,MAAO8b,EAAYmB,CAAAA,IADhB,GACyB,UADzB,EAEH,MAAOnB,EAAYoB,CAAAA,GAFhB,GAEwB,UAFxB,CAGL,IAAK,MAAMld,CAAX,GAAkB8b,EAAYmB,CAAAA,IAAZ,EAAlB,CACEzV,CAAQwV,CAAAA,GAAR,CAAYhd,CAAZ,CAAiB8b,CAAYoB,CAAAA,GAAZ,CAAgBld,CAAhB,CAAjB,CAJG,KAOL,MAAUoB,MAAJ,CACF,sCADE,CACuCkE,MAAA,CAAOwW,CAAP,CADvC,CAAN,CAQEqB,CAAAA,CACFC,KAAMC,CAAAA,IAAN,CAAW7V,CAAQyV,CAAAA,IAAR,EAAX,CACKK,CAAAA,IADL,CAEQtT,CAAA,EiB3hBL,cjB2hBK,EACwCA,CiB5hBlB1D,CAAAA,WAAL,EjByhBzB,CAKEiX,EAAAA,CACI\/b,IAAAA,CAAAA,EAAL,CAAA,QADC+b,EAC2BX,CAD3BW;AACmD\/b,IAAAA,CAAAA,EAAL,CAAA,QAChD,GkBnCG,GAAAgc,IAAAA,CAAAA,GAAA,ElBmCgCnD,GkBnChC,ClBmCwDzK,CkBnCxD,ClBmCH,EkBnCwB,ClBmCxB,CAAJ,EACKuN,CADL,EACwBI,CADxB,EAME\/V,CAAQwV,CAAAA,GAAR,CAvXiCS,cAuXjC,CAvVAC,oDAuVA,CAKF,KAAK,MAAM,CAAC1d,CAAD,CAAM2d,CAAN,CAAX,EAA2BnW,EAA3B,CACE,IAAK7E,CAAAA,EAAKib,CAAAA,gBAAV,CAA2B5d,CAA3B,CAAgC2d,CAAhC,CAGE,KAAK5V,CAAAA,EAAT,GACE,IAAKpF,CAAAA,EAAKkb,CAAAA,YADZ,CAC2B,IAAK9V,CAAAA,EADhC,CAMI,kBAAJ,EAAyB,KAAKpF,CAAAA,EAA9B,EACI,IAAKA,CAAAA,EAAKuY,CAAAA,eADd,GACkC,IAAKhT,CAAAA,EADvC,GAGE,IAAKvF,CAAAA,EAAKuY,CAAAA,eAHZ,CAG8B,IAAKhT,CAAAA,EAHnC,CAMA,IAAI,eAAJ,EAAuB,KAAKvF,CAAAA,EAA5B,EAAoC,IAAKwF,CAAAA,EAAzC,CACE,GAAI,CACF,IAAKxF,CAAAA,EAAK2Y,CAAAA,aAAV,CAAwB,IAAKnT,CAAAA,EAA7B,CADE,CAEF,MAAOuU,CAAP,CAAY,CAEMnY,IAsxBbD,CAAAA,SAAL,EAxxBY,CAQhB,GAAI,CACGZ,GAAL,CAAAA,IAAA,CAoBA,CAnBI,IAAKoE,CAAAA,EAmBT,CAnB4B,CAmB5B,GAlBE,IAAKlF,CAAAA,EAML,CANsCG,GAAf,CAAqC,IAAKJ,CAAAA,EAA1C,CAMvB,CAHI4B,IA0wBCD,CAAAA,SAAL,EAvwBA,CAAI,IAAK1B,CAAAA,EAAT,EACE,IAAKD,CAAAA,EAAL,CAAA,OACA;AAD0C,IAAKmF,CAAAA,EAC\/C,CAAA,IAAKnF,CAAAA,EAAL,CAAA,SAAA,CACI,GAAKzB,IAAAA,CAAAA,EAAL,EAAU,IAAK4c,CAAAA,EAAf,CAAyB,IAAzB,CAHN,EAKE,IAAKjb,CAAAA,EALP,CAMiB\/B,GAAX,CAAoB,IAAKgd,CAAAA,EAAzB,CAAmC,IAAKhW,CAAAA,EAAxC,CAA0D,IAA1D,CAMR,EAH4BvD,IA8vBrBD,CAAAA,SAAL,EA3vBF,CAFA,IAAKE,CAAAA,EAEL,CAFe,CAAA,CAEf,CADA,IAAK7B,CAAAA,EAAK8Y,CAAAA,IAAV,CAAemB,CAAf,CACA,CAAA,IAAKpY,CAAAA,EAAL,CAAe,CAAA,CArBb,CAuBF,MAAOkY,CAAP,CAAY,CACgBnY,IAwvBrBD,CAAAA,SAAL,EAvvBF,CAAA,IAAKqY,CAAAA,EAAL,CAA0CD,CAA1C,CAFY,CAzJ+B,CAyMtBlC,KAAAA,CAAAA,CAAzBsD,CAAAA,EAAA,CAAoCC,QAAQ,EAAG,CAEzC,MAAO3Z,KAAAA,CAAAA,GAAX,EAAmB,WAAnB,EAGW,IAAKzB,CAAAA,EAHhB,GAIE,IAAK+D,CAAAA,EAKL,CAJI,kBAIJ,CAJyB,IAAKoB,CAAAA,EAI9B,CAJiD,cAIjD,CAHA,IAAKtB,CAAAA,EAGL,CItqBOwX,CJsqBP,CAF4BzZ,IAgsBrBD,CAAAA,SAAL,EA9rBF,CADA,IAAKjB,CAAAA,aAAL,CCntBO2a,SDmtBP,CACA,CAAA,IAAKC,CAAAA,KAAL,CItqBOD,CJsqBP,CATF,CAF6C,CAsBtBxD,KAAAA,CAAAA,CAAzBmC,CAAAA,EAAA,CAAkCuB,QAAQ,CAAYxB,CAAZ,CAAiB,CAEzD,IAAKvY,CAAAA,EAAL,CAAe,CAAA,CACX,KAAKxB,CAAAA,EAAT,GACE,IAAKiF,CAAAA,EAEL,CAFgB,CAAA,CAEhB,CADA,IAAKjF,CAAAA,EAAKsb,CAAAA,KAAV,EACA,CAAA,IAAKrW,CAAAA,EAAL,CAAgB,CAAA,CAHlB,CAKA,KAAKlB,CAAAA,EAAL,CAAkBgW,CAClB,KAAKlW,CAAAA,EAAL,CIzsBW2X,CJ0sBNvX,IAAL,CAAAA,IAAA,CACKC,IAAL,CAAAA,IAAA,CAXyD,CAmClC2T;IAAAA,CAAAA,CAAzByD,CAAAA,KAAA,CAAiCG,QAAQ,CAACC,CAAD,CAAkB,CAErD,IAAK1b,CAAAA,EAAT,EAAiB,IAAKwB,CAAAA,EAAtB,GAC8BI,IA6oBrBD,CAAAA,SAAL,EAroBF,CAPA,IAAKH,CAAAA,EAOL,CAPe,CAAA,CAOf,CANA,IAAKyD,CAAAA,EAML,CANgB,CAAA,CAMhB,CALA,IAAKjF,CAAAA,EAAKsb,CAAAA,KAAV,EAKA,CAJA,IAAKrW,CAAAA,EAIL,CAJgB,CAAA,CAIhB,CAHA,IAAKpB,CAAAA,EAGL,CAHsB6X,CAGtB,EIpuBKC,CJouBL,CAFA,IAAKjb,CAAAA,aAAL,CCjxBQC,UDixBR,CAEA,CADA,IAAKD,CAAAA,aAAL,CC\/wBKib,OD+wBL,CACA,CAAKzX,GAAL,CAAAA,IAAA,CATF,CAFyD,CAqBlC2T,KAAAA,CAAAA,CAAzB+D,CAAAA,EAAA,CAA2CC,QAAQ,EAAG,CAEhD,IAAK7b,CAAAA,EAAT,GAMM,IAAKwB,CAAAA,EAMT,GALE,IAAKA,CAAAA,EAGL,CAHe,CAAA,CAGf,CAFA,IAAKyD,CAAAA,EAEL,CAFgB,CAAA,CAEhB,CADA,IAAKjF,CAAAA,EAAKsb,CAAAA,KAAV,EACA,CAAA,IAAKrW,CAAAA,EAAL,CAAgB,CAAA,CAElB,EAAKf,GAAL,CAAAA,IAAA,CAAiB,CAAA,CAAjB,CAZF,CAeM4X,IAAAC,CAAAA,EAAAA,CAAAA,EAAAC,CAAAA,IAAN,CAAW,IAAX,CAjBoD,CA4B7BnE,KAAAA,CAAAA,CAAzB\/V,CAAAA,EAAA,CAA+Cma,QAAQ,EAAG,CAEpDC,ImBzrBQC,CAAAA,EnByrBZ,GAIK,IAAKjX,CAAAA,EAAV,EAAsB,IAAKrD,CAAAA,EAA3B,EAAuC,IAAKoD,CAAAA,EAA5C,CAKOmX,GAAL,CAAAA,IAAA,CALF,CAGE,IAAKC,CAAAA,EAAL,EAPF,CAFwD,CAwBjCxE,KAAAA,CAAAA,CAAzBwE,CAAAA,EAAA,CAAyDC,QAAQ,EAAG,CAE7DF,GAAL,CAAAA,IAAA,CAFkE,CAmF3CvE;IAAAA,CAAAA,CAAzB+B,CAAAA,EAAA,CAA8C2C,QAAQ,CAACjd,CAAD,CAAIkd,CAAJ,CAAoB,CAKxE,IAAK9b,CAAAA,aAAL,CACmByD,GAAf,CAAmC7E,CAAnC,CCl6BMmd,UDk6BN,CADJ,CAEA,KAAK\/b,CAAAA,aAAL,CAAkCyD,GAAf,CACf7E,CADe,CAEfkd,CAAA,CCj6BeE,kBDi6Bf,CCh6BaC,gBD85BE,CAAnB,CAPwE,CAkGjD9E,KAAAA,CAAAA,CAAzB+E,CAAAA,QAAA,CAAoCC,QAAQ,EAAG,CAE7C,MAAO,CAAC,CAAC,IAAK7c,CAAAA,EAF+B,CAyDtB6X,KAAAA,CAAAA,CAAzBlW,CAAAA,SAAA,CAAqCmb,QAAQ,EAAG,CAO9C,GAAI,CACF,MAAYpb,GAAL,CAAAA,IAAA,CAAA,CFh\/BDqb,CEg\/BC,CACH,IAAK\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\/J,CAAA,CAAW6J,CAAX,MAAA\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\/N,CAAA,CAAW6N,CAAX,MAAA\/hB,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW+hB,IAAX3jB,CAAAA,CAAA4B,CAAAiiB,CAAAjiB,CAAAkU,CAAAlU,CAAW+hB,CAAXF,KAAAA,CAAAA,CAAAxN,CAAAA,EAAA,CAAA6N,QAAA,CAAA3N,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAWsN,CAAX,MAAAlc,KAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAA,QAAA,CAAA6O,CAAA,CAAAyN,CAAA,CAAAA,CAAAA,IAAAvN,EAAAjY,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAwlB,CAAAxlB,CAAA,CAAAA,CAAA,IAAAA,CAAAkY,EAAAA,CAAAlY,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAwlB,CAAAxlB,CAAA,CAAAA,CAAA,IAAAA,CAAA,OAAA6X,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAE,CAAAF,CAAAI,CAAAJ,CAAAK,CAAAL,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAE,CAAAF,CAAAI,CAAAJ,CAAAK,CAAAL,CAAA2N,CAAAtc,CAAA4O,CAAA5O,CAAAiP,IAAAjP,CAAWkc,CAAXF,KAAAA,CAAAA,CAAA9M,CAAAA,EAAA,CAAWgN,QAAAA,CAEU3D,CAFV2D,CAEU3D,CAFV2D,CAEU3D,CAFrBgE,CAAAA,CAAAriB,IAAAA,CAAAA,EAAA,CAAAsiB,CAAA,CAAA,OAAAriB,KAAAA,CAAAA,CAAAA,CAAAA,CAAAwJ,CAAA4Y,CAAA5Y,CAAA,IAAA,CAAA,EAAAA,CAAA,EAGQ,IAHR,CAAA4Y,CAAA,CAG6BE,IAAAA,CAAAA,EAAAA,CAH7BF,CAG6BE,CADRlE,CAFrByD,KAAAA,CAAAA,CAAA1M,CAAAA,EAAA,CAAW4M,QAAAA,CAIW3D,CAJX2D,CAIaxnB,CAJbwnB,CAIaxnB,CAJxB,MAIkCA,EAAVA,CAJxBsnB;IAAAA,CAAAA,CAAAtM,CAAAA,EAAA,CAAAgN,QAAA,CAAA9M,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAWoM,CAAX,MAAAnM,KAAAA,CAAAA,EAAAA,CAAAF,CAAAE,CAAAC,QAAA,CAAAC,CAAA,CAAAA,CAAA,MAAAF,KAAAA,CAAAA,EAAAA,CAAAF,CAAAE,CAAAG,IAAAA,CAAAA,EAAAH,CAAA,EAAAA,CAAA,GAAAA,CAAA,EAAAA,CAAAD,CAAAC,CAAAE,CAAAF,CAAAE,CAAAF,CAAA,sCAAAA,CAAA,IAAAA,CAAA,GAAAA,CAAAD,CAAAC,CAAAvP,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAuY,IAAAA,CAAAA,EAAA,CAAWmD,IAAX3jB,CAAAA,CAAA,CAAAwX,CAAWmM,CAAXF,KAAAA,CAAAA,CAAA5L,CAAAA,EAAA,CAAAuM,QAAA,EAAWT,CAAX,MAAA,KAAA5L,IAAAA,CAAAA,EAAA,CAAAsM,IAAA,CAAA,CAAA,CAAA7D,IAAAA,CAAAA,EAAA,CAAAjjB,IAAAA,CAAAA,CAAA,CAAWomB,IAAX3jB,CAAAA,CAAA,CAAA,CAAAiY,IAAAA,CAAAA,EAAAA,CAAW0L,IAAX3jB,CAAAA,CAAAiY,CAAA,CAAAC,IAAAA,CAAAA,EAAA,EAAA,CAAWyL,CAAXF,KAAAA,CAAAA,CAAAtL,CAAAA,EAAA,CAAAmM,QAAA,EAAWX,CAAX,MAAWA,KAAX5jB,CAAAA,CAAW4jB,CAAXF,KAAAA,CAAAA,CAAApL,CAAAA,EAAA,CAAAkM,QAAA,EAAWZ,CAAX,MAAA,KAAAthB,GAAA,CAAWshB,IAAX5jB,CAAAA,CAAA,CAAW4jB,IAAX3jB,CAAAA,CAAA,CAAW2jB,IAAAA,CAAAA,CAAX,CAAWA,CAAXF,KAAAA,CAAAA,CAAAlL,CAAAA,EAAA,CAAAiM,QAAA,EAAWb,CAAX,MAAA,EAAA,CAAAlL,IAAAA,CAAAA,CAAAA,CAAWkL,IAAX3jB,CAAAA,CAAAyY,CAAWkL,CAAXF,KAAAA,CAAAA,CAAA\/K,CAAAA,EAAA,CAAA+L,QAAA,EAAWd,CAAX,IAAA\/K,EAAW+K,IAAX1jB,CAAAA,CAAA,OAAA2Y,EAAA,EAAA,IAAA,CAAAA,CAAA,CAAW+K,IAAX1jB,CAAAA,CAAA,CAAA2Y,CAAA,CAAA,CAAA,UAAA,CAAAC,IAAAA,CAAAA,EAAAA,CAAAC,IAAAD,CAAW8K,CAAXF;IAAAA,CAAAA,CAAA1K,CAAAA,EAAA,CAAA2L,QAAA,CAAAC,CAAA,CAAAC,CAAA,CAAWjB,CAAX,MAAAiB,EAAA,EAAA,IAAA,EAAAC,IAAAF,CAAAA,WAAA,GAAAC,CAAAA,CAAAA,WAAA,EAAAxL,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAyL,IAAAF,CAAAA,CAAAvL,CAAAwL,CAAAA,CAAAA,CAAAxL,CAAWuK,CAAXF,KAAAA,CAAAA,CAAApK,CAAAA,EAAA,CAAAyL,QAAA,CAAAvL,CAAA,CAAAC,CAAA,CAAWmK,CAAX,MAAAjmB,KAAAA,CAAAA,EAAA,CAAA0jB,IAAAA,CAAAA,EAAA,CAAA5H,CAAA,CAAA,CAAAzY,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAA0Y,IAAAA,CAAAA,EAAA,CAAAvY,IAAAA,CAAAA,EAAAA,CAAAA,CAAA,CAAAC,IAAAA,CAAAA,CAAA,CAAAuY,IAAA,CAAA,CAAWiK,IAAX5jB,CAAAA,CAAA,CAAAgB,CAAAyY,CAAAzY,CAAA,CAAA,IAAAsB,GAAA,CAAWshB,IAAX5jB,CAAAA,CAAA,CAAAsB,IAAAA,CAAAA,EAAA,CAAAN,IAAAA,CAAAA,EAAAA,CAAAA,CAAA,CAAW4iB,IAAX3jB,CAAAA,CAAA,CAAAwZ,CAAA,CAAA,CAAA,CAAA,IAAA,CAAWmK,CAAXF,KAAAA,CAAAA,CAAA9J,CAAAA,EAAA,CAAAoL,QAAA,CAAAlL,CAAA,CAAAgK,CAAA,CAAWF,CAAX,MAAAjmB,KAAAA,CAAAA,EAAAA,CAAWimB,IAAX3jB,CAAAA,CAAAtC,CAAAmmB,CAAAnmB,CAAWimB,CAAXF,KAAAA,CAAAA,CAAAzJ,CAAAA,EAAA,CAAAgL,QAAA,CAAA9K,CAAA,CAAAC,CAAA,CAAA8K,CAAA,CAAWtB,CAAX,MAAA,KAAAthB,GAAA,CAAWshB,IAAX5jB,CAAAA,CAAA,CAAAua,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAWqJ,IAAX3jB,CAAAA,CAAAsa,CAAAH,CAAAG,CAAA2K,CAAA3K,CAAA,CAAA,IAAA,CAAWqJ,CAAXF,KAAAA,CAAAA,CAAAlJ,CAAAA,EAAA,CAAA2K,QAAA,EAAWvB,CAAX,MAAAxP,KAAAA,CAAAA,CAAAA,CAAAlM,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAuY,IAAAA,CAAAA,EAAA,CAAWmD,IAAX3jB,CAAAA,CAAA,CAAAmU,CAAWwP,CAAXF,KAAAA,CAAAA,CAAA\/I,CAAAA,EAAA,CAAAyK,QAAA,CAAAvK,CAAA,CAAAqK,CAAA,CAAWtB,CAAX,MAAA,KAAAthB,GAAA,CAAA4iB,CAAA,CAAWtB,IAAX3jB,CAAAA,CAAA,CAAW2jB,IAAAA,CAAAA,CAAX,CAAWA,CAAXF;IAAAA,CAAAA,CAAA5I,CAAAA,EAAA,CAAAuK,QAAA,CAAArK,CAAA,CAAAC,CAAA,CAAW2I,CAAX,MAAA7gB,KAAAA,CAAAA,EAAA,CAAAkY,CAAA,CAAA,CAAAC,IAAAF,CAAAA,EAAAA,CAAAA,IAAAA,CAAAG,IAAAA,CAAAA,EAAA,CAAAF,CAAA,CAAA,CAAA,CAAAD,CAAAG,IAAAA,CAAAA,EAAAA,CAAAF,CAAAE,CAAA,CAAAA,CAAAH,CAAA,CAAAtT,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAA0T,IAAAA,CAAAA,EAAA1T,CAAAwT,IAAAxT,CAAAuT,CAAAvT,CAAWkc,CAOX,KAAA0B,IAAA,IAAKjd,IAAAA,CAAAA,CAAL,CAAKA,IAAL,CAAKA,CAAL,CAAKA,CAAL,CAAKA,IAAAA,CAAAA,CAAL,CAAKA,CACF,IAAAyZ,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CADEzZ,CACsB,IAAAub,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CADtBvb,CAC0C,IAAAuX,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAD1CvX,CAAL,CAC+C,IAD\/C,C,CexIKkd,IAAAA,IAhBCC,QAAAA,CAEHC,CAFGD,CAEHC,CAFH,MAGE,SAAA,EAAA,CACOC,QAAAA,EAAAA,CADPC,CACOD,CADPC,CAAAC,CAAAA,CAAAhkB,IAAAA,CAAAA,EAAA,CAAA+jB,CAAA,CAAAC,KAAAA,EAAA\/jB,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA+jB,CAAA,CAAA,IAAA,CAAA,EAAA,CAAAA,CAEY7R,EAFZlS,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA+jB,CAAA,CAAA,GAAA,CAAAA,CAEmBpS,EAFnB3R,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA+jB,CAAA,CAAA,IAAA,CAAA,EAAA,CAGK,OAAAhlB,GAAA,CAAA,IAAAuC,IAAAA,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CACQ0iB,QAAA,CAA+BtS,CAA\/B,CAA+BA,CAGDzX,CAAAA,CAAAA,GAAAA,CAAMyX,CAANzX,CAflC,EAAA,CACE0B,IAAAA,CAAAA,CAAA,CAAIA,IAAAA,CAAAA,CAAA,CAcoBuW,CAdpB,CAAA,CAAasF,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcyM,CAAAA,CAAAA,OAAAA,CAcP\/R,CAdO+R,CAAdzM,CAAb,CAcoBtF,CAdxB,CADF,CAEgB+R,CAAAA,CAAAA,SAAAA,CAaU\/R,CAbKA,CAAAA,MAAf+R,CAFhB,CAGIA,CAUH,OAAAC,EAAAhe,CAAAA,CAAA,CAAAge,CAAAhe,CAAAA,CAAA,CAAWie,CAAX,CACWxS,CADX,CAAAyS,CAAA,CAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAWD,CAAXC,CACWzS,CADXyS,CAACR,CAADQ,CADkC1S,CADvC,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA\/V,IAAAA,CAAAA,CAAA,CAMsBuW,CANtB,CAAA,CAM6B,CAAA,WAAA,CAAA5W,IAAAA,CAAAA,CAAAC,CAAAA,CAAA,CAAiB2W,CAAjB,CAAA,CAAiBA,GAAjB,CAAiBA,CAAAA,IAAjB,CAAiBA,EAAjB,CAN7B,CAM8CA,IAN9C,CAOkBvW,IAAAA,CAAAA,CAAA,CAAA0oB,CAAA,CAAA,CAAA,aAAA,CAAA,IAPlB,CAOsB1S,CAAAA,IAPtB,CAOsBA,EAPtB,CAAA,CAOsBA,EAPtB,CAOsBA,IAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,kBAAAA,CAAAA,CAAAA,IAAAA,CAPtB,CAAA,CAOsBA,IAPtB,CAAA,CAHLmS,CAAAQ,QAAA,EAAA,EAAA,CACM,MAAAT,EAAAtoB,CAAAA,CAAA,CAACsoB,IAAAA,CAAAA,CAAD,CADN,CAAA,IAAAA;AAAA,IAU2BlS,EAAAA,CAAAA,QAAAA,CAV3BmS,CAU2BnS,CAV3BmS,CAAAA,OAAAA,SAAAA,CAAAA,MAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,EAAA,CAAA,EADCF,CAuBC,CA5DYW,QAAAA,CAAkBJ,CAAlBI,CAAsB5S,CAAtB4S,CAAgCN,CAAhCM,CAAgCN,CAC3BO,CAAAA,CAAmBC,IAAAA,CAAAA,KAAAA,CAAQR,CAARQ,CACpB,OAAA9oB,KAAAA,CAAAA,CAAA,CAAIwoB,CAAJ,CAAA,CACIK,CADJ,CAEKE,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAQF,CAARE,CAAQF,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAA4B7S,CAA5B6S,CAAAA,CAARE,CAJuBT,CA4D5C,CATCP,CAYLiB,IAhDMC,QAAAA,CAA0BC,CAA1BD,CAA0BC,CAAhC,MACEC,SAAA,EAAA,CAAA,MAAA,KAAAxjB,IAAAA,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAAyjB,CAAA,CAAA,EAAA,CAAA,kBAAA,CAAA,CACYF,IADZ,CAAA,CAD8BA,CAiD5B,CAvEYG,QAAAA,CAAmBC,CAAnBD,CAAmBC,CAAzB,MACcR,KAAAA,CAAAA,SAAAA,CAASS,IAAAA,CAAAA,EAAAA,CAAQD,CAARC,CAATT,CADWQ,CAuE\/B,C,CbvEJ,IAAAxd,GAAAA,QAAA0d,GAAA,CAAAxS,CAAA,CAAMyS,CAAN,OAAAvS,SAAA9hB,CAAAA,MAAA,CAAA,CAAAs0B,KAAA,CAAAA,CAAA,MAAAD,GAAAA,CAAAA,CAAAA,EAAAA,MAAA,CAAAA,CAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAvS,SAAA,CAAA,CAAA,CAAAuS,CAAA,SAAA,KAAA\/pB,MAAA,CAAA,CAAA,iBAAA,CAAAC,IAAAA,CAAAA,CAAAC,CAAAA,CAAA,CAAAsX,SAAA9hB,CAAAA,MAAA,CAAA,CAAAG,CAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAMk0B,CAANE,GAAAtS,CAAAA,CAAA,CAAMoS,QAAAA,EAAAA,CAQA,MAAAG,GAAAhqB,CAAAA,CAAA,CAACkM,IAAAA,CAAAA,CAAD,CARA2d,CAANG,GAAAhqB,CAAAA,CAAA,CAAM6pB,QAAAA,CASFpkB,CATEokB,CASFpkB,CATJ,IAUW3J,EAAMoK,GAAAA,CAAaT,CAAbS,CAVjB,CAWW+jB,EAAUrlB,IAAAA,CAAAA,CAAA\/D,CAAAA,CAAA,CAAA\/E,CAAA,CAAQ,IAAA,CAAA,EAAR,CAAA,EACSmgB,IAAAA,CAAAA,CAAAA,CAAAA,CAAD,CAAGngB,CAAH,CAAGA,GAAH,CADR,CACWA,MADX,CACWA,SAF3B,OAAA,KAAAiK,IAAAA,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAGWK,GAAAA,CAAiBtK,CAAjBsK,CAAsBX,CAAtBW,CAHX,CAGiCX,EAHjC,CAIiB,CAAA,sBAAA,CAA4BwkB,CAA5B,CAA4BA,CAAAA,IAA5B,CAA4BA,EAA5B,CAJjB,CAAA,CAI6CA,IAJ7C,CADDxkB,CATJykB,GAAAnS,CAAAA,CAAA,CAAA,CA8BA;IAAAoS,GAAAA,QAAAC,GAAA,CAAAhT,CAAA,CAAMiT,CAAN,OAAA\/S,SAAA9hB,CAAAA,MAAA,CAAA,CAAA80B,KAAA,CAAAA,CAAA,MAAAD,GAAAA,CAAAA,CAAAA,EAAAA,MAAA,CAAAA,CAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAA\/S,SAAA,CAAA,CAAA,CAAA+S,CAAA,MAAA,CAAA,CAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAA\/S,SAAA,CAAA,CAAA,CAAA+S,CAAA\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\/tB,CAAZ+tB,CAAC3jB,CAAD2jB,CALD,EAQQ\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\/D,EAAA+D,CAAA\/D,CAAAA,CAzCfuvB,EAAAA,CAyCkCD,CArCWp5B,CAAAA,MAAAA,CAAAA,UAAAA,KAJ7Cs5B,EAAA,IAAAtqB,IAAAA,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAAsqB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAD,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAD,CAAAC,CAyCS,OAAMxvB,EAAA,CAAA,IAAA,CAAA+D,CAAA,CAAA,GAAA,CAAmB,CAAnB,CAAN,CACGvH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAQF,CAARE,CAAAA,CAAQF,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CADX,CAAA,IADqBA,CAGrBA,EAAAA,CAAAA,IAAAA,CAAKuH,CAALvH,CAAY9C,CAAZ8C,CAAY9C,CAAAA,CAAZ8C,CACD6wB,EAAW7wB,CAAAA,OAAjB,CAAuB0wB,CAGvBE,EAAAA,CAAyB,IAAA,CAAA,EAAA\/tB,CAAAA,CAAA,CAAO0F,CAAP,CAAzBtF,KAAAA,CAAAA,CAAA,CAAA2tB,CAAA,CAAA,GACwB5wB,CAAAA,CAAAA,YADxB;AAC+B6D,IAAAA,CAAAA,EAAAA,CAD\/B+sB,CAC+B\/sB,CAD\/B,CAEAsvB,EAAAA,CAAAtZ,IAAAA,CAAAA,CAAA,CAAc1a,CAAd,CAAAi0B,EAAAA,CAAA,IAAA,KAAAC,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAD,CAAA,CAAAC,CAAA,CAAAC,CAAAF,CAAAG,CAAAJ,CAAAA,EAAA,CAAAA,IAAA,CAAAC,CAAA,CAAAA,CAAAA,CAAAA,CAAApvB,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAsvB,CAAA,CAAA,CAAA,CAAA,IAAA,CAAAF,CAASnvB,CAATmvB,CAAApvB,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAAsvB,CAAA,CAAA,CAAA,CAAA,IAAA,CAAAF,CACExC,CAAmB7wB,CAAAA,gBAAnB,CAAwBkE,CAAxB,CAA0BE,CAA1B,CADFivB,CAAAA,CAAAA,EAAA,CAAA,KAAA,IAAAzC,CAAA,CAAA\/W,IAAAA,CAAAA,CAAA,CAAAsZ,CAAA,CAAA,CAAAM,IAAAA,CAAAA,EAAA,CAAAN,CAAA,CAAA,EAAAO,CAAAA,CFmlHDC,IAAAA,CAAAA,EAAAA,CEnlHCR,CFmlHDQ,CEnlHCD,CAAAE,CAAAF,CFslHDG,IAAAA,CAAAA,EAAAA,CEtlHCV,CFslHDU,CEtlHCH,CAAAP,CAAAO,CAAAA,CAAAA,CAAAA,CAAAA,CAAAvV,IAAAA,CAAAA,CAAAA,CAAAuV,CAAAvV,CAAA,GAAA2V,CAAA,CAAA1pB,IAAAA,CAAAA,CAAA,CAAA+oB,CAAA,CAAA,CAAAA,CAAA,CAAAlvB,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA6vB,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAS5vB,CAAT,CAAAD,IAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA6vB,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CACEjD,CAAmB7wB,CAAAA,gBAAnB,CAAwBkE,CAAxB,CAA0BE,CAA1B,CADF,CAAA2vB,CAAA,CAAA\/R,IAAAA,CAAAA,CAAAgS,CAAAb,CAAAa,CAAA,CAAAR,CAAA,CAAAS,IAAA,CAAAC,CAAA,CAAAC,CAAA,CAAA,CAAAC,CAAA,CAAAC,CAAA,KAAA,MAEAxD,EAAO7wB,CAAAA,IAAP,CAAYiD,IAAAA,CAAAA,CAAA,CAAI6N,CAAJ,CAAA,CAAIA,CAAJ,CAAA,EAAZ,CACA9Q,OAAAA,EAdCE,CARQyyB,KAAAA,CAAAA,CAAbrB,CAAAA,EAAA,CAwBEgD,QAAA,EAASt0B,CAAM,MAAf6wB,KAAuB7wB,CAAAA,KAAAA,EAAdA,CAxBE2yB,KAAAA,CAAAA,CAAbnB,CAAAA,EAAA,CA0BE+C,QAAA,EAAQv0B,CAAM,MAAd6wB,KAA0B7wB,CAAAA,QAAlBA,CA1BG2yB,KAAAA,CAAAA,CAAbjB,CAAAA,EAAA,CA2BE8C,QAAA,EAAUx0B,CAAM,MAAhB6wB,KAA0B7wB,CAAAA,MAAhBA,CA3BC2yB,KAAAA,CAAAA,CAAbf,CAAAA,EAAA,CA4BE6C,QAAA,EAAez0B,CAAM,MAArB6wB,KAAmC7wB,CAAAA,UAApBA,CA5BJ2yB;IAAAA,CAAAA,CAAbb,CAAAA,EAAA,CA6BE4C,QAAA,EAAmB10B,CAAnB,MACGqR,IAAAA,CADHwf,IAC2C7wB,CAAAA,qBAAxB,EAAhBqR,CADgBrR,CA7BR2yB,KAAAA,CAAAA,CAAbX,CAAAA,EAAA,CA+BE2C,QAAA,CAAuB30B,CAAvB,CAA4B2B,CAA5B,CAA4BA,CAC1B,MADFkvB,KACsB7wB,CAAAA,iBAAAA,CAAK2B,CAAL3B,CADM2B,CA\/BjBgxB,KAAAA,CAAAA,CAAbT,CAAAA,EAAA,CAiCE0C,QAAA,EAAe50B,CAAf,MAAqByH,KAAAA,CAAAA,CAAA\/D,CAAAA,CAAA,CAACob,CAAD,CAArB+R,IAAwC7wB,CAAAA,UAAnB,CAANA,C,CQIjB,IAAA60B,IAAAA,QAAAC,IAAA,CAAA7a,CAAA,CAAY8a,CAAZ,IAAA,IAAA9T,EAAA,EAAA,CAAAC,EAAA\/G,SAAA9hB,CAAAA,MAAA,CAAA8oB,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAA,CAAAD,CAAA,CAAAD,CAAAA,CAAAA,IAAAA,CAAA9G,SAAA,CAAAgH,CAAA,CAAAF,CAAAE,CAAAA,CAAAA,EAAA,CAAA,KAAA,MAAAC,EAAAA,CAAA,CAAA,CAAAH,CAAAA,CAAAA,MAAA,CAAA,IAAAI,IAAAA,CAAAA,EAAA,CAAAJ,CAAAA,CAAAA,KAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,OAAA8T,IAAAA,CAAAA,CAAAA,CAAA5a,SAAA,CAAA,CAAA,CAAA4a,CAAA3T,CAAA2T,CAAYA,CAAZC,IAAAlpB,CAAAA,CAAA,CAAAmpB,QAAA,CAAA\/3B,CAAA,CAAAoL,CAAA,CAAYysB,CAAZ,IAAAG,EAAA9qB,IAAAA,CAAAA,CAAAA,CAAA9B,CAAA8B,CAAA,OAAAoG,GAAAA,CAAAtT,CAAAsT,CAAA,KAAAA,CAAA0kB,CAAA,WAAApwB,KAAAA,CAAAA,CAAA,CAAAqwB,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAC,IAAAA,CAAAA,EAAAD,CAAA7sB,CAAA6sB,CAAA,CAAAD,CAAA1kB,CAAYukB,CAAZM,IAAAza,CAAAA,CAAA,CAAYma,CAAZO,IAAA1T,CAAAA,CAAA,CAAA2T,QAAA,CAAAC,CAAA,CAAYT,CAAZ,IAAAU,EAAArrB,IAAAA,CAAAA,CAAAA,CAAAorB,CAAAprB,CAAAorB,EAAAA,CAAAxT,IAAAA,CAAAA,CAAA,CAAAwT,CAAA,CAAA,OAAArT,KAAAA,CAAAA,CAAAA,CAAAsT,CAAAtT,CAAAqT,CAAArT,CAAY4S,CACZ;IAAAW,IAAAA,QAAAC,IAAA,CAAA1b,CAAA,CAAY2b,CAAZ,IAAA,IAAA3U,EAAA,EAAA,CAAAC,EAAA\/G,SAAA9hB,CAAAA,MAAA,CAAA8oB,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAA,CAAAD,CAAA,CAAAD,CAAAA,CAAAA,IAAAA,CAAA9G,SAAA,CAAAgH,CAAA,CAAAF,CAAAE,CAAAA,CAAAA,EAAA,CAAA,KAAA,MAAAC,EAAAA,CAAA,CAAA,CAAAH,CAAAA,CAAAA,MAAA,CAAA,IAAAI,IAAAA,CAAAA,EAAA,CAAAJ,CAAAA,CAAAA,KAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,OAAA2U,IAAAA,CAAAA,CAAAA,CAAAzb,SAAA,CAAA,CAAA,CAAAyb,CAAAxU,CAAAwU,CAAYA,CAAZC,IAAA\/pB,CAAAA,CAAA,CAAAgqB,QAAA,CAAA54B,CAAA,CAAAoL,CAAA,CAAYstB,CAAZ,IAAAV,EAAA9qB,IAAAA,CAAAA,CAAAA,CAAA9B,CAAA8B,CAAA,OAAAoG,GAAAA,CAAAtT,CAAAsT,CAAA,MAAAA,CAAA0kB,CAAA,WAAApwB,KAAAA,CAAAA,CAAA,CAAAqwB,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAC,IAAAA,CAAAA,EAAAD,CAAA7sB,CAAA6sB,CAAA,CAAAD,CAAA1kB,CAAYolB,CAAZG,IAAAnb,CAAAA,CAAA,CAAYgb,CAAZI,IAAApU,CAAAA,CAAA,CAAAqU,QAAA,CAAAC,CAAA,CAAYN,CAAZ,IAAAO,EAAA\/rB,IAAAA,CAAAA,CAAAA,CAAA8rB,CAAA9rB,CAAA8rB,EAAAA,CAAAlU,IAAAA,CAAAA,CAAA,CAAAkU,CAAA,CAAA,OAAA\/T,KAAAA,CAAAA,CAAAA,CAAAgU,CAAAhU,CAAA+T,CAAA\/T,CAAYyT,CACZ;IAAAQ,IAAAA,QAAAC,IAAA,CAAApc,CAAA,CAAYqc,CAAZ,IAAA,IAAArV,EAAA,EAAA,CAAAC,EAAA\/G,SAAA9hB,CAAAA,MAAA,CAAA8oB,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAA,CAAAD,CAAA,CAAAD,CAAAA,CAAAA,IAAAA,CAAA9G,SAAA,CAAAgH,CAAA,CAAAF,CAAAE,CAAAA,CAAAA,EAAA,CAAA,KAAA,MAAAC,EAAAA,CAAA,CAAA,CAAAH,CAAAA,CAAAA,MAAA,CAAA,IAAAI,IAAAA,CAAAA,EAAA,CAAAJ,CAAAA,CAAAA,KAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,OAAAqV,IAAAA,CAAAA,CAAAA,CAAAnc,SAAA,CAAA,CAAA,CAAAmc,CAAAlV,CAAAkV,CAAYA,CAAZC,IAAAzqB,CAAAA,CAAA,CAAA0qB,QAAA,CAAAt5B,CAAA,CAAAoL,CAAA,CAAYguB,CAAZ,IAAApB,EAAA9qB,IAAAA,CAAAA,CAAAA,CAAA9B,CAAA8B,CAAA,OAAAoG,GAAAA,CAAAtT,CAAAsT,CAAA,MAAAA,CAAA0kB,CAAA,WAAApwB,KAAAA,CAAAA,CAAA,CAAAqwB,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAC,IAAAA,CAAAA,EAAAD,CAAA7sB,CAAA6sB,CAAA,CAAAD,CAAA1kB,CAAY8lB,CAAZG,IAAA7b,CAAAA,CAAA,CAAY0b,CAAZI,IAAA9U,CAAAA,CAAA,CAAA+U,QAAA,CAAAC,CAAA,CAAYN,CAAZ,IAAAO,EAAAzsB,IAAAA,CAAAA,CAAAA,CAAAwsB,CAAAxsB,CAAAwsB,EAAAA,CAAA5U,IAAAA,CAAAA,CAAA,CAAA4U,CAAA,CAAA,OAAAzU,KAAAA,CAAAA,CAAAA,CAAA0U,CAAA1U,CAAAyU,CAAAzU,CAAYmU,CACZ;IAAAQ,IAAAA,QAAAC,IAAA,CAAA9c,CAAA,CAAY+c,CAAZ,IAAA,IAAA\/V,EAAA,EAAA,CAAAC,EAAA\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","sources":["goog\/object\/object.js","goog\/string\/string.js","goog\/timer\/timer.js","goog\/net\/xmlhttp.js","goog\/net\/xmlhttpfactory.js","goog\/net\/xhrio.js","goog\/net\/eventtype.js","goog\/net\/httpstatus.js","goog\/uri\/utils.js","goog\/net\/errorcode.js","ajax\/protocols.cljc","ajax\/util.cljc","ajax\/url.cljc","ajax\/interceptors.cljc","ajax\/simple.cljc","ajax\/transit.cljc","cognitect\/transit.cljs","ajax\/formats.cljc","ajax\/ring.cljc","cljs\/core.cljs","ajax\/easy.cljc","ajax\/xml_http_request.cljs","goog\/string\/internal.js","goog\/array\/array.js","goog\/disposable\/disposable.js","shadow\/cljs\/constants\/scittle.cljs-ajax.js","scittle\/cljs_ajax.cljs","ajax\/xhrio.cljs","ajax\/json.cljc","ajax\/core.cljc"],"sourcesContent":["\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Utilities for manipulating objects\/maps\/hashes.\n *\/\ngoog.module('goog.object');\ngoog.module.declareLegacyNamespace();\n\n\/**\n * Calls a function for each element in an object\/map\/hash.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):?} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and the return value is ignored.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {void}\n * @template T,K,V\n *\/\nfunction forEach(obj, f, opt_obj) {\n  for (const key in obj) {\n    f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If that call returns\n * true, adds the element to a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the element is not\n *     included.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,V>} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n *\/\nfunction filter(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n}\n\n\/**\n * For every element in an object\/map\/hash calls a function and inserts the\n * result into a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):R} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and should return something. The result will be inserted into a\n *     new object.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,R>} a new object with the results from f.\n * @template T,K,V,R\n *\/\nfunction map(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n  return res;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n * @param {?Object<K,V>} obj The object to check.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n *\/\nfunction some(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n * @param {?Object<K,V>} obj The object to check.\n * @param {?function(this:T,V,?,?Object<K,V>):boolean} f The function to call\n *     for every element. This function takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n *\/\nfunction every(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (!f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns the number of key-value pairs in the object map.\n * @param {?Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n *\/\nfunction getCount(obj) {\n  let rv = 0;\n  for (const key in obj) {\n    rv++;\n  }\n  return rv;\n}\n\n\/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n *\/\nfunction getAnyKey(obj) {\n  for (const key in obj) {\n    return key;\n  }\n}\n\n\/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object<K,V>} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n *\/\nfunction getAnyValue(obj) {\n  for (const key in obj) {\n    return obj[key];\n  }\n}\n\n\/**\n * Whether the object\/hash\/map contains the given object as a value.\n * An alias for containsValue(obj, val).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n *\/\nfunction contains(obj, val) {\n  return containsValue(obj, val);\n}\n\n\/**\n * Returns the values of the object\/map\/hash.\n * @param {?Object<K,V>} obj The object from which to get the values.\n * @return {!Array<V>} The values in the object\/map\/hash.\n * @template K,V\n *\/\nfunction getValues(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Returns the keys of the object\/map\/hash.\n * @param {?Object} obj The object from which to get the keys.\n * @return {!Array<string>} Array of property keys.\n *\/\nfunction getKeys(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = key;\n  }\n  return res;\n}\n\n\/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)\n * @param {?Object} obj An object to get the value from. Can be array-like.\n * @param {...(string|number|!IArrayLike<number|string>)} var_args A number of\n *     keys (as strings, or numbers, for array-like objects). Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value. If, at any point, the value for a key in the\n *     current object is null or undefined, returns undefined.\n *\/\nfunction getValueByKeys(obj, var_args) {\n  const isArrayLike = goog.isArrayLike(var_args);\n  const keys = isArrayLike ?\n      \/** @type {!IArrayLike<number|string>} *\/ (var_args) :\n      arguments;\n\n  \/\/ Start with the 2nd parameter for the variable parameters syntax.\n  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {\n    if (obj == null) return undefined;\n    obj = obj[keys[i]];\n  }\n\n  return obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given key.\n * @param {?Object} obj The object in which to look for key.\n * @param {?} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n *\/\nfunction containsKey(obj, key) {\n  return obj !== null && key in obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given value. This is O(n).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n *\/\nfunction containsValue(obj, val) {\n  for (const key in obj) {\n    if (obj[key] == val) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findKey(obj, f, thisObj = undefined) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (thisObj), obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findValue(obj, f, thisObj = undefined) {\n  const key = findKey(obj, f, thisObj);\n  return key && obj[key];\n}\n\n\/**\n * Whether the object\/map\/hash is empty.\n * @param {?Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n *\/\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n}\n\n\/**\n * Removes all key value pairs from the object\/map\/hash.\n * @param {?Object} obj The object to clear.\n * @return {void}\n *\/\nfunction clear(obj) {\n  for (const i in obj) {\n    delete obj[i];\n  }\n}\n\n\/**\n * Removes a key-value pair based on the key.\n * @param {?Object} obj The object from which to remove the key.\n * @param {?} key The key to remove.\n * @return {boolean} Whether an element was removed.\n *\/\nfunction remove(obj, key) {\n  let rv;\n  if (rv = key in \/** @type {!Object} *\/ (obj)) {\n    delete obj[key];\n  }\n  return rv;\n}\n\n\/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @return {void}\n * @template K,V\n *\/\nfunction add(obj, key, val) {\n  if (obj !== null && key in obj) {\n    throw new Error(`The object already contains the key \"${key}\"`);\n  }\n  set(obj, key, val);\n}\n\n\/**\n * Returns the value for the given key.\n * @param {?Object<K,V>} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R=} val The value to return if no item is found for the given key\n *     (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n *\/\nfunction get(obj, key, val = undefined) {\n  if (obj !== null && key in obj) {\n    return obj[key];\n  }\n  return val;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add.\n * @template K,V\n * @return {void}\n *\/\nfunction set(obj, key, value) {\n  obj[key] = value;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash if it doesn't exist yet.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setIfUndefined(obj, key, value) {\n  return key in \/** @type {!Object} *\/ (obj) ? obj[key] : (obj[key] = value);\n}\n\n\/**\n * Sets a key and value to an object if the key is not set. The value will be\n * the return value of the given function. If the key already exists, the\n * object will not be changed and the function will not be called (the function\n * will be lazily evaluated -- only called if necessary).\n * This function is particularly useful when used with an `Object` which is\n * acting as a cache.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {function():V} f The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setWithReturnValueIfNotSet(obj, key, f) {\n  if (key in obj) {\n    return obj[key];\n  }\n\n  const val = f();\n  obj[key] = val;\n  return val;\n}\n\n\/**\n * Compares two objects for equality using === on the values.\n * @param {!Object<K,V>} a\n * @param {!Object<K,V>} b\n * @return {boolean}\n * @template K,V\n *\/\nfunction equals(a, b) {\n  for (const k in a) {\n    if (!(k in b) || a[k] !== b[k]) {\n      return false;\n    }\n  }\n  for (const k in b) {\n    if (!(k in a)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns a shallow clone of the object.\n * @param {?Object<K,V>} obj Object to clone.\n * @return {!Object<K,V>} Clone of the input object.\n * @template K,V\n *\/\nfunction clone(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n * WARNINGS:\n * <code>unsafeClone<\/code> does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n * <code>unsafeClone<\/code> is unaware of unique identifiers, and\n * copies UIDs created by <code>getUid<\/code> into cloned results.\n * @param {T} obj The value to clone.\n * @return {T} A clone of the input value.\n * @template T\n *\/\nfunction unsafeClone(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  if (typeof obj.clone === 'function') return obj.clone();\n  if (typeof Map !== 'undefined' && obj instanceof Map) {\n    return new Map(obj);\n  } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n    return new Set(obj);\n  } else if (obj instanceof Date) {\n    return new Date(obj.getTime());\n  }\n  const clone = Array.isArray(obj) ? [] :\n      typeof ArrayBuffer === 'function' &&\n          typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj) &&\n          !(obj instanceof DataView) ?\n                                     new obj.constructor(obj.length) :\n                                     {};\n  for (const key in obj) {\n    clone[key] = unsafeClone(obj[key]);\n  }\n  return clone;\n}\n\n\/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n * @param {?Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n *\/\nfunction transpose(obj) {\n  const transposed = {};\n  for (const key in obj) {\n    transposed[obj[key]] = key;\n  }\n  return transposed;\n}\n\n\/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n *\/\nconst PROTOTYPE_FIELDS = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n];\n\n\/**\n * Extends an object with another object.\n * This operates 'in-place'; it does not create a new Object.\n * Example:\n * var o = {};\n * extend(o, {a: 0, b: 1});\n * o; \/\/ {a: 0, b: 1}\n * extend(o, {b: 2, c: 3});\n * o; \/\/ {a: 0, b: 2, c: 3}\n * @param {?Object} target The object to modify. Existing properties will be\n *     overwritten if they are also present in one of the objects in `var_args`.\n * @param {...(?Object|undefined)} var_args The objects from which values\n *     will be copied.\n * @return {void}\n * @deprecated Prefer Object.assign\n *\/\nfunction extend(target, var_args) {\n  let key;\n  let source;\n  for (let i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      target[key] = source[key];\n    }\n\n    \/\/ For IE the for-in-loop does not contain any properties that are not\n    \/\/ enumerable on the prototype object (for example isPrototypeOf from\n    \/\/ Object.prototype) and it will also not include 'replace' on objects that\n    \/\/ extend String and change 'replace' (not that it is common for anyone to\n    \/\/ extend anything except Object).\n\n    for (let j = 0; j < PROTOTYPE_FIELDS.length; j++) {\n      key = PROTOTYPE_FIELDS[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n}\n\n\/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {!Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n *\/\nfunction create(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw new Error('Uneven number of arguments');\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i += 2) {\n    rv[arguments[i]] = arguments[i + 1];\n  }\n  return rv;\n}\n\n\/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise the arguments are used as\n *     the property names.\n * @return {!Object} The new object.\n *\/\nfunction createSet(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return createSet.apply(null, arguments[0]);\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i++) {\n    rv[arguments[i]] = true;\n  }\n  return rv;\n}\n\n\/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n * @param {!Object<K,V>} obj An object.\n * @return {!Object<K,V>} An immutable view of that object, or the original\n *     object if this browser does not support immutables.\n * @template K,V\n *\/\nfunction createImmutableView(obj) {\n  let result = obj;\n  if (Object.isFrozen && !Object.isFrozen(obj)) {\n    result = Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n}\n\n\/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n *\/\nfunction isImmutableView(obj) {\n  return !!Object.isFrozen && Object.isFrozen(obj);\n}\n\n\/**\n * Get all properties names on a given Object regardless of enumerability.\n * <p> If the browser does not support `Object.getOwnPropertyNames` nor\n * `Object.getPrototypeOf` then this is equivalent to using\n * `getKeys`\n * @param {?Object} obj The object to get the properties of.\n * @param {boolean=} includeObjectPrototype Whether properties defined on\n *     `Object.prototype` should be included in the result.\n * @param {boolean=} includeFunctionPrototype Whether properties defined on\n *     `Function.prototype` should be included in the result.\n * @return {!Array<string>}\n * @public\n *\/\nfunction getAllPropertyNames(\n    obj, includeObjectPrototype = undefined,\n    includeFunctionPrototype = undefined) {\n  if (!obj) {\n    return [];\n  }\n\n  \/\/ Naively use a for..in loop to get the property names if the browser doesn't\n  \/\/ support any other APIs for getting it.\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return getKeys(obj);\n  }\n\n  const visitedSet = {};\n\n  \/\/ Traverse the prototype chain and add all properties to the visited set.\n  let proto = obj;\n  while (proto && (proto !== Object.prototype || !!includeObjectPrototype) &&\n         (proto !== Function.prototype || !!includeFunctionPrototype)) {\n    const names = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < names.length; i++) {\n      visitedSet[names[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return getKeys(visitedSet);\n}\n\n\/**\n * Given a ES5 or ES6 class reference, return its super class \/ super\n * constructor.\n * This should be used in rare cases where you need to walk up the inheritance\n * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,\n * unlike relying on the superClass_ property.\n * Note: To start walking up the hierarchy from an instance call this with its\n * `constructor` property; e.g. `getSuperClass(instance.constructor)`.\n * @param {function(new: ?)} constructor\n * @return {?Object}\n *\/\nfunction getSuperClass(constructor) {\n  const proto = Object.getPrototypeOf(constructor.prototype);\n  return proto && proto.constructor;\n}\n\nexports = {\n  add,\n  clear,\n  clone,\n  contains,\n  containsKey,\n  containsValue,\n  create,\n  createImmutableView,\n  createSet,\n  equals,\n  every,\n  extend,\n  filter,\n  findKey,\n  findValue,\n  forEach,\n  get,\n  getAllPropertyNames,\n  getAnyKey,\n  getAnyValue,\n  getCount,\n  getKeys,\n  getSuperClass,\n  getValueByKeys,\n  getValues,\n  isEmpty,\n  isImmutableView,\n  map,\n  remove,\n  set,\n  setIfUndefined,\n  setWithReturnValueIfNotSet,\n  some,\n  transpose,\n  unsafeClone,\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Utilities for string manipulation.\n *\/\n\n\n\/**\n * Namespace for string utilities\n *\/\ngoog.provide('goog.string');\ngoog.provide('goog.string.Unicode');\n\ngoog.require('goog.dom.safe');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n\/**\n * @define {boolean} Enables HTML escaping of lowercase letter \"e\" which helps\n * with detection of double-escaping as this letter is frequently used.\n *\/\ngoog.string.DETECT_DOUBLE_ESCAPING =\n    goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);\n\n\n\/**\n * @define {boolean} Whether to force non-dom html unescaping.\n *\/\ngoog.string.FORCE_NON_DOM_HTML_UNESCAPING =\n    goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);\n\n\n\/**\n * Common Unicode string characters.\n * @enum {string}\n *\/\ngoog.string.Unicode = {\n  NBSP: '\\xa0',\n  ZERO_WIDTH_SPACE: '\\u200b'  \/\/ This is equivalent to <wbr>.\n};\n\n\n\/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n *\/\ngoog.string.startsWith = goog.string.internal.startsWith;\n\n\n\/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n *\/\ngoog.string.endsWith = goog.string.internal.endsWith;\n\n\n\/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n *\/\ngoog.string.caseInsensitiveStartsWith =\n    goog.string.internal.caseInsensitiveStartsWith;\n\n\n\/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n *\/\ngoog.string.caseInsensitiveEndsWith =\n    goog.string.internal.caseInsensitiveEndsWith;\n\n\n\/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n *\/\ngoog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;\n\n\n\/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n *\/\ngoog.string.subs = function(str, var_args) {\n  'use strict';\n  const splitParts = str.split('%s');\n  let returnString = '';\n\n  const subsArguments = Array.prototype.slice.call(arguments, 1);\n  while (subsArguments.length &&\n         \/\/ Replace up to the last split part. We are inserting in the\n         \/\/ positions between split parts.\n         splitParts.length > 1) {\n    returnString += splitParts.shift() + subsArguments.shift();\n  }\n\n  return returnString + splitParts.join('%s');  \/\/ Join unused '%s'\n};\n\n\n\/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of `str` with collapsed whitespace.\n *\/\ngoog.string.collapseWhitespace = function(str) {\n  'use strict';\n  \/\/ Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  \/\/ class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  \/\/ include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(\/[\\s\\xa0]+\/g, ' ').replace(\/^\\s+|\\s+$\/g, '');\n};\n\n\n\/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n *\/\ngoog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;\n\n\n\/**\n * Checks if a string is empty.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty.\n *\/\ngoog.string.isEmptyString = function(str) {\n  'use strict';\n  return str.length == 0;\n};\n\n\n\/**\n * Checks if a string is empty or contains only whitespaces.\n *\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n *\/\ngoog.string.isEmpty = goog.string.isEmptyOrWhitespace;\n\n\n\/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\n *     instead.\n *\/\ngoog.string.isEmptyOrWhitespaceSafe = function(str) {\n  'use strict';\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));\n};\n\n\n\/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n *\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n *\/\ngoog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;\n\n\n\/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n *\/\ngoog.string.isBreakingWhitespace = function(str) {\n  'use strict';\n  return !\/[^\\t\\n\\r ]\/.test(str);\n};\n\n\n\/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` consists entirely of letters.\n *\/\ngoog.string.isAlpha = function(str) {\n  'use strict';\n  return !\/[^a-zA-Z]\/.test(str);\n};\n\n\n\/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if `str` is numeric.\n *\/\ngoog.string.isNumeric = function(str) {\n  'use strict';\n  return !\/[^0-9]\/.test(str);\n};\n\n\n\/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` is alphanumeric.\n *\/\ngoog.string.isAlphaNumeric = function(str) {\n  'use strict';\n  return !\/[^a-zA-Z0-9]\/.test(str);\n};\n\n\n\/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a space.\n *\/\ngoog.string.isSpace = function(ch) {\n  'use strict';\n  return ch == ' ';\n};\n\n\n\/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a valid unicode character.\n *\/\ngoog.string.isUnicodeChar = function(ch) {\n  'use strict';\n  return ch.length == 1 && ch >= ' ' && ch <= '~' ||\n      ch >= '\\u0080' && ch <= '\\uFFFD';\n};\n\n\n\/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of `str` stripped of newlines.\n *\/\ngoog.string.stripNewlines = function(str) {\n  'use strict';\n  return str.replace(\/(\\r\\n|\\r|\\n)+\/g, ' ');\n};\n\n\n\/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} `str` A copy of {@code} with canonicalized newlines.\n *\/\ngoog.string.canonicalizeNewlines = function(str) {\n  'use strict';\n  return str.replace(\/(\\r\\n|\\r|\\n)\/g, '\\n');\n};\n\n\n\/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of `str` with all whitespace normalized.\n *\/\ngoog.string.normalizeWhitespace = function(str) {\n  'use strict';\n  return str.replace(\/\\xa0|\\s\/g, ' ');\n};\n\n\n\/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of `str` with all consecutive spaces and tabs\n *    replaced with a single space.\n *\/\ngoog.string.normalizeSpaces = function(str) {\n  'use strict';\n  return str.replace(\/\\xa0|[ \\t]+\/g, ' ');\n};\n\n\n\/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n *\/\ngoog.string.collapseBreakingSpaces = function(str) {\n  'use strict';\n  return str.replace(\/[\\t\\r\\n ]+\/g, ' ')\n      .replace(\/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$\/g, '');\n};\n\n\n\/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n *\/\ngoog.string.trim = goog.string.internal.trim;\n\n\n\/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of `str`.\n *\/\ngoog.string.trimLeft = function(str) {\n  'use strict';\n  \/\/ Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  \/\/ class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  \/\/ include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(\/^[\\s\\xa0]+\/, '');\n};\n\n\n\/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of `str`.\n *\/\ngoog.string.trimRight = function(str) {\n  'use strict';\n  \/\/ Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  \/\/ class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  \/\/ include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(\/[\\s\\xa0]+$\/, '');\n};\n\n\n\/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n *\/\ngoog.string.caseInsensitiveCompare =\n    goog.string.internal.caseInsensitiveCompare;\n\n\n\/**\n * Compares two strings interpreting their numeric substrings as numbers.\n *\n * @param {string} str1 First string.\n * @param {string} str2 Second string.\n * @param {!RegExp} tokenizerRegExp Splits a string into substrings of\n *     non-negative integers, non-numeric characters and optionally fractional\n *     numbers starting with a decimal point.\n * @return {number} Negative if str1 < str2, 0 is str1 == str2, positive if\n *     str1 > str2.\n * @private\n *\/\ngoog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {\n  'use strict';\n  if (str1 == str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  \/\/ Using match to split the entire string ahead of time turns out to be faster\n  \/\/ for most inputs than using RegExp.exec or iterating over each character.\n  const tokens1 = str1.toLowerCase().match(tokenizerRegExp);\n  const tokens2 = str2.toLowerCase().match(tokenizerRegExp);\n\n  const count = Math.min(tokens1.length, tokens2.length);\n\n  for (let i = 0; i < count; i++) {\n    const a = tokens1[i];\n    const b = tokens2[i];\n\n    \/\/ Compare pairs of tokens, returning if one token sorts before the other.\n    if (a != b) {\n      \/\/ Only if both tokens are integers is a special comparison required.\n      \/\/ Decimal numbers are sorted as strings (e.g., '.09' < '.1').\n      const num1 = parseInt(a, 10);\n      if (!isNaN(num1)) {\n        const num2 = parseInt(b, 10);\n        if (!isNaN(num2) && num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  \/\/ If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length != tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  \/\/ The two strings must be equivalent except for case (perfect equality is\n  \/\/ tested at the head of the function.) Revert to default ASCII string\n  \/\/ comparison to stabilize the sort.\n  return str1 < str2 ? -1 : 1;\n};\n\n\n\/**\n * String comparison function that handles non-negative integer numbers in a\n * way humans might expect. Using this function, the string 'File 2.jpg' sorts\n * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison\n * is mostly case-insensitive, though strings that are identical except for case\n * are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is up to 50x slower than either the default or the\n * case-insensitive compare. It should not be used in time-critical code, but\n * should be fast enough to sort several hundred short strings (like filenames)\n * with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n *\/\ngoog.string.intAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, \/\\d+|\\D+\/g);\n};\n\n\n\/**\n * String comparison function that handles non-negative integer and fractional\n * numbers in a way humans might expect. Using this function, the string\n * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent\n * to {@link goog.string.intAwareCompare} apart from the way how it interprets\n * dots.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n *\/\ngoog.string.floatAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, \/\\d+|\\.\\d+|\\D+\/g);\n};\n\n\n\/**\n * Alias for {@link goog.string.floatAwareCompare}.\n *\n * @param {string} str1\n * @param {string} str2\n * @return {number}\n *\/\ngoog.string.numerateCompare = goog.string.floatAwareCompare;\n\n\n\/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of `str` that is safe for urls.\n *     Note that '#', ':', and other characters used to delimit portions\n *     of URLs *will* be encoded.\n *\/\ngoog.string.urlEncode = function(str) {\n  'use strict';\n  return encodeURIComponent(String(str));\n};\n\n\n\/**\n * URL-decodes the string. We need to specially handle '+'s because\n * the javascript library doesn't convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded `str`.\n *\/\ngoog.string.urlDecode = function(str) {\n  'use strict';\n  return decodeURIComponent(str.replace(\/\\+\/g, ' '));\n};\n\n\n\/**\n * Converts \\n to <br>s or <br \/>s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n *\/\ngoog.string.newLineToBr = goog.string.internal.newLineToBr;\n\n\n\/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n *\n * It should be noted that > doesn't need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\n * lowercase letter \"e\".\n *\n * NOTE(user):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn't require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars \/ average (mix of cases) \/ all 4 chars)\n * no checks                     0.13 \/ 0.22 \/ 0.22         0.23 \/ 0.53 \/ 0.80\n * indexOf                       0.08 \/ 0.17 \/ 0.26         0.22 \/ 0.54 \/ 0.84\n * indexOf + re test             0.07 \/ 0.17 \/ 0.28         0.19 \/ 0.50 \/ 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of `str`.\n *\/\ngoog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {\n  'use strict';\n  str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);\n  if (goog.string.DETECT_DOUBLE_ESCAPING) {\n    str = str.replace(goog.string.E_RE_, '&#101;');\n  }\n  return str;\n};\n\n\n\/**\n * Regular expression that matches a lowercase letter \"e\", for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.E_RE_ = \/e\/g;\n\n\n\/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n *\/\ngoog.string.unescapeEntities = function(str) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    \/\/ We are careful not to use a DOM if we do not have one or we explicitly\n    \/\/ requested non-DOM html unescaping.\n    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&\n        'document' in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      \/\/ Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n\/**\n * Unescapes a HTML string using the provided document.\n *\n * @param {string} str The string to unescape.\n * @param {!Document} document A document to use in escaping the string.\n * @return {string} An unescaped copy of `str`.\n *\/\ngoog.string.unescapeEntitiesWithDocument = function(str, document) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    return goog.string.unescapeEntitiesUsingDom_(str, document);\n  }\n  return str;\n};\n\n\n\/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @param {Document=} opt_document An optional document to use for creating\n *     elements. If this is not specified then the default window.document\n *     will be used.\n * @return {string} The unescaped `str` string.\n *\/\ngoog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {\n  'use strict';\n  \/** @type {!Object<string, string>} *\/\n  const seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n  \/** @type {!Element} *\/\n  let div;\n  if (opt_document) {\n    div = opt_document.createElement('div');\n  } else {\n    div = goog.global.document.createElement('div');\n  }\n  \/\/ Match as many valid entity characters as possible. If the actual entity\n  \/\/ happens to be shorter, it will still work as innerHTML will return the\n  \/\/ trailing characters unchanged. Since the entity characters do not include\n  \/\/ open angle bracket, there is no chance of XSS from the innerHTML use.\n  \/\/ Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    'use strict';\n    \/\/ Check for cached entity.\n    let value = seen[s];\n    if (value) {\n      return value;\n    }\n    \/\/ Check for numeric entity.\n    if (entity.charAt(0) == '#') {\n      \/\/ Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n      const n = Number('0' + entity.slice(1));\n      if (!isNaN(n)) {\n        value = String.fromCharCode(n);\n      }\n    }\n    \/\/ Fall back to innerHTML otherwise.\n    if (!value) {\n      \/\/ Append a non-entity character to avoid a bug in Webkit that parses\n      \/\/ an invalid entity at the end of innerHTML text as the empty string.\n      goog.dom.safe.setInnerHtml(\n          div,\n          goog.html.uncheckedconversions\n              .safeHtmlFromStringKnownToSatisfyTypeContract(\n                  goog.string.Const.from('Single HTML entity.'), s + ' '));\n      \/\/ Then remove the trailing character from the result.\n      value = div.firstChild.nodeValue.slice(0, -1);\n    }\n    \/\/ Cache and return.\n    return seen[s] = value;\n  });\n};\n\n\n\/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n *\/\ngoog.string.unescapePureXmlEntities_ = function(str) {\n  'use strict';\n  return str.replace(\/&([^;]+);\/g, function(s, entity) {\n    'use strict';\n    switch (entity) {\n      case 'amp':\n        return '&';\n      case 'lt':\n        return '<';\n      case 'gt':\n        return '>';\n      case 'quot':\n        return '\"';\n      default:\n        if (entity.charAt(0) == '#') {\n          \/\/ Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.\n          const n = Number('0' + entity.slice(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        \/\/ For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n\/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization \/ Tokenizing character references.\n * @private\n * @type {!RegExp}\n *\/\ngoog.string.HTML_ENTITY_PATTERN_ = \/&([^;\\s<&]+);?\/g;\n\n\n\/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n *\/\ngoog.string.whitespaceEscape = function(str, opt_xml) {\n  'use strict';\n  \/\/ This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.newLineToBr(str.replace(\/  \/g, ' &#160;'), opt_xml);\n};\n\n\n\/**\n * Preserve spaces that would be otherwise collapsed in HTML by replacing them\n * with non-breaking space Unicode characters.\n * @param {string} str The string in which to preserve whitespace.\n * @return {string} A copy of `str` with preserved whitespace.\n *\/\ngoog.string.preserveSpaces = function(str) {\n  'use strict';\n  return str.replace(\/(^|[\\n ]) \/g, '$1' + goog.string.Unicode.NBSP);\n};\n\n\n\/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * <pre>\n * goog.string.stripQuotes('\"abc\"', '\"`') --> 'abc'\n * goog.string.stripQuotes('`abc`', '\"`') --> 'abc'\n * <\/pre>\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of `str` without the quotes.\n *\/\ngoog.string.stripQuotes = function(str, quoteChars) {\n  'use strict';\n  const length = quoteChars.length;\n  for (let i = 0; i < length; i++) {\n    const quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n\/**\n * Truncates a string to a certain length and adds '...' if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * 'Hello World!' produces 'Hello W...'.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated `str` string.\n *\/\ngoog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (str.length > chars) {\n    str = str.substring(0, chars - 3) + '...';\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n\/**\n * Truncate a string in the middle, adding \"...\" if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number=} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of `str`.\n *\/\ngoog.string.truncateMiddle = function(\n    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars && str.length > chars) {\n    if (opt_trailingChars > chars) {\n      opt_trailingChars = chars;\n    }\n    const endPoint = str.length - opt_trailingChars;\n    const startPoint = chars - opt_trailingChars;\n    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);\n  } else if (str.length > chars) {\n    \/\/ Favor the beginning of the string:\n    let half = Math.floor(chars \/ 2);\n    const endPos = str.length - half;\n    half += chars % 2;\n    str = str.substring(0, half) + '...' + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n\/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private {!Object<string, string>}\n *\/\ngoog.string.specialEscapeChars_ = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\x0B': '\\\\x0B',  \/\/ '\\v' is not supported in JScript\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  \/\/ To support the use case of embedding quoted strings inside of script\n  \/\/ tags, we have to make sure HTML comments and opening\/closing script tags do\n  \/\/ not appear in the resulting string. The specific strings that must be\n  \/\/ escaped are documented at:\n  \/\/ https:\/\/html.spec.whatwg.org\/multipage\/scripting.html#restrictions-for-contents-of-script-elements\n  '<': '\\\\u003C'  \/\/ NOTE: JSON.parse crashes on '\\\\x3c'.\n};\n\n\n\/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private {!Object<string, string>}\n *\/\ngoog.string.jsEscapeCache_ = {\n  '\\'': '\\\\\\''\n};\n\n\n\/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string. The resulting string is safe to embed in\n * `<script>` tags as \"<\" is escaped.\n * @param {string} s The string to quote.\n * @return {string} A copy of `s` surrounded by double quotes.\n *\/\ngoog.string.quote = function(s) {\n  'use strict';\n  s = String(s);\n  const sb = ['\"'];\n  for (let i = 0; i < s.length; i++) {\n    const ch = s.charAt(i);\n    const cc = ch.charCodeAt(0);\n    sb[i + 1] = goog.string.specialEscapeChars_[ch] ||\n        ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));\n  }\n  sb.push('\"');\n  return sb.join('');\n};\n\n\n\/**\n * Takes a string and returns the escaped string for that input string.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing `str`.\n *\/\ngoog.string.escapeString = function(str) {\n  'use strict';\n  const sb = [];\n  for (let i = 0; i < str.length; i++) {\n    sb[i] = goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join('');\n};\n\n\n\/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -> \"\\\\x0E\".\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing `c`.\n *\/\ngoog.string.escapeChar = function(c) {\n  'use strict';\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];\n  }\n\n  let rv = c;\n  const cc = c.charCodeAt(0);\n  if (cc > 31 && cc < 127) {\n    rv = c;\n  } else {\n    \/\/ tab is 9 but handled above\n    if (cc < 256) {\n      rv = '\\\\x';\n      if (cc < 16 || cc > 256) {\n        rv += '0';\n      }\n    } else {\n      rv = '\\\\u';\n      if (cc < 4096) {  \/\/ \\u1000\n        rv += '0';\n      }\n    }\n    rv += cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] = rv;\n};\n\n\n\/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n *\/\ngoog.string.contains = goog.string.internal.contains;\n\n\n\/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n *\/\ngoog.string.caseInsensitiveContains =\n    goog.string.internal.caseInsensitiveContains;\n\n\n\/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n *\/\ngoog.string.countOf = function(s, ss) {\n  'use strict';\n  return s && ss ? s.split(ss).length - 1 : 0;\n};\n\n\n\/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of `s` with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n *\/\ngoog.string.removeAt = function(s, index, stringLength) {\n  'use strict';\n  let resultStr = s;\n  \/\/ If the index is greater or equal to 0 then remove substring\n  if (index >= 0 && index < s.length && stringLength > 0) {\n    resultStr = s.slice(0, index) + s.slice(index + stringLength);\n  }\n  return resultStr;\n};\n\n\n\/**\n * Removes the first occurrence of a substring from a string.\n * @param {string} str The base string from which to remove.\n * @param {string} substr The string to remove.\n * @return {string} A copy of `str` with `substr` removed or the\n *     full string if nothing is removed.\n *\/\ngoog.string.remove = function(str, substr) {\n  'use strict';\n  return str.replace(substr, '');\n};\n\n\n\/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of `s` with `ss` removed or the full\n *      string if nothing is removed.\n *\/\ngoog.string.removeAll = function(s, ss) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, '');\n};\n\n\n\/**\n *  Replaces all occurrences of a substring of a string with a new substring.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to replace.\n *  @param {string} replacement The replacement string.\n *  @return {string} A copy of `s` with `ss` replaced by\n *      `replacement` or the original string if nothing is replaced.\n *\/\ngoog.string.replaceAll = function(s, ss, replacement) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, replacement.replace(\/\\$\/g, '$$$$'));\n};\n\n\n\/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of `s`.\n *\/\ngoog.string.regExpEscape = function(s) {\n  'use strict';\n  return String(s)\n      .replace(\/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])\/g, '\\\\$1')\n      .replace(\/\\x08\/g, '\\\\x08');\n};\n\n\n\/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing `length` repetitions of\n *     `string`.\n *\/\ngoog.string.repeat = (String.prototype.repeat) ? function(string, length) {\n  'use strict';\n  \/\/ The native method is over 100 times faster than the alternative.\n  return string.repeat(length);\n} : function(string, length) {\n  'use strict';\n  return new Array(length + 1).join(string);\n};\n\n\n\/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'<\/pre>\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number=} opt_precision The desired precision.\n * @return {string} `num` as a string with the given options.\n *\/\ngoog.string.padNumber = function(num, length, opt_precision) {\n  'use strict';\n  if (!Number.isFinite(num)) return String(num);\n  let s =\n      (opt_precision !== undefined) ? num.toFixed(opt_precision) : String(num);\n  let index = s.indexOf('.');\n  if (index === -1) {\n    index = s.length;\n  }\n  const sign = s[0] === '-' ? '-' : '';\n  if (sign) {\n    s = s.substring(1);\n  }\n  return sign + goog.string.repeat('0', Math.max(0, length - index)) + s;\n};\n\n\n\/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the `obj`.\n *\/\ngoog.string.makeSafe = function(obj) {\n  'use strict';\n  return obj == null ? '' : String(obj);\n};\n\n\/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn't trust JavaScript's random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n *\/\ngoog.string.getRandomString = function() {\n  'use strict';\n  const x = 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n\/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n *\/\ngoog.string.compareVersions = goog.string.internal.compareVersions;\n\n\n\/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for `str`, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n *\/\ngoog.string.hashCode = function(str) {\n  'use strict';\n  let result = 0;\n  for (let i = 0; i < str.length; ++i) {\n    \/\/ Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result;\n};\n\n\n\/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n *\/\ngoog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;\n\n\n\/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n *\/\ngoog.string.createUniqueString = function() {\n  'use strict';\n  return 'goog_' + goog.string.uniqueStringCounter_++;\n};\n\n\n\/**\n * Converts the supplied string to a number, which may be Infinity or NaN.\n * This function strips whitespace: (toNumber(' 123') === 123)\n * This function accepts scientific notation: (toNumber('1e1') === 10)\n *\n * This is better than JavaScript's built-in conversions because, sadly:\n *     (Number(' ') === 0) and (parseFloat('123a') === 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n *\/\ngoog.string.toNumber = function(str) {\n  'use strict';\n  const num = Number(str);\n  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n\/**\n * Returns whether the given string is lower camel case (e.g. \"isFooBar\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http:\/\/en.wikipedia.org\/wiki\/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is lower camel case.\n *\/\ngoog.string.isLowerCamelCase = function(str) {\n  'use strict';\n  return \/^[a-z]+([A-Z][a-z]*)*$\/.test(str);\n};\n\n\n\/**\n * Returns whether the given string is upper camel case (e.g. \"FooBarBaz\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http:\/\/en.wikipedia.org\/wiki\/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is upper camel case.\n *\/\ngoog.string.isUpperCamelCase = function(str) {\n  'use strict';\n  return \/^([A-Z][a-z]*)+$\/.test(str);\n};\n\n\n\/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \"multi-part-string\" to \"multiPartString\"), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n *\/\ngoog.string.toCamelCase = function(str) {\n  'use strict';\n  return String(str).replace(\/\\-([a-z])\/g, function(all, match) {\n    'use strict';\n    return match.toUpperCase();\n  });\n};\n\n\n\/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \"multiPartString\" to \"multi-part-string\"), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n *\/\ngoog.string.toSelectorCase = function(str) {\n  'use strict';\n  return String(str).replace(\/([A-Z])\/g, '-$1').toLowerCase();\n};\n\n\n\/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn't preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter => \" \":\n *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three')  => 'One Two Three'\n *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '\n *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'\n *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'\n *\n * Custom delimiter => \"_-.\":\n *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'\n *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '\n *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'\n *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'\n *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'\n *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'\n *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'\n *\n * @param {string} str String value in camelCase form.\n * @param {string=} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n *\/\ngoog.string.toTitleCase = function(str, opt_delimiters) {\n  'use strict';\n  let delimiters = (typeof opt_delimiters === 'string') ?\n      goog.string.regExpEscape(opt_delimiters) :\n      '\\\\s';\n\n  \/\/ For IE8, we need to prevent using an empty character set. Otherwise,\n  \/\/ incorrect matching will occur.\n  delimiters = delimiters ? '|[' + delimiters + ']+' : '';\n\n  const regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');\n  return str.replace(regexp, function(all, p1, p2) {\n    'use strict';\n    return p1 + p2.toUpperCase();\n  });\n};\n\n\n\/**\n * Capitalizes a string, i.e. converts the first letter to uppercase\n * and all other letters to lowercase, e.g.:\n *\n * goog.string.capitalize('one')     => 'One'\n * goog.string.capitalize('ONE')     => 'One'\n * goog.string.capitalize('one two') => 'One two'\n *\n * Note that this function does not trim initial whitespace.\n *\n * @param {string} str String value to capitalize.\n * @return {string} String value with first letter in uppercase.\n *\/\ngoog.string.capitalize = function(str) {\n  'use strict';\n  return String(str.charAt(0)).toUpperCase() +\n      String(str.slice(1)).toLowerCase();\n};\n\n\n\/**\n * Parse a string in decimal or hexidecimal ('0xFFFF') form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \"0\" are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http:\/\/goo.gl\/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n *\/\ngoog.string.parseInt = function(value) {\n  'use strict';\n  \/\/ Force finite numbers to strings.\n  if (isFinite(value)) {\n    value = String(value);\n  }\n\n  if (typeof value === 'string') {\n    \/\/ If the string starts with '0x' or '-0x', parse as hex.\n    return \/^\\s*-?0x\/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n\n\n\/**\n * Splits a string on a separator a limited number of times.\n *\n * This implementation is more similar to Python or Java, where the limit\n * parameter specifies the maximum number of splits rather than truncating\n * the number of results.\n *\n * See http:\/\/docs.python.org\/2\/library\/stdtypes.html#str.split\n * See JavaDoc: http:\/\/goo.gl\/F2AsY\n * See Mozilla reference: http:\/\/goo.gl\/dZdZs\n *\n * @param {string} str String to split.\n * @param {string} separator The separator.\n * @param {number} limit The limit to the number of splits. The resulting array\n *     will have a maximum length of limit+1.  Negative numbers are the same\n *     as zero.\n * @return {!Array<string>} The string, split.\n *\/\ngoog.string.splitLimit = function(str, separator, limit) {\n  'use strict';\n  const parts = str.split(separator);\n  const returnVal = [];\n\n  \/\/ Only continue doing this while we haven't hit the limit and we have\n  \/\/ parts left.\n  while (limit > 0 && parts.length) {\n    returnVal.push(parts.shift());\n    limit--;\n  }\n\n  \/\/ If there are remaining parts, append them to the end.\n  if (parts.length) {\n    returnVal.push(parts.join(separator));\n  }\n\n  return returnVal;\n};\n\n\n\/**\n * Finds the characters to the right of the last instance of any separator\n *\n * This function is similar to goog.string.path.baseName, except it can take a\n * list of characters to split the string on. It will return the rightmost\n * grouping of characters to the right of any separator as a left-to-right\n * oriented string.\n *\n * @see goog.string.path.baseName\n * @param {string} str The string\n * @param {string|!Array<string>} separators A list of separator characters\n * @return {string} The last part of the string with respect to the separators\n *\/\ngoog.string.lastComponent = function(str, separators) {\n  'use strict';\n  if (!separators) {\n    return str;\n  } else if (typeof separators == 'string') {\n    separators = [separators];\n  }\n\n  let lastSeparatorIndex = -1;\n  for (let i = 0; i < separators.length; i++) {\n    if (separators[i] == '') {\n      continue;\n    }\n    const currentSeparatorIndex = str.lastIndexOf(separators[i]);\n    if (currentSeparatorIndex > lastSeparatorIndex) {\n      lastSeparatorIndex = currentSeparatorIndex;\n    }\n  }\n  if (lastSeparatorIndex == -1) {\n    return str;\n  }\n  return str.slice(lastSeparatorIndex + 1);\n};\n\n\n\/**\n * Computes the Levenshtein edit distance between two strings.\n * @param {string} a\n * @param {string} b\n * @return {number} The edit distance between the two strings.\n *\/\ngoog.string.editDistance = function(a, b) {\n  'use strict';\n  const v0 = [];\n  const v1 = [];\n\n  if (a == b) {\n    return 0;\n  }\n\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n\n  for (let i = 0; i < b.length + 1; i++) {\n    v0[i] = i;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    v1[0] = i + 1;\n\n    for (let j = 0; j < b.length; j++) {\n      const cost = Number(a[i] != b[j]);\n      \/\/ Cost for the substring is the minimum of adding one character, removing\n      \/\/ one character, or a swap.\n      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n\n    for (let j = 0; j < v0.length; j++) {\n      v0[j] = v1[j];\n    }\n  }\n\n  return v1[b.length];\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview A timer class to which other classes and objects can listen on.\n * This is only an abstraction above `setInterval`.\n *\n * @see ..\/demos\/timers.html\n *\/\n\ngoog.provide('goog.Timer');\n\ngoog.require('goog.Promise');\ngoog.require('goog.events.EventTarget');\ngoog.requireType('goog.Thenable');\n\n\n\n\/**\n * Class for handling timing events.\n *\n * @param {number=} opt_interval Number of ms between ticks (default: 1ms).\n * @param {Object=} opt_timerObject  An object that has `setTimeout`,\n *     `setInterval`, `clearTimeout` and `clearInterval`\n *     (e.g., `window`).\n * @constructor\n * @extends {goog.events.EventTarget}\n *\/\ngoog.Timer = function(opt_interval, opt_timerObject) {\n  'use strict';\n  goog.events.EventTarget.call(this);\n\n  \/**\n   * Number of ms between ticks\n   * @private {number}\n   *\/\n  this.interval_ = opt_interval || 1;\n\n  \/**\n   * An object that implements `setTimeout`, `setInterval`,\n   * `clearTimeout` and `clearInterval`. We default to the window\n   * object. Changing this on {@link goog.Timer.prototype} changes the object\n   * for all timer instances which can be useful if your environment has some\n   * other implementation of timers than the `window` object.\n   * @private {{setTimeout:!Function, clearTimeout:!Function}}\n   *\/\n  this.timerObject_ = \/** @type {{setTimeout, clearTimeout}} *\/ (\n      opt_timerObject || goog.Timer.defaultTimerObject);\n\n  \/**\n   * Cached `tick_` bound to the object for later use in the timer.\n   * @private {Function}\n   * @const\n   *\/\n  this.boundTick_ = goog.bind(this.tick_, this);\n\n  \/**\n   * Firefox browser often fires the timer event sooner (sometimes MUCH sooner)\n   * than the requested timeout. So we compare the time to when the event was\n   * last fired, and reschedule if appropriate. See also\n   * {@link goog.Timer.intervalScale}.\n   * @private {number}\n   *\/\n  this.last_ = goog.now();\n};\ngoog.inherits(goog.Timer, goog.events.EventTarget);\n\n\n\/**\n * Maximum timeout value.\n *\n * Timeout values too big to fit into a signed 32-bit integer may cause overflow\n * in FF, Safari, and Chrome, resulting in the timeout being scheduled\n * immediately. It makes more sense simply not to schedule these timeouts, since\n * 24.8 days is beyond a reasonable expectation for the browser to stay open.\n *\n * @private {number}\n * @const\n *\/\ngoog.Timer.MAX_TIMEOUT_ = 2147483647;\n\n\n\/**\n * A timer ID that cannot be returned by any known implementation of\n * `window.setTimeout`. Passing this value to `window.clearTimeout`\n * should therefore be a no-op.\n *\n * @private {number}\n * @const\n *\/\ngoog.Timer.INVALID_TIMEOUT_ID_ = -1;\n\n\n\/**\n * Whether this timer is enabled\n * @type {boolean}\n *\/\ngoog.Timer.prototype.enabled = false;\n\n\n\/**\n * An object that implements `setTimeout`, `setInterval`,\n * `clearTimeout` and `clearInterval`. We default to the global\n * object. Changing `goog.Timer.defaultTimerObject` changes the object for\n * all timer instances which can be useful if your environment has some other\n * implementation of timers you'd like to use.\n * @type {{setTimeout, clearTimeout}}\n *\/\ngoog.Timer.defaultTimerObject = goog.global;\n\n\n\/**\n * Variable that controls the timer error correction. If the timer is called\n * before the requested interval times `intervalScale`, which often\n * happens on Mozilla, the timer is rescheduled.\n * @see {@link #last_}\n * @type {number}\n *\/\ngoog.Timer.intervalScale = 0.8;\n\n\n\/**\n * Variable for storing the result of `setInterval`.\n * @private {?number}\n *\/\ngoog.Timer.prototype.timer_ = null;\n\n\n\/**\n * Gets the interval of the timer.\n * @return {number} interval Number of ms between ticks.\n *\/\ngoog.Timer.prototype.getInterval = function() {\n  'use strict';\n  return this.interval_;\n};\n\n\n\/**\n * Sets the interval of the timer.\n * @param {number} interval Number of ms between ticks.\n *\/\ngoog.Timer.prototype.setInterval = function(interval) {\n  'use strict';\n  this.interval_ = interval;\n  if (this.timer_ && this.enabled) {\n    \/\/ Stop and then start the timer to reset the interval.\n    this.stop();\n    this.start();\n  } else if (this.timer_) {\n    this.stop();\n  }\n};\n\n\n\/**\n * Callback for the `setTimeout` used by the timer.\n * @private\n *\/\ngoog.Timer.prototype.tick_ = function() {\n  'use strict';\n  if (this.enabled) {\n    var elapsed = goog.now() - this.last_;\n    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {\n      this.timer_ = this.timerObject_.setTimeout(\n          this.boundTick_, this.interval_ - elapsed);\n      return;\n    }\n\n    \/\/ Prevents setInterval from registering a duplicate timeout when called\n    \/\/ in the timer event handler.\n    if (this.timer_) {\n      this.timerObject_.clearTimeout(this.timer_);\n      this.timer_ = null;\n    }\n\n    this.dispatchTick();\n    \/\/ The timer could be stopped in the timer event handler.\n    if (this.enabled) {\n      \/\/ Stop and start to ensure there is always only one timeout even if\n      \/\/ start is called in the timer event handler.\n      this.stop();\n      this.start();\n    }\n  }\n};\n\n\n\/**\n * Dispatches the TICK event. This is its own method so subclasses can override.\n *\/\ngoog.Timer.prototype.dispatchTick = function() {\n  'use strict';\n  this.dispatchEvent(goog.Timer.TICK);\n};\n\n\n\/**\n * Starts the timer.\n *\/\ngoog.Timer.prototype.start = function() {\n  'use strict';\n  this.enabled = true;\n\n  \/\/ If there is no interval already registered, start it now\n  if (!this.timer_) {\n    \/\/ IMPORTANT!\n    \/\/ window.setInterval in FireFox has a bug - it fires based on\n    \/\/ absolute time, rather than on relative time. What this means\n    \/\/ is that if a computer is sleeping\/hibernating for 24 hours\n    \/\/ and the timer interval was configured to fire every 1000ms,\n    \/\/ then after the PC wakes up the timer will fire, in rapid\n    \/\/ succession, 3600*24 times.\n    \/\/ This bug is described here and is already fixed, but it will\n    \/\/ take time to propagate, so for now I am switching this over\n    \/\/ to setTimeout logic.\n    \/\/     https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=376643\n    \/\/\n    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);\n    this.last_ = goog.now();\n  }\n};\n\n\n\/**\n * Stops the timer.\n *\/\ngoog.Timer.prototype.stop = function() {\n  'use strict';\n  this.enabled = false;\n  if (this.timer_) {\n    this.timerObject_.clearTimeout(this.timer_);\n    this.timer_ = null;\n  }\n};\n\n\n\/** @override *\/\ngoog.Timer.prototype.disposeInternal = function() {\n  'use strict';\n  goog.Timer.superClass_.disposeInternal.call(this);\n  this.stop();\n  delete this.timerObject_;\n};\n\n\n\/**\n * Constant for the timer's event type.\n * @const\n *\/\ngoog.Timer.TICK = 'tick';\n\n\n\/**\n * Calls the given function once, after the optional pause.\n * <p>\n * The function is always called asynchronously, even if the delay is 0. This\n * is a common trick to schedule a function to run after a batch of browser\n * event processing.\n *\n * @param {function(this:SCOPE)|{handleEvent:function()}|null} listener Function\n *     or object that has a handleEvent method.\n * @param {number=} opt_delay Milliseconds to wait; default is 0.\n * @param {SCOPE=} opt_handler Object in whose scope to call the listener.\n * @return {number} A handle to the timer ID.\n * @template SCOPE\n *\/\ngoog.Timer.callOnce = function(listener, opt_delay, opt_handler) {\n  'use strict';\n  if (typeof listener === 'function') {\n    if (opt_handler) {\n      listener = goog.bind(listener, opt_handler);\n    }\n  } else if (listener && typeof listener.handleEvent == 'function') {\n    \/\/ using typeof to prevent strict js warning\n    listener = goog.bind(listener.handleEvent, listener);\n  } else {\n    throw new Error('Invalid listener argument');\n  }\n\n  if (Number(opt_delay) > goog.Timer.MAX_TIMEOUT_) {\n    \/\/ Timeouts greater than MAX_INT return immediately due to integer\n    \/\/ overflow in many browsers.  Since MAX_INT is 24.8 days, just don't\n    \/\/ schedule anything at all.\n    return goog.Timer.INVALID_TIMEOUT_ID_;\n  } else {\n    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);\n  }\n};\n\n\n\/**\n * Clears a timeout initiated by {@link #callOnce}.\n * @param {?number} timerId A timer ID.\n *\/\ngoog.Timer.clear = function(timerId) {\n  'use strict';\n  goog.Timer.defaultTimerObject.clearTimeout(timerId);\n};\n\n\n\/**\n * @param {number} delay Milliseconds to wait.\n * @param {(RESULT|goog.Thenable<RESULT>|Thenable)=} opt_result The value\n *     with which the promise will be resolved.\n * @return {!goog.Promise<RESULT>} A promise that will be resolved after\n *     the specified delay, unless it is canceled first.\n * @template RESULT\n *\/\ngoog.Timer.promise = function(delay, opt_result) {\n  'use strict';\n  var timerKey = null;\n  return new goog\n      .Promise(function(resolve, reject) {\n        'use strict';\n        timerKey = goog.Timer.callOnce(function() {\n          'use strict';\n          resolve(opt_result);\n        }, delay);\n        if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {\n          reject(new Error('Failed to schedule timer.'));\n        }\n      })\n      .thenCatch(function(error) {\n        'use strict';\n        \/\/ Clear the timer. The most likely reason is \"cancel\" signal.\n        goog.Timer.clear(timerKey);\n        throw error;\n      });\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Low level handling of XMLHttpRequest.\n *\/\n\ngoog.provide('goog.net.DefaultXmlHttpFactory');\ngoog.provide('goog.net.XmlHttp');\ngoog.provide('goog.net.XmlHttp.OptionType');\ngoog.provide('goog.net.XmlHttp.ReadyState');\ngoog.provide('goog.net.XmlHttpDefines');\n\ngoog.require('goog.asserts');\ngoog.require('goog.net.WrapperXmlHttpFactory');\ngoog.require('goog.net.XmlHttpFactory');\ngoog.requireType('goog.net.XhrLike');\n\n\n\/**\n * Static class for creating XMLHttpRequest objects.\n * @return {!goog.net.XhrLike.OrNative} A new XMLHttpRequest object.\n *\/\ngoog.net.XmlHttp = function() {\n  'use strict';\n  return goog.net.XmlHttp.factory_.createInstance();\n};\n\n\n\/**\n * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to\n *     true bypasses the ActiveX probing code.\n * NOTE(ruilopes): Due to the way JSCompiler works, this define *will not* strip\n * out the ActiveX probing code from binaries.  To achieve this, use\n * `goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR` instead.\n * TODO(ruilopes): Collapse both defines.\n *\/\ngoog.net.XmlHttp.ASSUME_NATIVE_XHR =\n    goog.define('goog.net.XmlHttp.ASSUME_NATIVE_XHR', false);\n\n\n\/** @const *\/\ngoog.net.XmlHttpDefines = {};\n\n\n\/**\n * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to\n *     true eliminates the ActiveX probing code.\n *\/\ngoog.net.XmlHttpDefines.ASSUME_NATIVE_XHR =\n    goog.define('goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR', false);\n\n\n\/**\n * Gets the options to use with the XMLHttpRequest objects obtained using\n * the static methods.\n * @return {Object} The options.\n *\/\ngoog.net.XmlHttp.getOptions = function() {\n  'use strict';\n  return goog.net.XmlHttp.factory_.getOptions();\n};\n\n\n\/**\n * Type of options that an XmlHttp object can have.\n * @enum {number}\n *\/\ngoog.net.XmlHttp.OptionType = {\n  \/**\n   * Whether a no-op function should be used to clear the onreadystatechange\n   * handler instead of null.\n   *\/\n  USE_NULL_FUNCTION: 0,\n\n  \/**\n   * NOTE(user): In IE if send() errors on a *local* request the readystate\n   * is still changed to COMPLETE.  We need to ignore it and allow the\n   * try\/catch around send() to pick up the error.\n   *\/\n  LOCAL_REQUEST_ERROR: 1,\n};\n\n\n\/**\n * Status constants for XMLHTTP, matches:\n * https:\/\/msdn.microsoft.com\/en-us\/library\/ms534361(v=vs.85).aspx\n * @enum {number}\n *\/\ngoog.net.XmlHttp.ReadyState = {\n  \/**\n   * Constant for when xmlhttprequest.readyState is uninitialized\n   *\/\n  UNINITIALIZED: 0,\n\n  \/**\n   * Constant for when xmlhttprequest.readyState is loading.\n   *\/\n  LOADING: 1,\n\n  \/**\n   * Constant for when xmlhttprequest.readyState is loaded.\n   *\/\n  LOADED: 2,\n\n  \/**\n   * Constant for when xmlhttprequest.readyState is in an interactive state.\n   *\/\n  INTERACTIVE: 3,\n\n  \/**\n   * Constant for when xmlhttprequest.readyState is completed\n   *\/\n  COMPLETE: 4,\n};\n\n\n\/**\n * The global factory instance for creating XMLHttpRequest objects.\n * @type {goog.net.XmlHttpFactory}\n * @private\n *\/\ngoog.net.XmlHttp.factory_;\n\n\n\/**\n * Sets the factories for creating XMLHttpRequest objects and their options.\n * @param {Function} factory The factory for XMLHttpRequest objects.\n * @param {Function} optionsFactory The factory for options.\n * @deprecated Use setGlobalFactory instead.\n *\/\ngoog.net.XmlHttp.setFactory = function(factory, optionsFactory) {\n  'use strict';\n  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(\n      goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));\n};\n\n\n\/**\n * Sets the global factory object.\n * @param {!goog.net.XmlHttpFactory} factory New global factory object.\n *\/\ngoog.net.XmlHttp.setGlobalFactory = function(factory) {\n  'use strict';\n  goog.net.XmlHttp.factory_ = factory;\n};\n\n\n\n\/**\n * Default factory to use when creating xhr objects.  You probably shouldn't be\n * instantiating this directly, but rather using it via goog.net.XmlHttp.\n * @extends {goog.net.XmlHttpFactory}\n * @constructor\n *\/\ngoog.net.DefaultXmlHttpFactory = function() {\n  'use strict';\n  goog.net.XmlHttpFactory.call(this);\n};\ngoog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);\n\n\n\/** @override *\/\ngoog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {\n  'use strict';\n  const progId = this.getProgId_();\n  if (progId) {\n    return new ActiveXObject(progId);\n  } else {\n    return new XMLHttpRequest();\n  }\n};\n\n\n\/** @override *\/\ngoog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {\n  'use strict';\n  const progId = this.getProgId_();\n  const options = {};\n  if (progId) {\n    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;\n    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;\n  }\n  return options;\n};\n\n\n\/**\n * The ActiveX PROG ID string to use to create xhr's in IE. Lazily initialized.\n * @type {string|undefined}\n * @private\n *\/\ngoog.net.DefaultXmlHttpFactory.prototype.ieProgId_;\n\n\n\/**\n * Initialize the private state used by other functions.\n * @return {string} The ActiveX PROG ID string to use to create xhr's in IE.\n * @private\n *\/\ngoog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {\n  'use strict';\n  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR ||\n      goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {\n    return '';\n  }\n\n  \/\/ The following blog post describes what PROG IDs to use to create the\n  \/\/ XMLHTTP object in Internet Explorer:\n  \/\/ http:\/\/blogs.msdn.com\/xmlteam\/archive\/2006\/10\/23\/using-the-right-version-of-msxml-in-internet-explorer.aspx\n  \/\/ However we do not (yet) fully trust that this will be OK for old versions\n  \/\/ of IE on Win9x so we therefore keep the last 2.\n  if (!this.ieProgId_ && typeof XMLHttpRequest == 'undefined' &&\n      typeof ActiveXObject != 'undefined') {\n    \/\/ Candidate Active X types.\n    const ACTIVE_X_IDENTS = [\n      'MSXML2.XMLHTTP.6.0',\n      'MSXML2.XMLHTTP.3.0',\n      'MSXML2.XMLHTTP',\n      'Microsoft.XMLHTTP',\n    ];\n    for (let i = 0; i < ACTIVE_X_IDENTS.length; i++) {\n      const candidate = ACTIVE_X_IDENTS[i];\n\n      try {\n        new ActiveXObject(candidate);\n        \/\/ NOTE(user): cannot assign progid and return candidate in one line\n        \/\/ because JSCompiler complaings: BUG 658126\n        this.ieProgId_ = candidate;\n        return candidate;\n      } catch (e) {\n        \/\/ do nothing; try next choice\n      }\n    }\n\n    \/\/ couldn't find any matches\n    throw new Error(\n        'Could not create ActiveXObject. ActiveX might be disabled,' +\n        ' or MSXML might not be installed');\n  }\n\n  return \/** @type {string} *\/ (this.ieProgId_);\n};\n\n\n\/\/ Set the global factory to an instance of the default factory.\ngoog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory());\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Interface for a factory for creating XMLHttpRequest objects\n * and metadata about them.\n *\/\n\ngoog.provide('goog.net.XmlHttpFactory');\n\n\/** @suppress {extraRequire} Typedef. *\/\ngoog.require('goog.net.XhrLike');\n\n\n\n\/**\n * Abstract base class for an XmlHttpRequest factory.\n * @constructor\n *\/\ngoog.net.XmlHttpFactory = function() {};\n\n\n\/**\n * Cache of options - we only actually call internalGetOptions once.\n * @type {?Object}\n * @private\n *\/\ngoog.net.XmlHttpFactory.prototype.cachedOptions_ = null;\n\n\n\/**\n * @return {!goog.net.XhrLike.OrNative} A new XhrLike instance.\n *\/\ngoog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;\n\n\n\/**\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n *\/\ngoog.net.XmlHttpFactory.prototype.getOptions = function() {\n  'use strict';\n  return this.cachedOptions_ ||\n      (this.cachedOptions_ = this.internalGetOptions());\n};\n\n\n\/**\n * Override this method in subclasses to preserve the caching offered by\n * getOptions().\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n * @protected\n *\/\ngoog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Wrapper class for handling XmlHttpRequests.\n *\n * One off requests can be sent through goog.net.XhrIo.send() or an\n * instance can be created to send multiple requests.  Each request uses its\n * own XmlHttpRequest object and handles clearing of the event callback to\n * ensure no leaks.\n *\n * XhrIo is event based, it dispatches events on success, failure, finishing,\n * ready-state change, or progress (download and upload).\n *\n * The ready-state or timeout event fires first, followed by\n * a generic completed event. Then the abort, error, or success event\n * is fired as appropriate. Progress events are fired as they are\n * received. Lastly, the ready event will fire to indicate that the\n * object may be used to make another request.\n *\n * The error event may also be called before completed and\n * ready-state-change if the XmlHttpRequest.open() or .send() methods throw.\n *\n * This class does not support multiple requests, queuing, or prioritization.\n *\n * When progress events are supported by the browser, and progress is\n * enabled via .setProgressEventsEnabled(true), the\n * goog.net.EventType.PROGRESS event will be the re-dispatched browser\n * progress event. Additionally, a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event\n * will be fired for download and upload progress respectively.\n *\/\n\n\ngoog.provide('goog.net.XhrIo');\ngoog.provide('goog.net.XhrIo.ResponseType');\n\ngoog.require('goog.Timer');\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.collections.maps');\ngoog.require('goog.debug.entryPointRegistry');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.json.hybrid');\ngoog.require('goog.log');\ngoog.require('goog.net.ErrorCode');\ngoog.require('goog.net.EventType');\ngoog.require('goog.net.HttpStatus');\ngoog.require('goog.net.XmlHttp');\ngoog.require('goog.object');\ngoog.require('goog.string');\ngoog.require('goog.uri.utils');\ngoog.require('goog.userAgent');\ngoog.requireType('goog.Uri');\ngoog.requireType('goog.debug.ErrorHandler');\ngoog.requireType('goog.net.XhrLike');\ngoog.requireType('goog.net.XmlHttpFactory');\n\ngoog.scope(function() {\n\n'use strict';\n\/**\n * Basic class for handling XMLHttpRequests.\n * @param {goog.net.XmlHttpFactory=} opt_xmlHttpFactory Factory to use when\n *     creating XMLHttpRequest objects.\n * @constructor\n * @extends {goog.events.EventTarget}\n *\/\ngoog.net.XhrIo = function(opt_xmlHttpFactory) {\n  'use strict';\n  XhrIo.base(this, 'constructor');\n\n  \/**\n   * Map of default headers to add to every request, use:\n   * XhrIo.headers.set(name, value)\n   * @type {!Map<string,string>}\n   *\/\n  this.headers = new Map();\n\n  \/**\n   * Optional XmlHttpFactory\n   * @private {goog.net.XmlHttpFactory}\n   *\/\n  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;\n\n  \/**\n   * Whether XMLHttpRequest is active.  A request is active from the time send()\n   * is called until onReadyStateChange() is complete, or error() or abort()\n   * is called.\n   * @private {boolean}\n   *\/\n  this.active_ = false;\n\n  \/**\n   * The XMLHttpRequest object that is being used for the transfer.\n   * @private {?goog.net.XhrLike.OrNative}\n   *\/\n  this.xhr_ = null;\n\n  \/**\n   * The options to use with the current XMLHttpRequest object.\n   * @private {?Object}\n   *\/\n  this.xhrOptions_ = null;\n\n  \/**\n   * Last URL that was requested.\n   * @private {string|goog.Uri}\n   *\/\n  this.lastUri_ = '';\n\n  \/**\n   * Method for the last request.\n   * @private {string}\n   *\/\n  this.lastMethod_ = '';\n\n  \/**\n   * Last error code.\n   * @private {!goog.net.ErrorCode}\n   *\/\n  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n\n  \/**\n   * Last error message.\n   * @private {Error|string}\n   *\/\n  this.lastError_ = '';\n\n  \/**\n   * Used to ensure that we don't dispatch an multiple ERROR events. This can\n   * happen in IE when it does a synchronous load and one error is handled in\n   * the ready state change and one is handled due to send() throwing an\n   * exception.\n   * @private {boolean}\n   *\/\n  this.errorDispatched_ = false;\n\n  \/**\n   * Used to make sure we don't fire the complete event from inside a send call.\n   * @private {boolean}\n   *\/\n  this.inSend_ = false;\n\n  \/**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.open.\n   * @private {boolean}\n   *\/\n  this.inOpen_ = false;\n\n  \/**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.abort.\n   * @private {boolean}\n   *\/\n  this.inAbort_ = false;\n\n  \/**\n   * Number of milliseconds after which an incomplete request will be aborted\n   * and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no timeout\n   * is set.\n   * @private {number}\n   *\/\n  this.timeoutInterval_ = 0;\n\n  \/**\n   * Timer to track request timeout.\n   * @private {?number}\n   *\/\n  this.timeoutId_ = null;\n\n  \/**\n   * The requested type for the response. The empty string means use the default\n   * XHR behavior.\n   * @private {goog.net.XhrIo.ResponseType}\n   *\/\n  this.responseType_ = ResponseType.DEFAULT;\n\n  \/**\n   * Whether a \"credentialed\" request is to be sent (one that is aware of\n   * cookies and authentication). This is applicable only for cross-domain\n   * requests and more recent browsers that support this part of the HTTP Access\n   * Control standard.\n   *\n   * @see http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-withcredentials-attribute\n   *\n   * @private {boolean}\n   *\/\n  this.withCredentials_ = false;\n\n  \/**\n   * Whether progress events are enabled for this request. This is\n   * disabled by default because setting a progress event handler\n   * causes pre-flight OPTIONS requests to be sent for CORS requests,\n   * even in cases where a pre-flight request would not otherwise be\n   * sent.\n   *\n   * @see http:\/\/xhr.spec.whatwg.org\/#security-considerations\n   *\n   * Note that this can cause problems for Firefox 22 and below, as an\n   * older \"LSProgressEvent\" will be dispatched by the browser. That\n   * progress event is no longer supported, and can lead to failures,\n   * including throwing exceptions.\n   *\n   * @see http:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=845631\n   * @see b\/23469793\n   *\n   * @private {boolean}\n   *\/\n  this.progressEventsEnabled_ = false;\n\n  \/**\n   * True if we can use XMLHttpRequest's timeout directly.\n   * @private {boolean}\n   *\/\n  this.useXhr2Timeout_ = false;\n\n  \/**\n   * Specification for Trust Token operations (issuance, signing, and\n   * redemption).\n   * @private {?TrustTokenAttributeType}\n   *\/\n  this.trustToken_ = null;\n};\ngoog.inherits(goog.net.XhrIo, goog.events.EventTarget);\n\nconst XhrIo = goog.net.XhrIo;\n\n\/**\n * Response types that may be requested for XMLHttpRequests.\n * @enum {string}\n * @see http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-responsetype-attribute\n *\/\ngoog.net.XhrIo.ResponseType = {\n  DEFAULT: '',\n  TEXT: 'text',\n  DOCUMENT: 'document',\n  \/\/ Not supported as of Chrome 10.0.612.1 dev\n  BLOB: 'blob',\n  ARRAY_BUFFER: 'arraybuffer',\n};\n\nconst ResponseType = goog.net.XhrIo.ResponseType;\n\n\n\/**\n * A reference to the XhrIo logger\n * @private {?goog.log.Logger}\n * @const\n *\/\ngoog.net.XhrIo.prototype.logger_ = goog.log.getLogger('goog.net.XhrIo');\n\n\n\/**\n * The Content-Type HTTP header name\n * @type {string}\n *\/\ngoog.net.XhrIo.CONTENT_TYPE_HEADER = 'Content-Type';\n\n\n\/**\n * The Content-Transfer-Encoding HTTP header name\n * @type {string}\n *\/\ngoog.net.XhrIo.CONTENT_TRANSFER_ENCODING = 'Content-Transfer-Encoding';\n\n\n\/**\n * The pattern matching the 'http' and 'https' URI schemes\n * @type {!RegExp}\n *\/\ngoog.net.XhrIo.HTTP_SCHEME_PATTERN = \/^https?$\/i;\n\nconst HTTP_SCHEME_PATTERN = goog.net.XhrIo.HTTP_SCHEME_PATTERN;\n\n\n\/**\n * The methods that typically come along with form data.  We set different\n * headers depending on whether the HTTP action is one of these.\n * @type {!Array<string>}\n *\/\ngoog.net.XhrIo.METHODS_WITH_FORM_DATA = ['POST', 'PUT'];\n\n\n\/**\n * The Content-Type HTTP header value for a url-encoded form\n * @type {string}\n *\/\ngoog.net.XhrIo.FORM_CONTENT_TYPE =\n    'application\/x-www-form-urlencoded;charset=utf-8';\n\n\n\/**\n * The XMLHttpRequest Level two timeout delay ms property name.\n *\n * @see http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-timeout-attribute\n *\n * @private {string}\n * @const\n *\/\ngoog.net.XhrIo.XHR2_TIMEOUT_ = 'timeout';\n\n\n\/**\n * The XMLHttpRequest Level two ontimeout handler property name.\n *\n * @see http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-timeout-attribute\n *\n * @private {string}\n * @const\n *\/\ngoog.net.XhrIo.XHR2_ON_TIMEOUT_ = 'ontimeout';\n\n\n\/**\n * All non-disposed instances of goog.net.XhrIo created\n * by {@link goog.net.XhrIo.send} are in this Array.\n * @see goog.net.XhrIo.cleanup\n * @private {!Array<!goog.net.XhrIo>}\n *\/\ngoog.net.XhrIo.sendInstances_ = [];\n\n\n\/**\n * Static send that creates a short lived instance of XhrIo to send the\n * request.\n * @see goog.net.XhrIo.cleanup\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {?function(this:goog.net.XhrIo, ?)=} opt_callback Callback function\n *     for when request is complete.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Body data.\n * @param {(?Object|?goog.collections.maps.MapLike<string, string>)=}\n *     opt_headers Map of headers to add to the request.\n * @param {number=} opt_timeoutInterval Number of milliseconds after which an\n *     incomplete request will be aborted; 0 means no timeout is set.\n * @param {boolean=} opt_withCredentials Whether to send credentials with the\n *     request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.\n * @return {!goog.net.XhrIo} The sent XhrIo.\n *\/\ngoog.net.XhrIo.send = function(\n    url, opt_callback, opt_method, opt_content, opt_headers,\n    opt_timeoutInterval, opt_withCredentials) {\n  'use strict';\n  const x = new goog.net.XhrIo();\n  goog.net.XhrIo.sendInstances_.push(x);\n  if (opt_callback) {\n    x.listen(goog.net.EventType.COMPLETE, opt_callback);\n  }\n  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);\n  if (opt_timeoutInterval) {\n    x.setTimeoutInterval(opt_timeoutInterval);\n  }\n  if (opt_withCredentials) {\n    x.setWithCredentials(opt_withCredentials);\n  }\n  x.send(url, opt_method, opt_content, opt_headers);\n  return x;\n};\n\n\n\/**\n * Disposes all non-disposed instances of goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send}.\n * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance\n * it creates when the request completes or fails.  However, if\n * the request never completes, then the goog.net.XhrIo is not disposed.\n * This can occur if the window is unloaded before the request completes.\n * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo\n * it creates and make the client of {@link goog.net.XhrIo.send} be\n * responsible for disposing it in this case.  However, this makes things\n * significantly more complicated for the client, and the whole point\n * of {@link goog.net.XhrIo.send} is that it's simple and easy to use.\n * Clients of {@link goog.net.XhrIo.send} should call\n * {@link goog.net.XhrIo.cleanup} when doing final\n * cleanup on window unload.\n *\/\ngoog.net.XhrIo.cleanup = function() {\n  'use strict';\n  const instances = goog.net.XhrIo.sendInstances_;\n  while (instances.length) {\n    instances.pop().dispose();\n  }\n};\n\n\n\/**\n * Installs exception protection for all entry point introduced by\n * goog.net.XhrIo instances which are not protected by\n * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},\n * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or\n * {@link goog.events.protectBrowserEventEntryPoint}.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point(s).\n *\/\ngoog.net.XhrIo.protectEntryPoints = function(errorHandler) {\n  'use strict';\n  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n      errorHandler.protectEntryPoint(\n          goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n};\n\n\n\/**\n * Disposes of the specified goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send} and removes it from\n * {@link goog.net.XhrIo.pendingStaticSendInstances_}.\n * @private\n *\/\ngoog.net.XhrIo.prototype.cleanupSend_ = function() {\n  'use strict';\n  this.dispose();\n  goog.array.remove(goog.net.XhrIo.sendInstances_, this);\n};\n\n\n\/**\n * Returns the number of milliseconds after which an incomplete request will be\n * aborted, or 0 if no timeout is set.\n * @return {number} Timeout interval in milliseconds.\n *\/\ngoog.net.XhrIo.prototype.getTimeoutInterval = function() {\n  'use strict';\n  return this.timeoutInterval_;\n};\n\n\n\/**\n * Sets the number of milliseconds after which an incomplete request will be\n * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no\n * timeout is set.\n * @param {number} ms Timeout interval in milliseconds; 0 means none.\n *\/\ngoog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {\n  'use strict';\n  this.timeoutInterval_ = Math.max(0, ms);\n};\n\n\n\/**\n * Sets the desired type for the response. At time of writing, this is only\n * supported in very recent versions of WebKit (10.0.612.1 dev and later).\n *\n * If this is used, the response may only be accessed via {@link #getResponse}.\n *\n * @param {goog.net.XhrIo.ResponseType} type The desired type for the response.\n *\/\ngoog.net.XhrIo.prototype.setResponseType = function(type) {\n  'use strict';\n  this.responseType_ = type;\n};\n\n\n\/**\n * Gets the desired type for the response.\n * @return {goog.net.XhrIo.ResponseType} The desired type for the response.\n *\/\ngoog.net.XhrIo.prototype.getResponseType = function() {\n  'use strict';\n  return this.responseType_;\n};\n\n\n\/**\n * Sets whether a \"credentialed\" request that is aware of cookie and\n * authentication information should be made. This option is only supported by\n * browsers that support HTTP Access Control. As of this writing, this option\n * is not supported in IE.\n *\n * @param {boolean} withCredentials Whether this should be a \"credentialed\"\n *     request.\n *\/\ngoog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {\n  'use strict';\n  this.withCredentials_ = withCredentials;\n};\n\n\n\/**\n * Gets whether a \"credentialed\" request is to be sent.\n * @return {boolean} The desired type for the response.\n *\/\ngoog.net.XhrIo.prototype.getWithCredentials = function() {\n  'use strict';\n  return this.withCredentials_;\n};\n\n\n\/**\n * Sets whether progress events are enabled for this request. Note\n * that progress events require pre-flight OPTIONS request handling\n * for CORS requests, and may cause trouble with older browsers. See\n * progressEventsEnabled_ for details.\n * @param {boolean} enabled Whether progress events should be enabled.\n *\/\ngoog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {\n  'use strict';\n  this.progressEventsEnabled_ = enabled;\n};\n\n\n\/**\n * Gets whether progress events are enabled.\n * @return {boolean} Whether progress events are enabled for this request.\n *\/\ngoog.net.XhrIo.prototype.getProgressEventsEnabled = function() {\n  'use strict';\n  return this.progressEventsEnabled_;\n};\n\n\/**\n * Specify a Trust Tokens operation to execute alongside the request.\n * @param {!TrustTokenAttributeType} trustToken a Trust Tokens operation to\n *     execute.\n *\/\ngoog.net.XhrIo.prototype.setTrustToken = function(trustToken) {\n  'use strict';\n  this.trustToken_ = trustToken;\n};\n\/**\n * Instance send that actually uses XMLHttpRequest to make a server call.\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}\n *     opt_content Body data.\n * @param {(?Object|?goog.collections.maps.MapLike<string, string>)=}\n *     opt_headers Map of headers to add to the request.\n * @suppress {strictMissingProperties} Added to tighten compiler checks\n * @suppress {deprecated} Use deprecated goog.structs.forEach to allow different\n * types of parameters for opt_headers.\n *\/\ngoog.net.XhrIo.prototype.send = function(\n    url, opt_method, opt_content, opt_headers) {\n  'use strict';\n  if (this.xhr_) {\n    throw new Error(\n        '[goog.net.XhrIo] Object is active with another request=' +\n        this.lastUri_ + '; newUri=' + url);\n  }\n\n  const method = opt_method ? opt_method.toUpperCase() : 'GET';\n\n  this.lastUri_ = url;\n  this.lastError_ = '';\n  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n  this.lastMethod_ = method;\n  this.errorDispatched_ = false;\n  this.active_ = true;\n\n  \/\/ Use the factory to create the XHR object and options\n  this.xhr_ = this.createXhr();\n  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() :\n                                            goog.net.XmlHttp.getOptions();\n\n  \/\/ Set up the onreadystatechange callback\n  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);\n\n  \/\/ Set up upload\/download progress events, if progress events are supported.\n  if (this.getProgressEventsEnabled() && 'onprogress' in this.xhr_) {\n    \/** @suppress {strictMissingProperties} Added to tighten compiler checks *\/\n    this.xhr_.onprogress = goog.bind(function(e) {\n      'use strict';\n      this.onProgressHandler_(e, true);\n    }, this);\n    if (this.xhr_.upload) {\n      \/**\n       * @suppress {strictMissingProperties} Added to tighten compiler checks\n       *\/\n      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);\n    }\n  }\n\n  \/**\n   * Try to open the XMLHttpRequest (always async), if an error occurs here it\n   * is generally permission denied\n   *\/\n  try {\n    goog.log.fine(this.logger_, this.formatMsg_('Opening Xhr'));\n    this.inOpen_ = true;\n    this.xhr_.open(method, String(url), true);  \/\/ Always async!\n    this.inOpen_ = false;\n  } catch (err) {\n    goog.log.fine(\n        this.logger_, this.formatMsg_('Error opening Xhr: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n    return;\n  }\n\n  \/\/ We can't use null since this won't allow requests with form data to have a\n  \/\/ content length specified which will cause some proxies to return a 411\n  \/\/ error.\n  const content = opt_content || '';\n\n  const headers = new Map(this.headers);\n\n  \/\/ Add headers specific to this request\n  if (opt_headers) {\n    if (Object.getPrototypeOf(opt_headers) === Object.prototype) {\n      for (let key in opt_headers) {\n        headers.set(key, opt_headers[key]);\n      }\n    } else if (\n        typeof opt_headers.keys === 'function' &&\n        typeof opt_headers.get === 'function') {\n      for (const key of opt_headers.keys()) {\n        headers.set(key, opt_headers.get(key));\n      }\n    } else {\n      throw new Error(\n          'Unknown input type for opt_headers: ' + String(opt_headers));\n    }\n  }\n\n  \/\/ Find whether a content type header is set, ignoring case.\n  \/\/ HTTP header names are case-insensitive.  See:\n  \/\/ http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec4.html#sec4.2\n  const contentTypeKey =\n      Array.from(headers.keys())\n          .find(\n              header => goog.string.caseInsensitiveEquals(\n                  goog.net.XhrIo.CONTENT_TYPE_HEADER, header));\n\n  const contentIsFormData =\n      (goog.global['FormData'] && (content instanceof goog.global['FormData']));\n  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) &&\n      !contentTypeKey && !contentIsFormData) {\n    \/\/ For requests typically with form data, default to the url-encoded form\n    \/\/ content type unless this is a FormData request.  For FormData,\n    \/\/ the browser will automatically add a multipart\/form-data content type\n    \/\/ with an appropriate multipart boundary.\n    headers.set(\n        goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);\n  }\n\n  \/\/ Add the headers to the Xhr object\n  for (const [key, value] of headers) {\n    this.xhr_.setRequestHeader(key, value);\n  }\n\n  if (this.responseType_) {\n    this.xhr_.responseType = this.responseType_;\n  }\n  \/\/ Set xhr_.withCredentials only when the value is different, or else in\n  \/\/ synchronous XMLHtppRequest.open Firefox will throw an exception.\n  \/\/ https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=736340\n  if ('withCredentials' in this.xhr_ &&\n      this.xhr_.withCredentials !== this.withCredentials_) {\n    \/** @suppress {strictMissingProperties} Added to tighten compiler checks *\/\n    this.xhr_.withCredentials = this.withCredentials_;\n  }\n\n  if ('setTrustToken' in this.xhr_ && this.trustToken_) {\n    try {\n      this.xhr_.setTrustToken(this.trustToken_);\n    } catch (err) {\n      goog.log.fine(\n          this.logger_, this.formatMsg_('Error SetTrustToken: ' + err.message));\n    }\n  }\n  \/**\n   * Try to send the request, or other wise report an error (404 not found).\n   *\/\n  try {\n    this.cleanUpTimeoutTimer_();  \/\/ Paranoid, should never be running.\n    if (this.timeoutInterval_ > 0) {\n      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);\n      goog.log.fine(\n          this.logger_,\n          this.formatMsg_(\n              'Will abort after ' + this.timeoutInterval_ +\n              'ms if incomplete, xhr2 ' + this.useXhr2Timeout_));\n      if (this.useXhr2Timeout_) {\n        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;\n        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] =\n            goog.bind(this.timeout_, this);\n      } else {\n        this.timeoutId_ =\n            goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);\n      }\n    }\n    goog.log.fine(this.logger_, this.formatMsg_('Sending request'));\n    this.inSend_ = true;\n    this.xhr_.send(content);\n    this.inSend_ = false;\n\n  } catch (err) {\n    goog.log.fine(this.logger_, this.formatMsg_('Send error: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n  }\n};\n\n\n\/**\n * Determines if the argument is an XMLHttpRequest that supports the level 2\n * timeout value and event.\n *\n * Currently, FF 21.0 OS X has the fields but won't actually call the timeout\n * handler.  Perhaps the confusion in the bug referenced below hasn't\n * entirely been resolved.\n *\n * @see http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-timeout-attribute\n * @see https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=525816\n *\n * @param {!goog.net.XhrLike.OrNative} xhr The request.\n * @return {boolean} True if the request supports level 2 timeout.\n * @private\n *\/\ngoog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {\n  'use strict';\n  return goog.userAgent.IE &&\n      typeof xhr[goog.net.XhrIo.XHR2_TIMEOUT_] === 'number' &&\n      xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_] !== undefined;\n};\n\n\n\/**\n * Creates a new XHR object.\n * @return {!goog.net.XhrLike.OrNative} The newly created XHR object.\n * @protected\n *\/\ngoog.net.XhrIo.prototype.createXhr = function() {\n  'use strict';\n  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() :\n                                goog.net.XmlHttp();\n};\n\n\n\/**\n * The request didn't complete after {@link goog.net.XhrIo#timeoutInterval_}\n * milliseconds; raises a {@link goog.net.EventType.TIMEOUT} event and aborts\n * the request.\n * @private\n *\/\ngoog.net.XhrIo.prototype.timeout_ = function() {\n  'use strict';\n  if (typeof goog == 'undefined') {\n    \/\/ If goog is undefined then the callback has occurred as the application\n    \/\/ is unloading and will error.  Thus we let it silently fail.\n  } else if (this.xhr_) {\n    this.lastError_ =\n        'Timed out after ' + this.timeoutInterval_ + 'ms, aborting';\n    this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;\n    goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));\n    this.dispatchEvent(goog.net.EventType.TIMEOUT);\n    this.abort(goog.net.ErrorCode.TIMEOUT);\n  }\n};\n\n\n\/**\n * Something errorred, so inactivate, fire error callback and clean up\n * @param {goog.net.ErrorCode} errorCode The error code.\n * @param {Error} err The error object.\n * @private\n *\/\ngoog.net.XhrIo.prototype.error_ = function(errorCode, err) {\n  'use strict';\n  this.active_ = false;\n  if (this.xhr_) {\n    this.inAbort_ = true;\n    this.xhr_.abort();  \/\/ Ensures XHR isn't hung (FF)\n    this.inAbort_ = false;\n  }\n  this.lastError_ = err;\n  this.lastErrorCode_ = errorCode;\n  this.dispatchErrors_();\n  this.cleanUpXhr_();\n};\n\n\n\/**\n * Dispatches COMPLETE and ERROR in case of an error. This ensures that we do\n * not dispatch multiple error events.\n * @private\n *\/\ngoog.net.XhrIo.prototype.dispatchErrors_ = function() {\n  'use strict';\n  if (!this.errorDispatched_) {\n    this.errorDispatched_ = true;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ERROR);\n  }\n};\n\n\n\/**\n * Abort the current XMLHttpRequest\n * @param {goog.net.ErrorCode=} opt_failureCode Optional error code to use -\n *     defaults to ABORT.\n *\/\ngoog.net.XhrIo.prototype.abort = function(opt_failureCode) {\n  'use strict';\n  if (this.xhr_ && this.active_) {\n    goog.log.fine(this.logger_, this.formatMsg_('Aborting'));\n    this.active_ = false;\n    this.inAbort_ = true;\n    this.xhr_.abort();\n    this.inAbort_ = false;\n    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ABORT);\n    this.cleanUpXhr_();\n  }\n};\n\n\n\/**\n * Nullifies all callbacks to reduce risks of leaks.\n * @override\n * @protected\n *\/\ngoog.net.XhrIo.prototype.disposeInternal = function() {\n  'use strict';\n  if (this.xhr_) {\n    \/\/ We explicitly do not call xhr_.abort() unless active_ is still true.\n    \/\/ This is to avoid unnecessarily aborting a successful request when\n    \/\/ dispose() is called in a callback triggered by a complete response, but\n    \/\/ in which browser cleanup has not yet finished.\n    \/\/ (See http:\/\/b\/issue?id=1684217.)\n    if (this.active_) {\n      this.active_ = false;\n      this.inAbort_ = true;\n      this.xhr_.abort();\n      this.inAbort_ = false;\n    }\n    this.cleanUpXhr_(true);\n  }\n\n  XhrIo.base(this, 'disposeInternal');\n};\n\n\n\/**\n * Internal handler for the XHR object's readystatechange event.  This method\n * checks the status and the readystate and fires the correct callbacks.\n * If the request has ended, the handlers are cleaned up and the XHR object is\n * nullified.\n * @private\n *\/\ngoog.net.XhrIo.prototype.onReadyStateChange_ = function() {\n  'use strict';\n  if (this.isDisposed()) {\n    \/\/ This method is the target of an untracked goog.Timer.callOnce().\n    return;\n  }\n  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {\n    \/\/ Were not being called from within a call to this.xhr_.send\n    \/\/ this.xhr_.abort, or this.xhr_.open, so this is an entry point\n    this.onReadyStateChangeEntryPoint_();\n  } else {\n    this.onReadyStateChangeHelper_();\n  }\n};\n\n\n\/**\n * Used to protect the onreadystatechange handler entry point.  Necessary\n * as {#onReadyStateChange_} maybe called from within send or abort, this\n * method is only called when {#onReadyStateChange_} is called as an\n * entry point.\n * {@see #protectEntryPoints}\n * @private\n *\/\ngoog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {\n  'use strict';\n  this.onReadyStateChangeHelper_();\n};\n\n\n\/**\n * Helper for {@link #onReadyStateChange_}.  This is used so that\n * entry point calls to {@link #onReadyStateChange_} can be routed through\n * {@link #onReadyStateChangeEntryPoint_}.\n * @private\n *\/\ngoog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {\n  'use strict';\n  if (!this.active_) {\n    \/\/ can get called inside abort call\n    return;\n  }\n\n  if (typeof goog == 'undefined') {\n    \/\/ NOTE(user): If goog is undefined then the callback has occurred as the\n    \/\/ application is unloading and will error.  Thus we let it silently fail.\n\n  } else if (\n      this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] &&\n      this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE &&\n      this.getStatus() == 2) {\n    \/\/ NOTE(user): In IE if send() errors on a *local* request the readystate\n    \/\/ is still changed to COMPLETE.  We need to ignore it and allow the\n    \/\/ try\/catch around send() to pick up the error.\n    goog.log.fine(\n        this.logger_,\n        this.formatMsg_('Local request error detected and ignored'));\n\n  } else {\n    \/\/ In IE when the response has been cached we sometimes get the callback\n    \/\/ from inside the send call and this usually breaks code that assumes that\n    \/\/ XhrIo is asynchronous.  If that is the case we delay the callback\n    \/\/ using a timer.\n    if (this.inSend_ &&\n        this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {\n      goog.Timer.callOnce(this.onReadyStateChange_, 0, this);\n      return;\n    }\n\n    this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);\n\n    \/\/ readyState indicates the transfer has finished\n    if (this.isComplete()) {\n      goog.log.fine(this.logger_, this.formatMsg_('Request complete'));\n\n      this.active_ = false;\n\n      try {\n        \/\/ Call the specific callbacks for success or failure. Only call the\n        \/\/ success if the status is 200 (HTTP_OK) or 304 (HTTP_CACHED)\n        if (this.isSuccess()) {\n          this.dispatchEvent(goog.net.EventType.COMPLETE);\n          this.dispatchEvent(goog.net.EventType.SUCCESS);\n        } else {\n          this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;\n          this.lastError_ =\n              this.getStatusText() + ' [' + this.getStatus() + ']';\n          this.dispatchErrors_();\n        }\n      } finally {\n        this.cleanUpXhr_();\n      }\n    }\n  }\n};\n\n\n\/**\n * Internal handler for the XHR object's onprogress event. Fires both a generic\n * PROGRESS event and either a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event to\n * allow specific binding for each XHR progress event.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {boolean=} opt_isDownload Whether the current progress event is from a\n *     download. Used to determine whether DOWNLOAD_PROGRESS or UPLOAD_PROGRESS\n *     event should be dispatched.\n * @private\n *\/\ngoog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {\n  'use strict';\n  goog.asserts.assert(\n      e.type === goog.net.EventType.PROGRESS,\n      'goog.net.EventType.PROGRESS is of the same type as raw XHR progress.');\n  this.dispatchEvent(\n      goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));\n  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(\n      e,\n      opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS :\n                       goog.net.EventType.UPLOAD_PROGRESS));\n};\n\n\n\/**\n * Creates a representation of the native ProgressEvent. IE doesn't support\n * constructing ProgressEvent via \"new\", and the alternatives (e.g.,\n * ProgressEvent.initProgressEvent) are non-standard or deprecated.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {!goog.net.EventType} eventType The type of the event.\n * @return {!ProgressEvent} The progress event.\n * @private\n *\/\ngoog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {\n  'use strict';\n  return \/** @type {!ProgressEvent} *\/ ({\n    type: eventType,\n    lengthComputable: e.lengthComputable,\n    loaded: e.loaded,\n    total: e.total,\n  });\n};\n\n\n\/**\n * Remove the listener to protect against leaks, and nullify the XMLHttpRequest\n * object.\n * @param {boolean=} opt_fromDispose If this is from the dispose (don't want to\n *     fire any events).\n * @private\n *\/\ngoog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {\n  'use strict';\n  if (this.xhr_) {\n    \/\/ Cancel any pending timeout event handler.\n    this.cleanUpTimeoutTimer_();\n\n    \/\/ Save reference so we can mark it as closed after the READY event.  The\n    \/\/ READY event may trigger another request, thus we must nullify this.xhr_\n    const xhr = this.xhr_;\n    const clearedOnReadyStateChange =\n        this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ?\n        () => {} :\n        null;\n    this.xhr_ = null;\n    this.xhrOptions_ = null;\n\n    if (!opt_fromDispose) {\n      this.dispatchEvent(goog.net.EventType.READY);\n    }\n\n    try {\n      \/\/ NOTE(user): Not nullifying in FireFox can still leak if the callbacks\n      \/\/ are defined in the same scope as the instance of XhrIo. But, IE doesn't\n      \/\/ allow you to set the onreadystatechange to NULL so nullFunction is\n      \/\/ used.\n      xhr.onreadystatechange = clearedOnReadyStateChange;\n    } catch (e) {\n      \/\/ This seems to occur with a Gears HTTP request. Delayed the setting of\n      \/\/ this onreadystatechange until after READY is sent out and catching the\n      \/\/ error to see if we can track down the problem.\n      goog.log.error(\n          this.logger_,\n          'Problem encountered resetting onreadystatechange: ' + e.message);\n    }\n  }\n};\n\n\n\/**\n * Make sure the timeout timer isn't running.\n * @private\n *\/\ngoog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {\n  'use strict';\n  if (this.xhr_ && this.useXhr2Timeout_) {\n    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;\n  }\n  if (this.timeoutId_) {\n    goog.Timer.clear(this.timeoutId_);\n    this.timeoutId_ = null;\n  }\n};\n\n\n\/**\n * @return {boolean} Whether there is an active request.\n *\/\ngoog.net.XhrIo.prototype.isActive = function() {\n  'use strict';\n  return !!this.xhr_;\n};\n\n\n\/**\n * @return {boolean} Whether the request has completed.\n *\/\ngoog.net.XhrIo.prototype.isComplete = function() {\n  'use strict';\n  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;\n};\n\n\n\/**\n * @return {boolean} Whether the request completed with a success.\n *\/\ngoog.net.XhrIo.prototype.isSuccess = function() {\n  'use strict';\n  const status = this.getStatus();\n  \/\/ A zero status code is considered successful for local files.\n  return goog.net.HttpStatus.isSuccess(status) ||\n      status === 0 && !this.isLastUriEffectiveSchemeHttp_();\n};\n\n\n\/**\n * @return {boolean} whether the effective scheme of the last URI that was\n *     fetched was 'http' or 'https'.\n * @private\n *\/\ngoog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {\n  'use strict';\n  const scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));\n  return HTTP_SCHEME_PATTERN.test(scheme);\n};\n\n\n\/**\n * Get the readystate from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {goog.net.XmlHttp.ReadyState} goog.net.XmlHttp.ReadyState.*.\n *\/\ngoog.net.XhrIo.prototype.getReadyState = function() {\n  'use strict';\n  return this.xhr_ ?\n      \/** @type {goog.net.XmlHttp.ReadyState} *\/ (this.xhr_.readyState) :\n      goog.net.XmlHttp.ReadyState.UNINITIALIZED;\n};\n\n\n\/**\n * Get the status from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {number} Http status.\n *\/\ngoog.net.XhrIo.prototype.getStatus = function() {\n  'use strict';\n  \/**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try\/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   *\/\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.status :\n        -1;\n  } catch (e) {\n    return -1;\n  }\n};\n\n\n\/**\n * Get the status text from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {string} Status text.\n *\/\ngoog.net.XhrIo.prototype.getStatusText = function() {\n  'use strict';\n  \/**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try\/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   *\/\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.statusText :\n        '';\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get status: ' + e.message);\n    return '';\n  }\n};\n\n\n\/**\n * Get the last Uri that was requested\n * @return {string} Last Uri.\n *\/\ngoog.net.XhrIo.prototype.getLastUri = function() {\n  'use strict';\n  return String(this.lastUri_);\n};\n\n\n\/**\n * Get the response text from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {string} Result from the server, or '' if no result available.\n *\/\ngoog.net.XhrIo.prototype.getResponseText = function() {\n  'use strict';\n  try {\n    return this.xhr_ ? this.xhr_.responseText : '';\n  } catch (e) {\n    \/\/ http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-responsetext-attribute\n    \/\/ states that responseText should return '' (and responseXML null)\n    \/\/ when the state is not LOADING or DONE. Instead, IE can\n    \/\/ throw unexpected exceptions, for example when a request is aborted\n    \/\/ or no data is available yet.\n    goog.log.fine(this.logger_, 'Can not get responseText: ' + e.message);\n    return '';\n  }\n};\n\n\n\/**\n * Get the response body from the Xhr object. This property is only available\n * in IE since version 7 according to MSDN:\n * http:\/\/msdn.microsoft.com\/en-us\/library\/ie\/ms534368(v=vs.85).aspx\n * Will only return correct result when called from the context of a callback.\n *\n * One option is to construct a VBArray from the returned object and convert\n * it to a JavaScript array using the toArray method:\n * `(new window['VBArray'](xhrIo.getResponseBody())).toArray()`\n * This will result in an array of numbers in the range of [0..255]\n *\n * Another option is to use the VBScript CStr method to convert it into a\n * string as outlined in http:\/\/stackoverflow.com\/questions\/1919972\n *\n * @return {Object} Binary result from the server or null if not available.\n *\/\ngoog.net.XhrIo.prototype.getResponseBody = function() {\n  'use strict';\n  try {\n    if (this.xhr_ && 'responseBody' in this.xhr_) {\n      return this.xhr_['responseBody'];\n    }\n  } catch (e) {\n    \/\/ IE can throw unexpected exceptions, for example when a request is aborted\n    \/\/ or no data is yet available.\n    goog.log.fine(this.logger_, 'Can not get responseBody: ' + e.message);\n  }\n  return null;\n};\n\n\n\/**\n * Get the response XML from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {Document} The DOM Document representing the XML file, or null\n * if no result available.\n *\/\ngoog.net.XhrIo.prototype.getResponseXml = function() {\n  'use strict';\n  try {\n    return this.xhr_ ? this.xhr_.responseXML : null;\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get responseXML: ' + e.message);\n    return null;\n  }\n};\n\n\n\/**\n * Get the response and evaluates it as JSON from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @param {string=} opt_xssiPrefix Optional XSSI prefix string to use for\n *     stripping of the response before parsing. This needs to be set only if\n *     your backend server prepends the same prefix string to the JSON response.\n * @throws Error if the response text is invalid JSON.\n * @return {Object|undefined} JavaScript object.\n *\/\ngoog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {\n  'use strict';\n  if (!this.xhr_) {\n    return undefined;\n  }\n\n  let responseText = this.xhr_.responseText;\n  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {\n    responseText = responseText.substring(opt_xssiPrefix.length);\n  }\n\n  return goog.json.hybrid.parse(responseText);\n};\n\n\n\/**\n * Get the response as the type specificed by {@link #setResponseType}. At time\n * of writing, this is only directly supported in very recent versions of WebKit\n * (10.0.612.1 dev and later). If the field is not supported directly, we will\n * try to emulate it.\n *\n * Emulating the response means following the rules laid out at\n * http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-response-attribute\n *\n * On browsers with no support for this (Chrome < 10, Firefox < 4, etc), only\n * response types of DEFAULT or TEXT may be used, and the response returned will\n * be the text response.\n *\n * On browsers with Mozilla's draft support for array buffers (Firefox 4, 5),\n * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the\n * response returned will be either the text response or the Mozilla\n * implementation of the array buffer response.\n *\n * On browsers will full support, any valid response type supported by the\n * browser may be used, and the response provided by the browser will be\n * returned.\n *\n * @return {*} The response.\n * @suppress {strictMissingProperties} Added to tighten compiler checks\n *\/\ngoog.net.XhrIo.prototype.getResponse = function() {\n  'use strict';\n  try {\n    if (!this.xhr_) {\n      return null;\n    }\n    if ('response' in this.xhr_) {\n      return this.xhr_.response;\n    }\n    switch (this.responseType_) {\n      case ResponseType.DEFAULT:\n      case ResponseType.TEXT:\n        return this.xhr_.responseText;\n      \/\/ DOCUMENT and BLOB don't need to be handled here because they are\n      \/\/ introduced in the same spec that adds the .response field, and would\n      \/\/ have been caught above.\n      \/\/ ARRAY_BUFFER needs an implementation for Firefox 4, where it was\n      \/\/ implemented using a draft spec rather than the final spec.\n      case ResponseType.ARRAY_BUFFER:\n        if ('mozResponseArrayBuffer' in this.xhr_) {\n          return this.xhr_.mozResponseArrayBuffer;\n        }\n    }\n    \/\/ Fell through to a response type that is not supported on this browser.\n    goog.log.error(\n        this.logger_,\n        'Response type ' + this.responseType_ + ' is not ' +\n            'supported on this browser');\n    return null;\n  } catch (e) {\n    goog.log.fine(this.logger_, 'Can not get response: ' + e.message);\n    return null;\n  }\n};\n\n\n\/**\n * Get the value of the response-header with the given name from the Xhr object\n * Will only return correct result when called from the context of a callback\n * and the request has completed\n * @param {string} key The name of the response-header to retrieve.\n * @return {string|undefined} The value of the response-header named key.\n *\/\ngoog.net.XhrIo.prototype.getResponseHeader = function(key) {\n  'use strict';\n  if (!this.xhr_ || !this.isComplete()) {\n    return undefined;\n  }\n\n  const value = this.xhr_.getResponseHeader(key);\n  return value === null ? undefined : value;\n};\n\n\n\/**\n * Gets the text of all the headers in the response.\n * Will only return correct result after ready state reaches `LOADED` (i.e.\n * `HEADERS_RECEIVED` as per MDN).\n * @return {string} The value of the response headers or empty string.\n *\/\ngoog.net.XhrIo.prototype.getAllResponseHeaders = function() {\n  'use strict';\n  \/\/ getAllResponseHeaders can return null if no response has been received,\n  \/\/ ensure we always return an empty string.\n  return this.xhr_ &&\n          this.getReadyState() >= goog.net.XmlHttp.ReadyState.LOADED ?\n      (this.xhr_.getAllResponseHeaders() || '') :\n      '';\n};\n\n\n\/**\n * Returns all response headers as a key-value map.\n * Multiple values for the same header key can be combined into one,\n * separated by a comma and a space.\n * Note that the native getResponseHeader method for retrieving a single header\n * does a case insensitive match on the header name. This method does not\n * include any case normalization logic, it will just return a key-value\n * representation of the headers.\n * See: http:\/\/www.w3.org\/TR\/XMLHttpRequest\/#the-getresponseheader()-method\n * @return {!Object<string, string>} An object with the header keys as keys\n *     and header values as values.\n *\/\ngoog.net.XhrIo.prototype.getResponseHeaders = function() {\n  'use strict';\n  \/\/ TODO(user): Make this function parse headers as per the spec\n  \/\/ (https:\/\/tools.ietf.org\/html\/rfc2616#section-4.2).\n\n  const headersObject = {};\n  const headersArray = this.getAllResponseHeaders().split('\\r\\n');\n  for (let i = 0; i < headersArray.length; i++) {\n    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {\n      continue;\n    }\n    const keyValue =\n        goog.string.splitLimit(headersArray[i], ':', \/* maxSplitCount= *\/ 1);\n    const key = keyValue[0];\n    let value = keyValue[1];\n\n    if (typeof value !== 'string') {\n      \/\/ There must be a value but it can be the empty string.\n      continue;\n    }\n\n    \/\/ Whitespace at the start and end of the value is meaningless.\n    value = value.trim();\n    \/\/ The key should not contain whitespace but we currently ignore that.\n\n    const values = headersObject[key] || [];\n    headersObject[key] = values;\n    values.push(value);\n  }\n\n  return goog.object.map(headersObject, function(values) {\n    'use strict';\n    return values.join(', ');\n  });\n};\n\n\n\/**\n * Get the value of the response-header with the given name from the Xhr object.\n * As opposed to {@link #getResponseHeader}, this method does not require that\n * the request has completed.\n * @param {string} key The name of the response-header to retrieve.\n * @return {?string} The value of the response-header, or null if it is\n *     unavailable.\n *\/\ngoog.net.XhrIo.prototype.getStreamingResponseHeader = function(key) {\n  'use strict';\n  return this.xhr_ ? this.xhr_.getResponseHeader(key) : null;\n};\n\n\n\/**\n * Gets the text of all the headers in the response. As opposed to\n * {@link #getAllResponseHeaders}, this method does not require that the request\n * has completed.\n * @return {string} The value of the response headers or empty string.\n *\/\ngoog.net.XhrIo.prototype.getAllStreamingResponseHeaders = function() {\n  'use strict';\n  return this.xhr_ ? this.xhr_.getAllResponseHeaders() : '';\n};\n\n\n\/**\n * Get the last error message\n * @return {!goog.net.ErrorCode} Last error code.\n *\/\ngoog.net.XhrIo.prototype.getLastErrorCode = function() {\n  'use strict';\n  return this.lastErrorCode_;\n};\n\n\n\/**\n * Get the last error message\n * @return {string} Last error message.\n *\/\ngoog.net.XhrIo.prototype.getLastError = function() {\n  'use strict';\n  return typeof this.lastError_ === 'string' ? this.lastError_ :\n                                               String(this.lastError_);\n};\n\n\n\/**\n * Adds the last method, status and URI to the message.  This is used to add\n * this information to the logging calls.\n * @param {string} msg The message text that we want to add the extra text to.\n * @return {string} The message with the extra text appended.\n * @private\n *\/\ngoog.net.XhrIo.prototype.formatMsg_ = function(msg) {\n  'use strict';\n  return msg + ' [' + this.lastMethod_ + ' ' + this.lastUri_ + ' ' +\n      this.getStatus() + ']';\n};\n\n\n\/\/ Register the xhr handler as an entry point, so that\n\/\/ it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    \/**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     *\/\n    function(transformer) {\n      'use strict';\n      goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n          transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n    });\n});  \/\/ goog.scope\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Common events for the network classes.\n *\/\n\n\ngoog.provide('goog.net.EventType');\n\n\n\/**\n * Event names for network events\n * @enum {string}\n *\/\ngoog.net.EventType = {\n  COMPLETE: 'complete',\n  SUCCESS: 'success',\n  ERROR: 'error',\n  ABORT: 'abort',\n  READY: 'ready',\n  READY_STATE_CHANGE: 'readystatechange',\n  TIMEOUT: 'timeout',\n  INCREMENTAL_DATA: 'incrementaldata',\n  PROGRESS: 'progress',\n  \/\/ DOWNLOAD_PROGRESS and UPLOAD_PROGRESS are special events dispatched by\n  \/\/ goog.net.XhrIo to allow binding listeners specific to each type of\n  \/\/ progress.\n  DOWNLOAD_PROGRESS: 'downloadprogress',\n  UPLOAD_PROGRESS: 'uploadprogress',\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Constants for HTTP status codes.\n *\/\n\ngoog.provide('goog.net.HttpStatus');\n\n\n\/**\n * HTTP Status Codes defined in RFC 2616, RFC 6585, RFC 4918 and RFC 7538.\n * @see http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec10.html\n * @see http:\/\/tools.ietf.org\/html\/rfc6585\n * @see https:\/\/tools.ietf.org\/html\/rfc4918\n * @see https:\/\/tools.ietf.org\/html\/rfc7538\n * @enum {number}\n *\/\ngoog.net.HttpStatus = {\n  \/\/ Informational 1xx\n  CONTINUE: 100,\n  SWITCHING_PROTOCOLS: 101,\n\n  \/\/ Successful 2xx\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NON_AUTHORITATIVE_INFORMATION: 203,\n  NO_CONTENT: 204,\n  RESET_CONTENT: 205,\n  PARTIAL_CONTENT: 206,\n  MULTI_STATUS: 207,\n\n  \/\/ Redirection 3xx\n  MULTIPLE_CHOICES: 300,\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  SEE_OTHER: 303,\n  NOT_MODIFIED: 304,\n  USE_PROXY: 305,\n  TEMPORARY_REDIRECT: 307,\n  PERMANENT_REDIRECT: 308,\n\n  \/\/ Client Error 4xx\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n  LENGTH_REQUIRED: 411,\n  PRECONDITION_FAILED: 412,\n  REQUEST_ENTITY_TOO_LARGE: 413,\n  REQUEST_URI_TOO_LONG: 414,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  REQUEST_RANGE_NOT_SATISFIABLE: 416,\n  EXPECTATION_FAILED: 417,\n  UNPROCESSABLE_ENTITY: 422,\n  LOCKED: 423,\n  FAILED_DEPENDENCY: 424,\n  PRECONDITION_REQUIRED: 428,\n  TOO_MANY_REQUESTS: 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n  CLIENT_CLOSED_REQUEST: 499,  \/\/ Nonstandard, used by GRPC\n\n  \/\/ Server Error 5xx\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  HTTP_VERSION_NOT_SUPPORTED: 505,\n  INSUFFICIENT_STORAGE: 507,\n  NETWORK_AUTHENTICATION_REQUIRED: 511,\n\n  \/*\n   * IE returns this code for 204 due to its use of URLMon, which returns this\n   * code for 'Operation Aborted'. The status text is 'Unknown', the response\n   * headers are ''. Known to occur on IE 6 on XP through IE9 on Win7.\n   *\/\n  QUIRK_IE_NO_CONTENT: 1223,\n};\n\n\n\/**\n * Returns whether the given status should be considered successful.\n *\n * Successful codes are OK (200), CREATED (201), ACCEPTED (202),\n * NO CONTENT (204), PARTIAL CONTENT (206), NOT MODIFIED (304),\n * and IE's no content code (1223).\n *\n * @param {number} status The status code to test.\n * @return {boolean} Whether the status code should be considered successful.\n *\/\ngoog.net.HttpStatus.isSuccess = function(status) {\n  'use strict';\n  switch (status) {\n    case goog.net.HttpStatus.OK:\n    case goog.net.HttpStatus.CREATED:\n    case goog.net.HttpStatus.ACCEPTED:\n    case goog.net.HttpStatus.NO_CONTENT:\n    case goog.net.HttpStatus.PARTIAL_CONTENT:\n    case goog.net.HttpStatus.NOT_MODIFIED:\n    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Simple utilities for dealing with URI strings.\n *\n * This package is deprecated in favour of the Closure URL package (goog.url)\n * when manipulating URIs for use by a browser. This package uses regular\n * expressions to parse a potential URI which can fall out of sync with how a\n * browser will actually interpret the URI. See\n * `goog.uri.utils.setUrlPackageSupportLoggingHandler` for one way to identify\n * URIs that should instead be parsed using the URL package.\n *\n * This is intended to be a lightweight alternative to constructing goog.Uri\n * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless\n * of how much of its functionality you use, this is designed to be a set of\n * mostly-independent utilities so that the compiler includes only what is\n * necessary for the task.  Estimated savings of porting is 5k pre-gzip and\n * 1.5k post-gzip.  To ensure the savings remain, future developers should\n * avoid adding new functionality to existing functions, but instead create\n * new ones and factor out shared code.\n *\n * Many of these utilities have limited functionality, tailored to common\n * cases.  The query parameter utilities assume that the parameter keys are\n * already encoded, since most keys are compile-time alphanumeric strings.  The\n * query parameter mutation utilities also do not tolerate fragment identifiers.\n *\n * By design, these functions can be slower than goog.Uri equivalents.\n * Repeated calls to some of functions may be quadratic in behavior for IE,\n * although the effect is somewhat limited given the 2kb limit.\n *\n * One advantage of the limited functionality here is that this approach is\n * less sensitive to differences in URI encodings than goog.Uri, since these\n * functions operate on strings directly, rather than decoding them and\n * then re-encoding.\n *\n * Uses features of RFC 3986 for parsing\/formatting URIs:\n *   http:\/\/www.ietf.org\/rfc\/rfc3986.txt\n *\/\n\ngoog.provide('goog.uri.utils');\ngoog.provide('goog.uri.utils.ComponentIndex');\ngoog.provide('goog.uri.utils.QueryArray');\ngoog.provide('goog.uri.utils.QueryValue');\ngoog.provide('goog.uri.utils.StandardQueryParam');\n\ngoog.require('goog.asserts');\ngoog.require('goog.string');\n\n\n\/**\n * Character codes inlined to avoid object allocations due to charCode.\n * @enum {number}\n * @private\n *\/\ngoog.uri.utils.CharCode_ = {\n  AMPERSAND: 38,\n  EQUAL: 61,\n  HASH: 35,\n  QUESTION: 63\n};\n\n\n\/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?string=} opt_scheme The scheme such as 'http'.\n * @param {?string=} opt_userInfo The user name before the '@'.\n * @param {?string=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {(string|number|null)=} opt_port The port number.\n * @param {?string=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?string=} opt_queryData The URI-encoded query data.\n * @param {?string=} opt_fragment The URI-encoded fragment identifier.\n * @return {string} The fully combined URI.\n *\/\ngoog.uri.utils.buildFromEncodedParts = function(\n    opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData,\n    opt_fragment) {\n  'use strict';\n  var out = '';\n\n  if (opt_scheme) {\n    out += opt_scheme + ':';\n  }\n\n  if (opt_domain) {\n    out += '\/\/';\n\n    if (opt_userInfo) {\n      out += opt_userInfo + '@';\n    }\n\n    out += opt_domain;\n\n    if (opt_port) {\n      out += ':' + opt_port;\n    }\n  }\n\n  if (opt_path) {\n    out += opt_path;\n  }\n\n  if (opt_queryData) {\n    out += '?' + opt_queryData;\n  }\n\n  if (opt_fragment) {\n    out += '#' + opt_fragment;\n  }\n\n  return out;\n};\n\n\n\/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http:\/\/www.ietf.org\/rfc\/rfc3986.txt} says in Appendix B\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * <\/pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http:\/\/www.ics.uci.edu\/pub\/ietf\/uri\/#Related\n * <\/pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = \/\/www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = \/pub\/ietf\/uri\/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * <\/pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * <\/pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -\/\n *    $5 = \/pub\/ietf\/uri\/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * <\/pre>\n *\n * TODO(user): separate out the authority terminating characters once this\n * file is moved to ES6.\n * @type {!RegExp}\n * @private\n *\/\ngoog.uri.utils.splitRe_ = new RegExp(\n    '^' +  \/\/ Anchor against the entire string.\n    '(?:' +\n    '([^:\/?#.]+)' +  \/\/ scheme - ignore special characters\n                     \/\/ used by other URL parts such as :,\n                     \/\/ ?, \/, #, and .\n    ':)?' +\n    '(?:\/\/' +\n    '(?:([^\\\\\\\\\/?#]*)@)?' +  \/\/ userInfo\n    '([^\\\\\\\\\/?#]*?)' +       \/\/ domain\n    '(?::([0-9]+))?' +       \/\/ port\n    '(?=[\\\\\\\\\/?#]|$)' +      \/\/ authority-terminating character.\n    ')?' +\n    '([^?#]+)?' +          \/\/ path\n    '(?:\\\\?([^#]*))?' +    \/\/ query\n    '(?:#([\\\\s\\\\S]*))?' +  \/\/ fragment. Can't use '.*' with 's' flag as Firefox\n                           \/\/ doesn't support the flag, and can't use an\n                           \/\/ \"everything set\" ([^]) as IE10 doesn't match any\n                           \/\/ characters with it.\n    '$');\n\n\n\/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n *\/\ngoog.uri.utils.ComponentIndex = {\n  SCHEME: 1,\n  USER_INFO: 2,\n  DOMAIN: 3,\n  PORT: 4,\n  PATH: 5,\n  QUERY_DATA: 6,\n  FRAGMENT: 7\n};\n\n\/**\n * @type {?function(string)}\n * @private\n *\/\ngoog.uri.utils.urlPackageSupportLoggingHandler_ = null;\n\n\/**\n * @param {?function(string)} handler The handler function to call when a URI\n *     with a protocol that is better supported by the Closure URL package is\n *     detected.\n *\/\ngoog.uri.utils.setUrlPackageSupportLoggingHandler = function(handler) {\n  'use strict';\n  goog.uri.utils.urlPackageSupportLoggingHandler_ = handler;\n};\n\n\/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.ComponentIndex.QUERY_DATA];\n * <\/pre>\n *\n * @param {string} uri The URI string to examine.\n * @return {!Array<string|undefined>} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n *\/\ngoog.uri.utils.split = function(uri) {\n  'use strict';\n  \/\/ See @return comment -- never null.\n  var result = \/** @type {!Array<string|undefined>} *\/ (\n      uri.match(goog.uri.utils.splitRe_));\n  if (goog.uri.utils.urlPackageSupportLoggingHandler_ &&\n      ['http', 'https', 'ws', 'wss',\n       'ftp'].indexOf(result[goog.uri.utils.ComponentIndex.SCHEME]) >= 0) {\n    goog.uri.utils.urlPackageSupportLoggingHandler_(uri);\n  }\n  return result;\n};\n\n\n\/**\n * @param {?string} uri A possibly null string.\n * @param {boolean=} opt_preserveReserved If true, percent-encoding of RFC-3986\n *     reserved characters will not be removed.\n * @return {?string} The string URI-decoded, or null if uri is null.\n * @private\n *\/\ngoog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {\n  'use strict';\n  if (!uri) {\n    return uri;\n  }\n\n  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);\n};\n\n\n\/**\n * Gets a URI component by index.\n *\n * It is preferred to use the getPathEncoded() variety of functions ahead,\n * since they are more readable.\n *\n * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.\n * @param {string} uri The URI to examine.\n * @return {?string} The still-encoded component, or null if the component\n *     is not present.\n * @private\n *\/\ngoog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {\n  'use strict';\n  \/\/ Convert undefined, null, and empty string into null.\n  return goog.uri.utils.split(uri)[componentIndex] || null;\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The protocol or scheme, or null if none.  Does not\n *     include trailing colons or slashes.\n *\/\ngoog.uri.utils.getScheme = function(uri) {\n  'use strict';\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.SCHEME, uri);\n};\n\n\n\/**\n * Gets the effective scheme for the URL.  If the URL is relative then the\n * scheme is derived from the page's location.\n * @param {string} uri The URI to examine.\n * @return {string} The protocol or scheme, always lower case.\n *\/\ngoog.uri.utils.getEffectiveScheme = function(uri) {\n  'use strict';\n  var scheme = goog.uri.utils.getScheme(uri);\n  if (!scheme && goog.global.self && goog.global.self.location) {\n    var protocol = goog.global.self.location.protocol;\n    scheme = protocol.slice(0, -1);\n  }\n  \/\/ NOTE: When called from a web worker in Firefox 3.5, location may be null.\n  \/\/ All other browsers with web workers support self.location from the worker.\n  return scheme ? scheme.toLowerCase() : '';\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The user name still encoded, or null if none.\n *\/\ngoog.uri.utils.getUserInfoEncoded = function(uri) {\n  'use strict';\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.USER_INFO, uri);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded user info, or null if none.\n *\/\ngoog.uri.utils.getUserInfo = function(uri) {\n  'use strict';\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getUserInfoEncoded(uri));\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The domain name still encoded, or null if none.\n *\/\ngoog.uri.utils.getDomainEncoded = function(uri) {\n  'use strict';\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.DOMAIN, uri);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded domain, or null if none.\n *\/\ngoog.uri.utils.getDomain = function(uri) {\n  'use strict';\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getDomainEncoded(uri), true \/* opt_preserveReserved *\/);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?number} The port number, or null if none.\n *\/\ngoog.uri.utils.getPort = function(uri) {\n  'use strict';\n  \/\/ Coerce to a number.  If the result of getComponentByIndex_ is null or\n  \/\/ non-numeric, the number coersion yields NaN.  This will then return\n  \/\/ null for all non-numeric cases (though also zero, which isn't a relevant\n  \/\/ port number).\n  return Number(\n             goog.uri.utils.getComponentByIndex_(\n                 goog.uri.utils.ComponentIndex.PORT, uri)) ||\n      null;\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The path still encoded, or null if none. Includes the\n *     leading slash, if any.\n *\/\ngoog.uri.utils.getPathEncoded = function(uri) {\n  'use strict';\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.PATH, uri);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded path, or null if none.  Includes the leading\n *     slash, if any.\n *\/\ngoog.uri.utils.getPath = function(uri) {\n  'use strict';\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getPathEncoded(uri), true \/* opt_preserveReserved *\/);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The query data still encoded, or null if none.  Does not\n *     include the question mark itself.\n *\/\ngoog.uri.utils.getQueryData = function(uri) {\n  'use strict';\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The fragment identifier, or null if none.  Does not\n *     include the hash mark itself.\n *\/\ngoog.uri.utils.getFragmentEncoded = function(uri) {\n  'use strict';\n  \/\/ The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? null : uri.slice(hashIndex + 1);\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @param {?string} fragment The encoded fragment identifier, or null if none.\n *     Does not include the hash mark itself.\n * @return {string} The URI with the fragment set.\n *\/\ngoog.uri.utils.setFragmentEncoded = function(uri, fragment) {\n  'use strict';\n  return goog.uri.utils.removeFragment(uri) + (fragment ? '#' + fragment : '');\n};\n\n\n\/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded fragment identifier, or null if none.  Does\n *     not include the hash mark.\n *\/\ngoog.uri.utils.getFragment = function(uri) {\n  'use strict';\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getFragmentEncoded(uri));\n};\n\n\n\/**\n * Extracts everything up to the port of the URI.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n *\/\ngoog.uri.utils.getHost = function(uri) {\n  'use strict';\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME],\n      pieces[goog.uri.utils.ComponentIndex.USER_INFO],\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n\/**\n * Returns the origin for a given URL.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n *\/\ngoog.uri.utils.getOrigin = function(uri) {\n  'use strict';\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME], null \/* opt_userInfo *\/,\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n\/**\n * Extracts the path of the URL and everything after.\n * @param {string} uri The URI string.\n * @return {string} The URI, starting at the path and including the query\n *     parameters and fragment identifier.\n *\/\ngoog.uri.utils.getPathAndAfter = function(uri) {\n  'use strict';\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH],\n      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n\/**\n * Gets the URI with the fragment identifier removed.\n * @param {string} uri The URI to examine.\n * @return {string} Everything preceding the hash mark.\n *\/\ngoog.uri.utils.removeFragment = function(uri) {\n  'use strict';\n  \/\/ The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? uri : uri.slice(0, hashIndex);\n};\n\n\n\/**\n * Ensures that two URI's have the exact same domain, scheme, and port.\n *\n * Unlike the version in goog.Uri, this checks protocol, and therefore is\n * suitable for checking against the browser's same-origin policy.\n *\n * @param {string} uri1 The first URI.\n * @param {string} uri2 The second URI.\n * @return {boolean} Whether they have the same scheme, domain and port.\n *\/\ngoog.uri.utils.haveSameDomain = function(uri1, uri2) {\n  'use strict';\n  var pieces1 = goog.uri.utils.split(uri1);\n  var pieces2 = goog.uri.utils.split(uri2);\n  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==\n      pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&\n      pieces1[goog.uri.utils.ComponentIndex.SCHEME] ==\n      pieces2[goog.uri.utils.ComponentIndex.SCHEME] &&\n      pieces1[goog.uri.utils.ComponentIndex.PORT] ==\n      pieces2[goog.uri.utils.ComponentIndex.PORT];\n};\n\n\n\/**\n * Asserts that there are no fragment or query identifiers, only in uncompiled\n * mode.\n * @param {string} uri The URI to examine.\n * @private\n *\/\ngoog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {\n  'use strict';\n  goog.asserts.assert(\n      uri.indexOf('#') < 0 && uri.indexOf('?') < 0,\n      'goog.uri.utils: Fragment or query identifiers are not supported: [%s]',\n      uri);\n};\n\n\n\/**\n * Supported query parameter values by the parameter serializing utilities.\n *\n * If a value is null or undefined, the key-value pair is skipped, as an easy\n * way to omit parameters conditionally.  Non-array parameters are converted\n * to a string and URI encoded.  Array values are expanded into multiple\n * &key=value pairs, with each element stringized and URI-encoded.\n *\n * @typedef {*}\n *\/\ngoog.uri.utils.QueryValue;\n\n\n\/**\n * An array representing a set of query parameters with alternating keys\n * and values.\n *\n * Keys are assumed to be URI encoded already and live at even indices.  See\n * goog.uri.utils.QueryValue for details on how parameter values are encoded.\n *\n * Example:\n * <pre>\n * var data = [\n *   \/\/ Simple param: ?name=BobBarker\n *   'name', 'BobBarker',\n *   \/\/ Conditional param -- may be omitted entirely.\n *   'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,\n *   \/\/ Multi-valued param: &house=LosAngeles&house=NewYork&house=null\n *   'house', ['LosAngeles', 'NewYork', null]\n * ];\n * <\/pre>\n *\n * @typedef {!Array<string|goog.uri.utils.QueryValue>}\n *\/\ngoog.uri.utils.QueryArray;\n\n\n\/**\n * Parses encoded query parameters and calls callback function for every\n * parameter found in the string.\n *\n * Missing value of parameter (e.g. \u201c\u2026&key&\u2026\u201d) is treated as if the value was an\n * empty string.  Keys may be empty strings (e.g. \u201c\u2026&=value&\u2026\u201d) which also means\n * that \u201c\u2026&=&\u2026\u201d and \u201c\u2026&&\u2026\u201d will result in an empty key and value.\n *\n * @param {string} encodedQuery Encoded query string excluding question mark at\n *     the beginning.\n * @param {function(string, string)} callback Function called for every\n *     parameter found in query string.  The first argument (name) will not be\n *     urldecoded (so the function is consistent with buildQueryData), but the\n *     second will.  If the parameter has no value (i.e. \u201c=\u201d was not present)\n *     the second argument (value) will be an empty string.\n *\/\ngoog.uri.utils.parseQueryData = function(encodedQuery, callback) {\n  'use strict';\n  if (!encodedQuery) {\n    return;\n  }\n  var pairs = encodedQuery.split('&');\n  for (var i = 0; i < pairs.length; i++) {\n    var indexOfEquals = pairs[i].indexOf('=');\n    var name = null;\n    var value = null;\n    if (indexOfEquals >= 0) {\n      name = pairs[i].substring(0, indexOfEquals);\n      value = pairs[i].substring(indexOfEquals + 1);\n    } else {\n      name = pairs[i];\n    }\n    callback(name, value ? goog.string.urlDecode(value) : '');\n  }\n};\n\n\n\/**\n * Split the URI into 3 parts where the [1] is the queryData without a leading\n * '?'. For example, the URI http:\/\/foo.com\/bar?a=b#abc returns\n * ['http:\/\/foo.com\/bar','a=b','#abc'].\n * @param {string} uri The URI to parse.\n * @return {!Array<string>} An array representation of uri of length 3 where the\n *     middle value is the queryData without a leading '?'.\n * @private\n *\/\ngoog.uri.utils.splitQueryData_ = function(uri) {\n  'use strict';\n  \/\/ Find the query data and hash.\n  var hashIndex = uri.indexOf('#');\n  if (hashIndex < 0) {\n    hashIndex = uri.length;\n  }\n  var questionIndex = uri.indexOf('?');\n  var queryData;\n  if (questionIndex < 0 || questionIndex > hashIndex) {\n    questionIndex = hashIndex;\n    queryData = '';\n  } else {\n    queryData = uri.substring(questionIndex + 1, hashIndex);\n  }\n  return [uri.slice(0, questionIndex), queryData, uri.slice(hashIndex)];\n};\n\n\n\/**\n * Join an array created by splitQueryData_ back into a URI.\n * @param {!Array<string>} parts A URI in the form generated by splitQueryData_.\n * @return {string} The joined URI.\n * @private\n *\/\ngoog.uri.utils.joinQueryData_ = function(parts) {\n  'use strict';\n  return parts[0] + (parts[1] ? '?' + parts[1] : '') + parts[2];\n};\n\n\n\/**\n * @param {string} queryData\n * @param {string} newData\n * @return {string}\n * @private\n *\/\ngoog.uri.utils.appendQueryData_ = function(queryData, newData) {\n  'use strict';\n  if (!newData) {\n    return queryData;\n  }\n  return queryData ? queryData + '&' + newData : newData;\n};\n\n\n\/**\n * @param {string} uri\n * @param {string} queryData\n * @return {string}\n * @private\n *\/\ngoog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {\n  'use strict';\n  if (!queryData) {\n    return uri;\n  }\n  var parts = goog.uri.utils.splitQueryData_(uri);\n  parts[1] = goog.uri.utils.appendQueryData_(parts[1], queryData);\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n\/**\n * Appends key=value pairs to an array, supporting multi-valued objects.\n * @param {*} key The key prefix.\n * @param {goog.uri.utils.QueryValue} value The value to serialize.\n * @param {!Array<string>} pairs The array to which the 'key=value' strings\n *     should be appended.\n * @private\n *\/\ngoog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {\n  'use strict';\n  goog.asserts.assertString(key);\n  if (Array.isArray(value)) {\n    \/\/ Convince the compiler it's an array.\n    goog.asserts.assertArray(value);\n    for (var j = 0; j < value.length; j++) {\n      \/\/ Convert to string explicitly, to short circuit the null and array\n      \/\/ logic in this function -- this ensures that null and undefined get\n      \/\/ written as literal 'null' and 'undefined', and arrays don't get\n      \/\/ expanded out but instead encoded in the default way.\n      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);\n    }\n  } else if (value != null) {\n    \/\/ Skip a top-level null or undefined entirely.\n    pairs.push(\n        key +\n        \/\/ Check for empty string. Zero gets encoded into the url as literal\n        \/\/ strings.  For empty string, skip the equal sign, to be consistent\n        \/\/ with UriBuilder.java.\n        (value === '' ? '' : '=' + goog.string.urlEncode(value)));\n  }\n};\n\n\n\/**\n * Builds a query data string from a sequence of alternating keys and values.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {!IArrayLike<string|goog.uri.utils.QueryValue>} keysAndValues\n *     Alternating keys and values. See the QueryArray typedef.\n * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.\n * @return {string} The encoded query string, in the form 'a=1&b=2'.\n *\/\ngoog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {\n  'use strict';\n  goog.asserts.assert(\n      Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0,\n      'goog.uri.utils: Key\/value lists must be even in length.');\n\n  var params = [];\n  for (var i = opt_startIndex || 0; i < keysAndValues.length; i += 2) {\n    var key = \/** @type {string} *\/ (keysAndValues[i]);\n    goog.uri.utils.appendKeyValuePairs_(key, keysAndValues[i + 1], params);\n  }\n  return params.join('&');\n};\n\n\n\/**\n * Builds a query data string from a map.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {!Object<string, goog.uri.utils.QueryValue>} map An object where keys\n *     are URI-encoded parameter keys, and the values are arbitrary types\n *     or arrays. Keys with a null value are dropped.\n * @return {string} The encoded query string, in the form 'a=1&b=2'.\n *\/\ngoog.uri.utils.buildQueryDataFromMap = function(map) {\n  'use strict';\n  var params = [];\n  for (var key in map) {\n    goog.uri.utils.appendKeyValuePairs_(key, map[key], params);\n  }\n  return params.join('&');\n};\n\n\n\/**\n * Appends URI parameters to an existing URI.\n *\n * The variable arguments may contain alternating keys and values.  Keys are\n * assumed to be already URI encoded.  The values should not be URI-encoded,\n * and will instead be encoded by this function.\n * <pre>\n * appendParams('http:\/\/www.foo.com?existing=true',\n *     'key1', 'value1',\n *     'key2', 'value?willBeEncoded',\n *     'key3', ['valueA', 'valueB', 'valueC'],\n *     'key4', null);\n * result: 'http:\/\/www.foo.com?existing=true&' +\n *     'key1=value1&' +\n *     'key2=value%3FwillBeEncoded&' +\n *     'key3=valueA&key3=valueB&key3=valueC'\n * <\/pre>\n *\n * A single call to this function will not exhibit quadratic behavior in IE,\n * whereas multiple repeated calls may, although the effect is limited by\n * fact that URL's generally can't exceed 2kb.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {...(goog.uri.utils.QueryArray|goog.uri.utils.QueryValue)}\n * var_args\n *     An array or argument list conforming to goog.uri.utils.QueryArray.\n * @return {string} The URI with all query parameters added.\n *\/\ngoog.uri.utils.appendParams = function(uri, var_args) {\n  'use strict';\n  var queryData = arguments.length == 2 ?\n      goog.uri.utils.buildQueryData(arguments[1], 0) :\n      goog.uri.utils.buildQueryData(arguments, 1);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n\/**\n * Appends query parameters from a map.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object<goog.uri.utils.QueryValue>} map An object where keys are\n *     URI-encoded parameter keys, and the values are arbitrary types or arrays.\n *     Keys with a null value are dropped.\n * @return {string} The new parameters.\n *\/\ngoog.uri.utils.appendParamsFromMap = function(uri, map) {\n  'use strict';\n  var queryData = goog.uri.utils.buildQueryDataFromMap(map);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n\/**\n * Appends a single URI parameter.\n *\n * Repeated calls to this can exhibit quadratic behavior in IE6 due to the\n * way string append works, though it should be limited given the 2kb limit.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} key The key, which must already be URI encoded.\n * @param {*=} opt_value The value, which will be stringized and encoded\n *     (assumed not already to be encoded).  If omitted, undefined, or null, the\n *     key will be added as a valueless parameter.\n * @return {string} The URI with the query parameter added.\n *\/\ngoog.uri.utils.appendParam = function(uri, key, opt_value) {\n  'use strict';\n  var value = (opt_value != null) ? '=' + goog.string.urlEncode(opt_value) : '';\n  return goog.uri.utils.appendQueryDataToUri_(uri, key + value);\n};\n\n\n\/**\n * Finds the next instance of a query parameter with the specified name.\n *\n * Does not instantiate any objects.\n *\n * @param {string} uri The URI to search.  May contain a fragment identifier\n *     if opt_hashIndex is specified.\n * @param {number} startIndex The index to begin searching for the key at.  A\n *     match may be found even if this is one character after the ampersand.\n * @param {string} keyEncoded The URI-encoded key.\n * @param {number} hashOrEndIndex Index to stop looking at.  If a hash\n *     mark is present, it should be its index, otherwise it should be the\n *     length of the string.\n * @return {number} The position of the first character in the key's name,\n *     immediately after either a question mark or a dot.\n * @private\n *\/\ngoog.uri.utils.findParam_ = function(\n    uri, startIndex, keyEncoded, hashOrEndIndex) {\n  'use strict';\n  var index = startIndex;\n  var keyLength = keyEncoded.length;\n\n  \/\/ Search for the key itself and post-filter for surronuding punctuation,\n  \/\/ rather than expensively building a regexp.\n  while ((index = uri.indexOf(keyEncoded, index)) >= 0 &&\n         index < hashOrEndIndex) {\n    var precedingChar = uri.charCodeAt(index - 1);\n    \/\/ Ensure that the preceding character is '&' or '?'.\n    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n        precedingChar == goog.uri.utils.CharCode_.QUESTION) {\n      \/\/ Ensure the following character is '&', '=', '#', or NaN\n      \/\/ (end of string).\n      var followingChar = uri.charCodeAt(index + keyLength);\n      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL ||\n          followingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n          followingChar == goog.uri.utils.CharCode_.HASH) {\n        return index;\n      }\n    }\n    index += keyLength + 1;\n  }\n\n  return -1;\n};\n\n\n\/**\n * Regular expression for finding a hash mark or end of string.\n * @type {RegExp}\n * @private\n *\/\ngoog.uri.utils.hashOrEndRe_ = \/#|$\/;\n\n\n\/**\n * Determines if the URI contains a specific key.\n *\n * Performs no object instantiations.\n *\n * @param {string} uri The URI to process.  May contain a fragment\n *     identifier.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {boolean} Whether the key is present.\n *\/\ngoog.uri.utils.hasParam = function(uri, keyEncoded) {\n  'use strict';\n  return goog.uri.utils.findParam_(\n             uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;\n};\n\n\n\/**\n * Gets the first value of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {?string} The first value of the parameter (URI-decoded), or null\n *     if the parameter is not found.\n *\/\ngoog.uri.utils.getParamValue = function(uri, keyEncoded) {\n  'use strict';\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var foundIndex =\n      goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);\n\n  if (foundIndex < 0) {\n    return null;\n  } else {\n    var endPosition = uri.indexOf('&', foundIndex);\n    if (endPosition < 0 || endPosition > hashOrEndIndex) {\n      endPosition = hashOrEndIndex;\n    }\n    \/\/ Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    return goog.string.urlDecode(\n        uri.slice(foundIndex, endPosition !== -1 ? endPosition : 0));\n  }\n};\n\n\n\/**\n * Gets all values of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {!Array<string>} All URI-decoded values with the given key.\n *     If the key is not found, this will have length 0, but never be null.\n *\/\ngoog.uri.utils.getParamValues = function(uri, keyEncoded) {\n  'use strict';\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var result = [];\n\n  while ((foundIndex = goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    \/\/ Find where this parameter ends, either the '&' or the end of the\n    \/\/ query parameters.\n    position = uri.indexOf('&', foundIndex);\n    if (position < 0 || position > hashOrEndIndex) {\n      position = hashOrEndIndex;\n    }\n\n    \/\/ Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    result.push(\n        goog.string.urlDecode(uri.slice(foundIndex, Math.max(position, 0))));\n  }\n\n  return result;\n};\n\n\n\/**\n * Regexp to find trailing question marks and ampersands.\n * @type {RegExp}\n * @private\n *\/\ngoog.uri.utils.trailingQueryPunctuationRe_ = \/[?&]($|#)\/;\n\n\n\/**\n * Removes all instances of a query parameter.\n * @param {string} uri The URI to process.  Must not contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.\n * @return {string} The URI with all instances of the parameter removed.\n *\/\ngoog.uri.utils.removeParam = function(uri, keyEncoded) {\n  'use strict';\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var buffer = [];\n\n  \/\/ Look for a query parameter.\n  while ((foundIndex = goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    \/\/ Get the portion of the query string up to, but not including, the ?\n    \/\/ or & starting the parameter.\n    buffer.push(uri.substring(position, foundIndex));\n    \/\/ Progress to immediately after the '&'.  If not found, go to the end.\n    \/\/ Avoid including the hash mark.\n    position = Math.min(\n        (uri.indexOf('&', foundIndex) + 1) || hashOrEndIndex, hashOrEndIndex);\n  }\n\n  \/\/ Append everything that is remaining.\n  buffer.push(uri.slice(position));\n\n  \/\/ Join the buffer, and remove trailing punctuation that remains.\n  return buffer.join('').replace(\n      goog.uri.utils.trailingQueryPunctuationRe_, '$1');\n};\n\n\n\/**\n * Replaces all existing definitions of a parameter with a single definition.\n *\n * Repeated calls to this can exhibit quadratic behavior due to the need to\n * find existing instances and reconstruct the string, though it should be\n * limited given the 2kb limit.  Consider using appendParams or setParamsFromMap\n * to update multiple parameters in bulk.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} keyEncoded The key, which must already be URI encoded.\n * @param {*} value The value, which will be stringized and encoded (assumed\n *     not already to be encoded).\n * @return {string} The URI with the query parameter added.\n *\/\ngoog.uri.utils.setParam = function(uri, keyEncoded, value) {\n  'use strict';\n  return goog.uri.utils.appendParam(\n      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);\n};\n\n\n\/**\n * Effeciently set or remove multiple query parameters in a URI. Order of\n * unchanged parameters will not be modified, all updated parameters will be\n * appended to the end of the query. Params with values of null or undefined are\n * removed.\n *\n * @param {string} uri The URI to process.\n * @param {!Object<string, goog.uri.utils.QueryValue>} params A list of\n *     parameters to update. If null or undefined, the param will be removed.\n * @return {string} An updated URI where the query data has been updated with\n *     the params.\n *\/\ngoog.uri.utils.setParamsFromMap = function(uri, params) {\n  'use strict';\n  var parts = goog.uri.utils.splitQueryData_(uri);\n  var queryData = parts[1];\n  var buffer = [];\n  if (queryData) {\n    queryData.split('&').forEach(function(pair) {\n      'use strict';\n      var indexOfEquals = pair.indexOf('=');\n      var name = indexOfEquals >= 0 ? pair.slice(0, indexOfEquals) : pair;\n      if (!params.hasOwnProperty(name)) {\n        buffer.push(pair);\n      }\n    });\n  }\n  parts[1] = goog.uri.utils.appendQueryData_(\n      buffer.join('&'), goog.uri.utils.buildQueryDataFromMap(params));\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n\/**\n * Generates a URI path using a given URI and a path with checks to\n * prevent consecutive \"\/\/\". The baseUri passed in must not contain\n * query or fragment identifiers. The path to append may not contain query or\n * fragment identifiers.\n *\n * @param {string} baseUri URI to use as the base.\n * @param {string} path Path to append.\n * @return {string} Updated URI.\n *\/\ngoog.uri.utils.appendPath = function(baseUri, path) {\n  'use strict';\n  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);\n\n  \/\/ Remove any trailing '\/'\n  if (goog.string.endsWith(baseUri, '\/')) {\n    baseUri = baseUri.slice(0, -1);\n  }\n  \/\/ Remove any leading '\/'\n  if (goog.string.startsWith(path, '\/')) {\n    path = path.slice(1);\n  }\n  return '' + baseUri + '\/' + path;\n};\n\n\n\/**\n * Replaces the path.\n * @param {string} uri URI to use as the base.\n * @param {string} path New path.\n * @return {string} Updated URI.\n *\/\ngoog.uri.utils.setPath = function(uri, path) {\n  'use strict';\n  \/\/ Add any missing '\/'.\n  if (!goog.string.startsWith(path, '\/')) {\n    path = '\/' + path;\n  }\n  var parts = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      parts[goog.uri.utils.ComponentIndex.SCHEME],\n      parts[goog.uri.utils.ComponentIndex.USER_INFO],\n      parts[goog.uri.utils.ComponentIndex.DOMAIN],\n      parts[goog.uri.utils.ComponentIndex.PORT], path,\n      parts[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      parts[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n\/**\n * Standard supported query parameters.\n * @enum {string}\n *\/\ngoog.uri.utils.StandardQueryParam = {\n\n  \/** Unused parameter for unique-ifying. *\/\n  RANDOM: 'zx'\n};\n\n\n\/**\n * Sets the zx parameter of a URI to a random value.\n * @param {string} uri Any URI.\n * @return {string} That URI with the \"zx\" parameter added or replaced to\n *     contain a random string.\n *\/\ngoog.uri.utils.makeUnique = function(uri) {\n  'use strict';\n  return goog.uri.utils.setParam(\n      uri, goog.uri.utils.StandardQueryParam.RANDOM,\n      goog.string.getRandomString());\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Error codes shared between goog.net.IframeIo and\n * goog.net.XhrIo.\n *\/\n\ngoog.provide('goog.net.ErrorCode');\n\n\n\/**\n * Error codes\n * @enum {number}\n *\/\ngoog.net.ErrorCode = {\n\n  \/**\n   * There is no error condition.\n   *\/\n  NO_ERROR: 0,\n\n  \/**\n   * The most common error from iframeio, unfortunately, is that the browser\n   * responded with an error page that is classed as a different domain. The\n   * situations, are when a browser error page  is shown -- 404, access denied,\n   * DNS failure, connection reset etc.)\n   *\n   *\/\n  ACCESS_DENIED: 1,\n\n  \/**\n   * Currently the only case where file not found will be caused is when the\n   * code is running on the local file system and a non-IE browser makes a\n   * request to a file that doesn't exist.\n   *\/\n  FILE_NOT_FOUND: 2,\n\n  \/**\n   * If Firefox shows a browser error page, such as a connection reset by\n   * server or access denied, then it will fail silently without the error or\n   * load handlers firing.\n   *\/\n  FF_SILENT_ERROR: 3,\n\n  \/**\n   * Custom error provided by the client through the error check hook.\n   *\/\n  CUSTOM_ERROR: 4,\n\n  \/**\n   * Exception was thrown while processing the request.\n   *\/\n  EXCEPTION: 5,\n\n  \/**\n   * The Http response returned a non-successful http status code.\n   *\/\n  HTTP_ERROR: 6,\n\n  \/**\n   * The request was aborted.\n   *\/\n  ABORT: 7,\n\n  \/**\n   * The request timed out.\n   *\/\n  TIMEOUT: 8,\n\n  \/**\n   * The resource is not available offline.\n   *\/\n  OFFLINE: 9,\n};\n\n\n\/**\n * Returns a friendly error message for an error code. These messages are for\n * debugging and are not localized.\n * @param {goog.net.ErrorCode} errorCode An error code.\n * @return {string} A message for debugging.\n *\/\ngoog.net.ErrorCode.getDebugMessage = function(errorCode) {\n  'use strict';\n  switch (errorCode) {\n    case goog.net.ErrorCode.NO_ERROR:\n      return 'No Error';\n\n    case goog.net.ErrorCode.ACCESS_DENIED:\n      return 'Access denied to content document';\n\n    case goog.net.ErrorCode.FILE_NOT_FOUND:\n      return 'File not found';\n\n    case goog.net.ErrorCode.FF_SILENT_ERROR:\n      return 'Firefox silently errored';\n\n    case goog.net.ErrorCode.CUSTOM_ERROR:\n      return 'Application custom error';\n\n    case goog.net.ErrorCode.EXCEPTION:\n      return 'An exception occurred';\n\n    case goog.net.ErrorCode.HTTP_ERROR:\n      return 'Http response at 400 or 500 level';\n\n    case goog.net.ErrorCode.ABORT:\n      return 'Request was aborted';\n\n    case goog.net.ErrorCode.TIMEOUT:\n      return 'Request timed out';\n\n    case goog.net.ErrorCode.OFFLINE:\n      return 'The resource is not available offline';\n\n    default:\n      return 'Unrecognized error code';\n  }\n};\n","(ns ajax.protocols)\n\n(defprotocol AjaxImpl\n  \"An abstraction for a javascript class that implements\n   Ajax calls.\"\n  (-js-ajax-request [this request handler]\n    \"Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.\"))\n\n(defprotocol AjaxRequest\n  \"An abstraction for a running ajax request.\"\n  (-abort [this]\n    \"Aborts a running ajax request, if possible.\"))\n\n(defprotocol AjaxResponse\n  \"An abstraction for an ajax response.\"\n  (-status [this]\n    \"Returns the HTTP Status of the response as an integer.\")\n  (-status-text [this]\n    \"Returns the HTTP Status Text of the response as a string.\")\n  (-get-all-headers [this]\n    \"Returns all headers as a map.\")\n  (-body [this]\n    \"Returns the response body as a string or as type specified in response-format such as a blob or arraybuffer.\")\n  (-get-response-header [this header]\n    \"Gets the specified response header (specified by a string) as a string.\")\n  (-was-aborted [this]\n    \"Was the response aborted.\"))\n\n(defprotocol Interceptor\n  \"An abstraction for something that processes requests and responses.\"\n  (-process-request [this request]\n    \"Transforms the opts\")\n  (-process-response [this response]\n    \"Transforms the raw response (an implementation of AjaxResponse)\"))\n\n(defrecord Response [status body status-text headers was-aborted]\n  AjaxResponse\n  (-body [this] (:body this))\n  (-status [this] (:status this))\n  (-status-text [this] (:status-text this))\n  (-get-all-headers [this] (:headers this))\n  (-get-response-header [this header] (get (:headers this) header))\n  (-was-aborted [this] (:was-aborted this)))\n","(ns ajax.util\n  \"Short utility functions. A lot of these only exist because the \n   cross platform implementation is annoying.\"\n   (:require [ajax.protocols :as pr])\n   #? (:clj\n       (:import [java.io OutputStreamWriter]\n                [java.lang String])))\n\n(defn throw-error \n  \"Throws an error.\"\n  [args]\n  (throw (#?(:clj Exception. :cljs js\/Error.)\n           (str args))))\n\n(defn get-content-type ^String [response]\n  (or (pr\/-get-response-header response \"Content-Type\") \"\"))\n\n(defn to-utf8-writer \n  \"Takes a function that converts to a string and transforms it\n   into a function that converts to an object that will write\n   UTF-8 to the wire. Note that this is the identity function\n   for JavaScript because the underlying implementations take\n   a string.\"\n  [to-str]\n  #? (:cljs to-str\n      :clj (fn write-utf8 [stream params]\n             (doto (OutputStreamWriter. stream)\n               (.write ^String (to-str params))\n               (.flush)))))\n\n(def successful-response-codes-set\n  \"A set of successful response types derived from `goog.net.HttpStatus.isSuccess`.\"\n  ;; Factoid: Closure considers some 2XX status codes to *not* be successful, namely\n  ;; 205 Reset Content, 207 Multi Status & the unspecified 208+ range\n  #{200    ;; Ok\n    201    ;; Created\n    202    ;; Accepted\n    204    ;; No Content\n    206    ;; Partial Content\n    304    ;; Not Modified\n    ;; See https:\/\/github.com\/google\/closure-library\/blob\/f999480c4005641d284b86d82d0d5d0f05f3ffc8\/closure\/goog\/net\/httpstatus.js#L89-L94\n    1223}) ;; QUIRK_IE_NO_CONTENT\n\n(defn success? \n  \"Indicates whether an HTTP status code is considered successful.\"\n  [status]\n  (contains? successful-response-codes-set\n             status))\n","(ns ajax.url\n\n\"At first blush, it's pretty bizarre that an entire file is devoted to one  \n function, namely params-to-str, which just takes a map and converts it to\n a querystring. However, it turns out that people sometimes want to encode\n fairly complex maps and the behaviour in the presence of vectors\/arrays\n is controversial.\n\n The basic question is: what {:a [1 2]} be encoded as? The correct answer\n as far as ring is concerned is a=1&a=2. This is also true of most Java\n implementations, ASP.NET, Angular, Haskell and even old-school ASP. This \n is called vec-strategy :java in the code. Rails and PHP, however, \n prefer a[]=1&a[]=2, which has an obvious implementation in a dynamic \n language. This is called vec-strategy :rails. Finally, there's what \n cljs-ajax (mistakenly) did between versions 0.4.0 and 0.6.x: \n a[0]=1&a[2]=1, which is called vec-strategy :indexed. This is retained \n mostly for people who need to keep compatibility with the previous behaviour.\n\n None of these are the \\\"correct answer\\\": the HTTP standards are\n silent on the subject, so you're left with what your server accepts, and\n different servers have different conventions. Worse, if you send the\n wrong convention it gets misinterpreted. Send strategy :rails to a :java\n server and you get { \\\"a[]\\\" [1 2]}. Worse, send strategy :java to a :rails\n server and you get { \\\"a\\\" 2 }. So it's important to know what your server's\n convention is.\n\n The situation for maps is simpler, pretty much everyone encodes\n {:a {:b 1}} as \\\"a[b]=1\\\". That is, assuming they process it at all.\n The HTTP spec is similarly silent on this and your server may get your\n language's equivalent of { \\\"a[b]\\\" 1 }. In cases like this, you have two\n choices 1) write your own server-side decoder or 2) don't ever send\n nested maps.\n\n If you ever wanted to consider exactly how bad the effect of supporting\n a wide range of use cases, consider that this was the original code:\n\n (defn params-to-str [params]\n    (if params\n        (-> params      \n            clj->js\n            structs\/Map.\n            query-data\/createFromMap\n            .toString)))\n\n This code remains completely correct for at least 90% of actual users\n of cljs-ajax. Now we have ~50 SLOCs achieving much the same result.\n\"\n\n#? (:clj  (:require\n            [ajax.util :as u]\n            [clojure.string :as str])\n    :cljs (:require\n            [clojure.string :as str]\n            [ajax.util :as u])))\n\n\n(defn- key-encode [key]\n  (cond\n    (qualified-keyword? key) (str\/join \"\/\" ((juxt namespace name) key))\n    (keyword? key)           (name key)\n    :else                    key))\n\n(def ^:private value-encode ; why doesn't def- exist?\n    #? (:clj (fn value-encode [u] (java.net.URLEncoder\/encode (str u) \"UTF-8\"))\n        :cljs js\/encodeURIComponent))\n\n(defn- key-value-pair-to-str [[k v]] \n       (str (key-encode k) \"=\" (value-encode v)))\n\n(defn- vec-key-transform-fn [vec-key-encode k v]\n    [(vec-key-encode k) v])\n\n(defn- to-vec-key-transform [vec-strategy]\n    (let [vec-key-encode (case (or vec-strategy :java)\n                               :java (fn [k] nil) ; no subscript\n                               :rails (fn [k] \"\") ; [] subscript\n                               :indexed identity)] ; [1] subscript\n        (partial vec-key-transform-fn vec-key-encode)))\n\n\n(defn- param-to-key-value-pairs \n  \"Takes a parameter and turns it into a sequence of key-value pairs suitable\n     for passing to `key-value-pair-to-str`. Since we can have nested maps and\n     vectors, we need a vec-key-transform function and the current query key\n     prefix as well as the key and value to be analysed. Ultimately, this \n     function walks the structure and flattens it.\"\n  [vec-key-transform prefix [key value]]\n    (let [k1 (key-encode key)\n          new-key (if prefix \n                      (if key \n                          (str prefix \"[\" k1 \"]\")\n                          prefix)\n                      k1)\n          recurse (partial param-to-key-value-pairs vec-key-transform new-key)]\n        (cond \n            (string? value) ; string is sequential so we have to handle it separately\n            [[new-key value]]  ; (\"a\" 1) should be [\"a\" 1]\n\n            (qualified-keyword? value)\n            [[new-key (str\/join \"\/\" ((juxt namespace name) value))]] ; (:a\/b 1) should be [\"a\/b\" 1]\n\n            (keyword? value)\n            [[new-key (name value)]] ; (:a 1) should be [\"a\" 1]\n\n            (map? value)\n            (mapcat recurse (seq value)) ; {:b {:a 1}} should be [\"b[a]\" 1]\n\n            (or (sequential? value) (set? value)) ; behaviour depends on vec-key-transform\n            (->> (seq value)\n                 (map-indexed vec-key-transform)\n                 (mapcat recurse))\n\n            :else [[new-key value]])))\n\n(defn params-to-str \n   \"vec-strategy is one of :rails (a[]=3&a[]=4)\n                           :java (a=3&a=4) (this is the correct behaviour and the default)\n                           :indexed (a[3]=1&a[4]=1)\n     params is an arbitrary clojure map\"\n  [vec-strategy params]\n    (->> [nil params]\n         (param-to-key-value-pairs (to-vec-key-transform vec-strategy) nil)\n         (map key-value-pair-to-str)\n         (str\/join \"&\")))\n\n(defn url-request-format\n  \"The request format for simple POST and GET.\"\n  ([] (url-request-format {})) \n  ([{:keys [vec-strategy]}]\n   {:write (u\/to-utf8-writer (partial params-to-str vec-strategy))\n    :content-type \"application\/x-www-form-urlencoded; charset=utf-8\"}))\n","(ns ajax.interceptors\n  \"This file contains the standard interceptors used by cljs-ajax to implement\n   most of the 'magic'. There are four of them: \n     \n     * ProcessGet, which handles the fact that GETs do not have bodies and so need treating separately.\n     * ApplyRequestFormat, which takes the request format key and applies it to the params key.\n     * ResponseFormat, which is a parameterised interceptor dynamically added to the interceptor list. Note that the response format routines return one of these.\n     * DirectSubmission, which spots that you're using a type that doesn't need format processing and sends it immediately.\n   \n   There are no functions forming part of the public API in this file, so\n   unless you're working on, studying or debugging cljs-ajax, you're \n   probably in the wrong place.\"\n    (:require [clojure.string :as str]\n              [ajax.util :as u]\n              [ajax.url :as url]\n              [ajax.protocols :refer\n                  [-body -process-request -process-response -abort -status\n                   -get-response-header -status-text -js-ajax-request\n                   -was-aborted\n                   #?@ (:cljs [AjaxImpl AjaxRequest AjaxResponse\n                               Interceptor Response])]]\n              #? (:clj [ajax.macros :as m]))\n    #? (:clj\n        (:import [ajax.protocols AjaxImpl AjaxRequest\n                  AjaxResponse Interceptor Response]\n                 [java.io OutputStreamWriter ByteArrayOutputStream\n                  InputStreamReader Closeable OutputStream\n                  InputStream])\n        :cljs\n        (:require-macros [ajax.macros :as m])))\n\n;;; Utility\n\n(defrecord StandardInterceptor [name request response]\n  Interceptor\n  (-process-request [{:keys [request]} opts]\n    (request opts))\n  (-process-response [{:keys [response]} xhrio]\n    (response xhrio)))\n\n(defn to-interceptor \n   \"Utility function. If you want to create your own interceptor\n   quickly, this will do the job. Note you don't need to specify\n   both methods. (Or indeed either, but it won't do much under\n   those circumstances.)\"\n  [m]\n  (map->StandardInterceptor (merge\n                             {:request identity :response identity}\n                             m)))\n\n\n;;; Response Format record\n\n#? (:clj (defn exception-message [^Exception e] (.getMessage e))\n    :cljs (defn exception-message [e] (.-message e)))\n\n(defn- exception-response [e status {:keys [description]} xhrio]\n  (let [response {:status status\n                  :failure :error\n                  :response nil}\n        status-text (str (exception-message e)\n                         \"  Format should have been \"\n                         description)\n        parse-error (assoc response\n                      :status-text status-text\n                      :failure :parse\n                      :original-text (-body xhrio))]\n    (if (u\/success? status)\n      parse-error\n      (assoc response\n        :status-text (-status-text xhrio)\n        :parse-error parse-error))))\n\n(defn fail [status status-text failure & params]\n  (let [response {:status status\n                  :status-text status-text\n                  :failure failure}]\n    [false (reduce conj\n                   response\n                   (map vec (partition 2 params)))]))\n\n(defn content-type-to-request-header [content-type]\n  (->> (if (string? content-type)\n         [content-type]\n         content-type)\n       (str\/join \", \")))\n\n;;; The ResponseFormat interceptor is one of the core pieces of functionality in\n;;; cljs-ajax. It is an interceptor that applies the response format first\n;;; to the Accept part of the request, and later to the response to interpret \n;;; the result.\n;;; \n;;; Note that the \"response format\" functions all return ResponseFormat returns.\n(defrecord ResponseFormat [read description content-type]\n  Interceptor\n  (-process-request\n    #_\"Sets the headers on the request\" \n   [{:keys [content-type]} request]\n    (update request\n            :headers\n            #(merge {\"Accept\" (content-type-to-request-header content-type)}\n                    (or % {}))))\n  (-process-response\n    #_\"Transforms the raw response (an implementation of AjaxResponse)\"\n   [{:keys [read] :as format} xhrio]\n    (try\n      (let [status #? (:clj (long (-status xhrio))\n                       :cljs (-status xhrio))\n            fail (partial fail status)]\n        (case status\n          0 (if (instance? Response xhrio)\n              [false xhrio]\n              (fail \"Request failed.\" :failed))\n          -1 (if (-was-aborted xhrio)\n               (fail \"Request aborted by client.\" :aborted)\n               (fail \"Request timed out.\" :timeout))\n          204 [true nil]       ; 204 and 205 should have empty responses\n          205 [true nil]\n          (try\n            (let [response (read xhrio)]\n              (if (u\/success? status)\n                [true response]\n                (fail (-status-text xhrio) :error :response response)))\n            (catch #? (:clj Exception :cljs js\/Object) e\n                   [false (exception-response e status format xhrio)]))))\n      (catch #? (:clj Exception :cljs js\/Object) e\n                                        ; These errors should never happen\n             (let [message #? (:clj (.getMessage e)\n                               :cljs (.-message e))]\n               (fail 0 message :exception :exception e))))))\n\n\n;;; ApplyRequestFormat is a stateless interceptor that applies the rules\n;;; for the request formats, reading from the request and transforming it\n;;; as appropriate. It does not affect the result in any way\n;;;\n;;; Contrast with ResponseFormat, that has to change the request to add\n;;; the Accept header, and then transforms the response to interpret the result.\n(defn ^:internal get-request-format \n  \"Internal function. Takes whatever was provided as :request-format and \n   converts it to a true request format. In practice, this just means it will \n   interpret functions as formats and not change maps. Note that it throws an\n   exception when passed a keyword, because they should already have been \n   transformed to maps.\"\n  [format]\n  (cond\n   (map? format) format\n   (keyword? format) (u\/throw-error [\"keywords are not allowed as request formats in ajax calls: \" format])\n   (ifn? format) {:write format :content-type \"text\/plain\"}\n   :else {}))\n\n(defn apply-request-format [write params]\n  #? (:cljs (write params)\n      :clj (let [stream (ByteArrayOutputStream.)]\n             (write stream params)\n             (.toByteArray stream))))\n\n(defrecord ApplyRequestFormat []\n  Interceptor\n  (-process-request\n    [_ {:keys [uri method format params headers] :as request}]\n    (let [{:keys [write content-type]} (get-request-format format)\n          body (if-not (nil? write)\n                 (apply-request-format write params)\n                 (u\/throw-error [\"unrecognized request format: \"\n                                 format]))\n          headers (or headers {})]\n      (assoc request\n        :body body\n        :headers (if content-type\n                   (assoc headers \"Content-Type\"\n                          (content-type-to-request-header\n                           content-type))\n                   headers))))\n  (-process-response [_ xhrio] xhrio))\n\n(defn ^:internal uri-with-params \n  \"Internal function. Takes a uri and appends the interpretation of the query string to it\n   matching the behaviour of `url-request-format`.\"\n  [{:keys [vec-strategy params method url-params]} uri]\n  (if-let [final-url-params (if (and (= method \"GET\") (nil? url-params))\n                              params\n                              url-params)]\n    (str uri\n         (if (re-find #\"\\?\" uri) \"&\" \"?\")                   ; add & if uri contains ?\n         (url\/params-to-str vec-strategy final-url-params))\n    uri)\n  )\n\n;;; ProcessGet is one of the standard interceptors\n;;; Its function is to rewrite the uri of GET requests,\n;;; since there's no other way to transmit params data\n;;; in a GET.\n(defrecord ProcessUrlParameters []\n  Interceptor\n  (-process-request [_ {:keys [method] :as request}]\n    (cond->\n      (update request :uri\n              (partial uri-with-params request))\n      (= method \"GET\")\n      reduced))\n  (-process-response [_ response] response))\n\n;;; DirectSubmission is one of the default interceptors.\n;;; Its function is to spot when :body key is present\n;;; When it is present, it prevents all other processing\n;;; of the request, which stops you doing stupid things\n;;; like applying a transit format to a FormData.\n(defrecord DirectSubmission []\n  Interceptor\n  (-process-request [_ {:keys [body] :as request}]\n    (if (nil? body) request (reduced request)))\n  (-process-response [_ response] response))\n\n;;; The standard interceptors for processing a request.\n(def request-interceptors \n  [(ProcessUrlParameters.) (DirectSubmission.) (ApplyRequestFormat.)])\n\n;;; It seems rubbish making a function of this, but the namespace noise\n;;; caused by importing the actual type across boundaries is significant\n;;; in a cljc environment\n(defn is-response-format? [response-format]\n  (instance? ResponseFormat response-format))\n\n;;; interpret-vector should be the implementation of detect-response-format\n(defn get-response-format [interpret-vector {:keys [response-format] :as opts}]\n  (cond\n   (is-response-format? response-format) response-format\n   (vector? response-format) (interpret-vector opts)\n   (map? response-format) (map->ResponseFormat response-format)\n   (keyword? response-format) (u\/throw-error [\"keywords are not allowed as response formats in ajax calls: \" response-format])\n   (ifn? response-format)\n   (map->ResponseFormat {:read response-format\n                         :description \"custom\"\n                         :content-type \"*\/*\"})\n   :else (u\/throw-error [\"unrecognized response format: \"\n                         response-format])))\n\n","(ns ajax.simple\n    (:require [clojure.string :as str]\n              [ajax.protocols :as pr]\n              [ajax.interceptors :as i]\n              [ajax.formats :as f]\n              [ajax.util :as u]\n              #? (:clj [ajax.apache :as a])\n              #? (:clj [ajax.macros :as m]\n                  :cljs [goog.net.XhrIo :as xhr]))\n    #? (:clj (:import [java.io Closeable])\n        :cljs (:require-macros [ajax.macros :as m])))\n\n(defn normalize-method [method]\n  (if (keyword? method)\n    (str\/upper-case (name method))\n    method))\n\n(defn process-response [response interceptor]\n  (pr\/-process-response interceptor response))\n\n(defn make-js-handler [handler interceptors]\n  (fn js-handler [response]\n    (let [processed (reduce process-response response interceptors)]\n      ;;; This requires a bit of explanation: if we return a closeable,\n      ;;; it should be wrapping the original response, so we _don't_\n      ;;; close the original response stream\n      ;;; If you're writing a weird interceptor that doesn't do this,\n      ;;; remember to close the original stream yourself\n      #?(:clj (if (and response\n                       (instance? Closeable (second processed)))\n                (.close ^Closeable (pr\/-body response))))\n      (handler processed))))\n\n(defn base-handler [interceptors {:keys [handler]}]\n  (if handler\n    (make-js-handler handler interceptors)\n    (u\/throw-error \"No ajax handler provided.\")))\n\n(def default-interceptors (atom []))\n\n(defn normalize-request [request]\n  (let [response-format (i\/get-response-format f\/detect-response-format request)]\n    (-> request\n        (update :method normalize-method)\n        (update :interceptors\n                #(concat [response-format]\n                         (or % @default-interceptors)\n                         i\/request-interceptors)))))\n\n(defn new-default-api []\n  #? (:clj  (a\/new-api)\n      :cljs (new goog.net.XhrIo)))\n\n(defn process-request \n  \"-process-request with the arguments flipped for use in reduce\"\n  [request interceptor]\n  (pr\/-process-request interceptor request))\n\n(defn raw-ajax-request \n  \"The main request function.\"\n  [{:keys [interceptors] :as request}]\n  (let [request (reduce process-request request interceptors)\n        ;;; Pass the request through the interceptors\n        handler (base-handler (reverse interceptors) request)\n        ;;; Set up a handler that passes it back through\n        api (or (:api request) (new-default-api))]\n    (pr\/-js-ajax-request api request handler)))\n\n(defn ajax-request [request]\n  (-> request normalize-request raw-ajax-request))\n","(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]))\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type opts]\n            (let [writer (or (:writer opts)\n                             (t\/writer type opts))]\n              (fn transit-write-params [params]\n                (t\/write writer params))))\n    :clj (defn transit-write-fn\n           [type opts]\n           (fn transit-write-params [stream params]\n             (let [writer (t\/writer stream type opts)]\n               (t\/write writer params)))))\n\n(defn transit-request-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :writer Explicit Transit writer. If not supplied one will be created using the other options.\n           The default type is :json for ClojureScript and :msgpack for Clojure.\n   :type Override the default transit type with value :json, :json-verbose or :msgpack\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-request-format {}))\n  ([opts]\n     (let [type (transit-type opts)\n           mime-type (if (or (= type :json)\n                             (= type :json-verbose)) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type opts)\n        :content-type (str \"application\/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [opts]\n            (let [reader (or (:reader opts)\n                             (t\/reader :json opts))]\n              (fn transit-read-response [response]\n                (t\/read reader (pr\/-body response)))))\n    :clj (defn transit-read-fn [request]\n           (fn transit-read-response [response]\n             (let [content-type (u\/get-content-type response)\n                   type         (if (.contains content-type \"msgpack\")\n                                  :msgpack :json)\n                   stream       (pr\/-body response)\n                   reader       (t\/reader stream type request)]\n               (t\/read reader)))))\n\n(defn transit-response-format\n  \"Returns a Transit response format.\n\n   Options include:\n   :reader (CLJS only) Explicit Transit reader. If not supplied one will be created using the other options.\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-response-format {}))\n  ([opts]\n     (transit-response-format (transit-type opts) opts))\n  ([type opts]\n     (i\/map->ResponseFormat\n      {:read (transit-read-fn opts)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application\/transit+json\"]\n           :clj [\"application\/transit+msgpack\"\n                 \"application\/transit+json\"])})))\n",";; Copyright 2014-2022 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [clojure.set :as set]\n            [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq]\n            [goog.object :as gobj])\n  (:import [goog.math Long]))\n\n;; patch cljs.core\/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty\/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty\/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty\/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty\/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n\n  ty\/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty\/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq\/hashCode this))\n\n  ty\/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty\/TaggedValue\n  (-hash [this]\n    (eq\/hashCode this)))\n\n(extend-type ty\/UUID\n  IUUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (gobj\/get b k)]\n      (gobj\/set a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core\/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core\/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from string tag to a decoder function of one\n   argument which returns the in-memory representation of the semantic transit\n   value. If a :default handler is provided, it will be used when no matching\n   read handler can be found.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t\/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\"    (fn [v] (symbol v))\n                   \":\"    (fn [v] (keyword v))\n                   \"set\"  (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v]\n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))\n                   \"with-meta\"\n                          (fn [v] (with-meta (aget v 0) (aget v 1)))}\n                  (dissoc (:handlers opts) :default)))\n              :defaultHandler (-> opts :handlers :default)\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :preferStrings false\n              :preferBuffers false}\n         (clj->js\n           (set\/rename-keys\n             (dissoc opts :handlers)\n             {:array-builder  :arrayBuilder\n              :map-builder    :mapBuilder\n              :prefer-strings :preferStrings\n              :prefer-buffers :preferBuffers}))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a\n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t\/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t\/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(deftype ^:no-doc WithMeta [value meta])\n\n(deftype ^:no-doc WithMetaHandler []\n  Object\n  (tag [_ v] \"with-meta\")\n  (rep [_ v]\n    (t\/tagged \"array\" #js [(.-value v) (.-meta v)]))\n  (stringRep [_ v] nil))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map with the following optional keys:\n\n    :handlers  - a map of type constructors to handler instances. Can optionally\n                 provide a :default write handler which will be used if no\n                 matching handler can be found.\n    :transform - a function of one argument returning a transformed value. Will\n                 be invoked on a value before it is written.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           meta-handler    (WithMetaHandler.)\n           handlers\n           (merge\n             {cljs.core\/Keyword               keyword-handler\n              cljs.core\/Symbol                symbol-handler\n              cljs.core\/Range                 list-handler\n              cljs.core\/List                  list-handler\n              cljs.core\/Cons                  list-handler\n              cljs.core\/EmptyList             list-handler\n              cljs.core\/LazySeq               list-handler\n              cljs.core\/RSeq                  list-handler\n              cljs.core\/IndexedSeq            list-handler\n              cljs.core\/ChunkedCons           list-handler\n              cljs.core\/ChunkedSeq            list-handler\n              cljs.core\/PersistentQueueSeq    list-handler\n              cljs.core\/PersistentQueue       list-handler\n              cljs.core\/PersistentArrayMapSeq list-handler\n              cljs.core\/PersistentTreeMapSeq  list-handler\n              cljs.core\/NodeSeq               list-handler\n              cljs.core\/ArrayNodeSeq          list-handler\n              cljs.core\/KeySeq                list-handler\n              cljs.core\/ValSeq                list-handler\n              cljs.core\/PersistentArrayMap    map-handler\n              cljs.core\/PersistentHashMap     map-handler\n              cljs.core\/PersistentTreeMap     map-handler\n              cljs.core\/PersistentHashSet     set-handler\n              cljs.core\/PersistentTreeSet     set-handler\n              cljs.core\/PersistentVector      vector-handler\n              cljs.core\/Subvec                vector-handler\n              cljs.core\/UUID                  uuid-handler\n              cljs.core\/BlackNode             vector-handler\n              cljs.core\/RedNode               vector-handler\n              WithMeta                        meta-handler}\n             (when (exists? cljs.core\/Eduction)\n               {^:cljs.analyzer\/no-resolve cljs.core\/Eduction list-handler})\n             (when (exists? cljs.core\/Repeat)\n               {^:cljs.analyzer\/no-resolve cljs.core\/Repeat list-handler})\n             (when (exists? cljs.core\/MapEntry)\n               {^:cljs.analyzer\/no-resolve cljs.core\/MapEntry vector-handler})\n             (:handlers opts))]\n      (t\/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                    (doseq [[k v] coll]\n                      (if (= :default k)\n                        (f v \"default\")\n                        (f v k))))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core\/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn- fn-or-val\n  [f]\n  (if (fn? f) f (constantly f)))\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n   (let [tag-fn (fn-or-val tag-fn)\n         rep-fn (fn-or-val rep-fn)\n         str-rep-fn (fn-or-val str-rep-fn)\n         verbose-handler-fn (fn-or-val verbose-handler-fn)]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn)))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty\/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty\/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty\/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty\/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty\/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty\/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty\/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty\/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty\/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty\/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty\/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty\/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty\/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty\/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty\/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty\/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty\/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty\/isLink x))\n\n(defn write-meta\n  \"For :transform. Will write any metadata present on the value.\"\n  [x]\n  (if (implements? IMeta x)\n    (let [m (-meta ^not-native x)]\n      (if-not (nil? m)\n        (WithMeta. (-with-meta ^not-native x nil) m)\n        x))\n    x))\n","(ns ajax.formats\n    \"This file contains the base formats: raw, text and detect.\n     url, json and transit are found in their own files.\"\n    (:require [ajax.interceptors :as i]\n              [ajax.util :as u]\n              [ajax.protocols :as pr])\n    #? (:clj (:import [java.io InputStream]\n                      [java.util Scanner])))\n\n(defn raw-response-format\n  \"This will literally return whatever the underlying implementation\n   considers has been sent. Obviously, this is highly implementation\n   dependent, gives different results depending on your platform but\n   is nonetheless really rather useful.\"\n  ([] (i\/map->ResponseFormat {:read pr\/-body\n                            :description #? (:cljs \"raw text\"\n                                             :clj \"raw binary\")\n                            :content-type [\"*\/*\"]}))\n  ([_] (raw-response-format)))\n\n(defn text-request-format []\n  {:write (u\/to-utf8-writer identity)\n   :content-type \"text\/plain; charset=utf-8\"})\n\n#? (:clj\n    ;;; http:\/\/stackoverflow.com\/questions\/309424\/read-convert-an-inputstream-to-a-string\n    (do\n      (defn response-to-string\n        \"Interprets the response as text (a string). Isn't likely \n         to give you a good outcome if the response wasn't text.\"\n        [response]\n        (let [s (doto (Scanner. ^InputStream (pr\/-body response)\n                                \"UTF-8\")\n                  (.useDelimiter \"\\\\A\"))]\n          (if (.hasNext s) (.next s) \"\")))\n\n      (defn text-response-format\n        ([] (i\/map->ResponseFormat {:read response-to-string\n                                  :description \"raw text\"\n                                  :content-type [\"*\/*\"]}))\n        ([_] (text-response-format))))\n    :cljs\n    ;;; For CLJS, there's no distinction betweeen raw and text\n    ;;; format, because it's a string in the API anyway.\n    (def text-response-format raw-response-format))\n\n;;; Detect Response Format\n\n(defn get-format \n  \"Converts one of a number of types to a response format.\n   Note that it processes `[text format]` the same as `format`,\n   which makes it easier to work with detection vectors such as\n   `default-formats`.\n   \n   It also supports providing formats as raw functions. I don't \n   know if anyone has ever used this.\"\n  [request format-entry]\n  (cond\n   (or (nil? format-entry) (map? format-entry))\n   format-entry\n\n   (vector? format-entry)\n   (get-format request (second format-entry))\n\n   ;;; Must be a format generating function\n   :else (format-entry request)))\n\n(defn get-accept-entries [request format-entry]\n  (let [fe (if (vector? format-entry)\n             (first format-entry)\n             (:content-type (get-format request format-entry)))]\n    (cond (nil? fe) [\"*\/*\"]\n          (string? fe) [fe]\n          :else fe)))\n\n(defn content-type-matches\n  [^String content-type ^String accept]\n  (or (= accept \"*\/*\")\n      (>= (.indexOf content-type accept) 0)))\n\n(defn detect-content-type\n  [content-type request format-entry]\n  (let [accept (get-accept-entries request format-entry)]\n    (some #(content-type-matches content-type %) accept)))\n\n(defn get-default-format\n  [response {:keys [response-format] :as request}]\n  (let [content-type (u\/get-content-type response)]\n    (letfn [(accepted-format?\n              [format-entry]\n              (detect-content-type content-type request format-entry))]\n      (->> response-format\n           (filter accepted-format?)\n           first\n           (get-format request)))))\n\n(defn detect-response-format-read\n  [request]\n  (fn detect-response-format [response]\n    (let [format (get-default-format response request)]\n      ((:read format) response))))\n\n(defn accept-header [{:keys [response-format] :as request}]\n  (let [formats (if (vector? response-format) response-format [response-format])]\n    (mapcat #(get-accept-entries request %) formats)))\n\n(defn detect-response-format \n   \"NB This version of the response format doesn't have a zero\n     arity version. This is because it would involve pulling\n     in every dependency. Instead, core.cljc adds it in.\"\n  [opts]\n    (let [accept (accept-header opts)]\n      (i\/map->ResponseFormat\n      {:read (detect-response-format-read opts)\n        :format (str \"(from \" accept \")\")\n        :content-type accept})))\n","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f\/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring\/\" description)\n                         :content-type content-type})))\n",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http:\/\/opensource.org\/licenses\/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core\n  (:require goog.math.Long\n            goog.math.Integer\n            [goog.string :as gstring]\n            [goog.object :as gobject]\n            [goog.array :as garray]\n            [goog.Uri])\n  (:import [goog.string StringBuffer]))\n\n;; next line is auto-generated by the build-script - Do not edit!\n(def *clojurescript-version* \"1.12.42\")\n\n;; Setting of these Vars is in ClojureScript code is associated with intrinsics\n;; that affect compilation state, but otherwise turn into no-ops in the emitted\n;; JavaScript.\n\n;; The scope of *unchecked-if* is controlled by balanced pairs of set! calls.\n(def *unchecked-if* false)\n;; The scope of *unchecked-arrays* is file-scope: In JVM ClojureScript its side-\n;; effect is to set same-named analyzer dynamic Var, which is unset via binding\n;; scopes. In self-hosted it is cleared via cljs.js\/post-file-side-effects.\n(def *unchecked-arrays* false)\n;; The scope of *warn-on-infer* is file-scope: Its side effect is to set the\n;; cljs.analyzer\/*cljs-warnings* dynamic Var, which is unset via binding scopes.\n(def *warn-on-infer* false)\n\n(set! *unchecked-arrays* true)\n\n(defonce PROTOCOL_SENTINEL #js {})\n\n(def MODULE_URIS nil) ;; set by compiler\n(def MODULE_INFOS nil) ;; set by compiler\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \\\"nodejs\\\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.\"}\n  *target* \"default\")\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Manually set the JavaScript global context. Only \\\"window\\\", \\\"self\\\"\n  , and \\\"global\\\" supported. \"}\n  *global* \"default\")\n\n(def\n  ^{:dynamic true\n    :doc \"Var bound to the current namespace. Only used for bootstrapping.\"\n    :jsdoc [\"@type {*}\"]}\n  *ns* nil)\n\n(def\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *out* nil)\n\n(def\n  ^{:dynamic true}\n  *assert* true)\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-fn* nil)\n\n(declare boolean)\n\n(defn ^{:doc \"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.\" :dynamic true}\n  *exec-tap-fn*\n  [f]\n  (and\n    (exists? js\/setTimeout)\n    ;; See CLJS-3274 - workaround for recent WebKit releases\n    (boolean (js\/setTimeout f 0))))\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-err-fn* nil)\n\n(defn set-print-fn!\n  \"Set *print-fn* to f.\"\n  [f] (set! *print-fn* f))\n\n(defn set-print-err-fn!\n  \"Set *print-err-fn* to f.\"\n  [f] (set! *print-err-fn* f))\n\n(def\n  ^{:dynamic true\n    :doc \"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.\"}\n  *flush-on-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.\"}\n  *print-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true\"}\n  *print-readably* true)\n\n(def\n  ^{:dynamic true\n    :doc \"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.\"}\n  *print-meta* false)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.\"}\n  *print-dup* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true.\"}\n  *print-namespace-maps* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-length* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-level* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-fns-bodies* controls whether functions print their source or\n    only their names.\"}\n  *print-fn-bodies* false)\n\n(defonce\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *loaded-libs* nil)\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably *print-readably*\n   :meta *print-meta*\n   :dup *print-dup*\n   :print-length *print-length*})\n\n(declare into-array)\n\n(defn enable-console-print!\n  \"Set *print-fn* to console.log\"\n  []\n  (set! *print-newline* false)\n  (set-print-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-log js\/console) js\/console (garray\/clone xs)))))\n  (set-print-err-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-error js\/console) js\/console (garray\/clone xs)))))\n  nil)\n\n(def\n  ^{:dynamic true\n    :doc \"bound in a repl thread to the most recent value printed\"}\n  *1)\n\n(def\n  ^{:dynamic true\n    :doc \"bound in a repl thread to the second most recent value printed\"}\n  *2)\n\n(def\n  ^{:dynamic true\n    :doc \"bound in a repl thread to the third most recent value printed\"}\n  *3)\n\n(def\n  ^{:dynamic true\n    :doc \"bound in a repl thread to the most recent exception caught by the repl\"}\n  *e)\n\n(defn truth_\n  \"Internal - do not use!\"\n  [x]\n  (cljs.core\/truth_ x))\n\n(def not-native nil)\n\n(declare instance? Keyword)\n\n(defn ^boolean identical?\n  \"Tests if 2 arguments are the same object\"\n  [x y]\n  (cljs.core\/identical? x y))\n\n(defn ^boolean nil?\n  \"Returns true if x is nil, false otherwise.\"\n  [x]\n  (coercive-= x nil))\n\n(defn ^boolean array?\n  \"Returns true if x is a JavaScript array.\"\n  [x]\n  (if (identical? *target* \"nodejs\")\n    (.isArray js\/Array x)\n    (instance? js\/Array x)))\n\n(defn ^boolean number?\n  \"Returns true if x is a JavaScript number.\"\n  [x]\n  (cljs.core\/number? x))\n\n(defn not\n  \"Returns true if x is logical false, false otherwise.\"\n  [x]\n  (cond\n    (nil? x) true\n    (false? x) true\n    :else false))\n\n(defn ^boolean some?\n  \"Returns true if x is not nil, false otherwise.\"\n  [x] (not (nil? x)))\n\n(defn object?\n  \"Returns true if x's constructor is Object\"\n  [x]\n  (if-not (nil? x)\n    (identical? (.-constructor x) js\/Object)\n    false))\n\n(defn ^boolean string?\n  \"Returns true if x is a JavaScript string.\"\n  [x]\n  (identical? \"string\" (goog\/typeOf x)))\n\n(defn char?\n  \"Returns true if x is a JavaScript string of length one.\"\n  [x]\n  (and (string? x) (== 1 (.-length x))))\n\n(defn any?\n  \"Returns true if given any argument.\"\n  [x] true)\n\n(set! *unchecked-if* true)\n(defn native-satisfies?\n  \"Internal - do not use!\"\n  [p x]\n  (let [x (if (nil? x) nil x)]\n    (cond\n     (unchecked-get p (goog\/typeOf x)) true\n     (unchecked-get p \"_\") true\n     :else false)))\n(set! *unchecked-if* false)\n\n(defn is_proto_\n  [x]\n  (identical? (.-prototype (.-constructor x)) x))\n\n(def\n  ^{:doc \"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments\"}\n  *main-cli-fn* nil)\n\n(def\n  ^{:doc \"A sequence of the supplied command line arguments, or nil if\n  none were supplied\"}\n  *command-line-args* nil)\n\n(defn type\n  \"Return x's constructor.\"\n  [x]\n  (when-not (nil? x)\n    (.-constructor x)))\n\n(defn missing-protocol [proto obj]\n  (let [ty (type obj)\n        ty (if (and ty (.-cljs$lang$type ty))\n             (.-cljs$lang$ctorStr ty)\n             (goog\/typeOf obj))]\n   (js\/Error.\n     (.join (array \"No protocol method \" proto\n                   \" defined for type \" ty \": \" obj) \"\"))))\n\n(defn type->str [ty]\n  (if-let [s (.-cljs$lang$ctorStr ty)]\n    s\n    (str ty)))\n\n;; INTERNAL - do not use, only for Node.js\n(defn load-file [file]\n  (when-not js\/COMPILED\n    (cljs.core\/load-file* file)))\n\n(if (and (exists? js\/Symbol)\n         (identical? (goog\/typeOf js\/Symbol) \"function\"))\n  (def ITER_SYMBOL (.-iterator js\/Symbol))\n  (def ITER_SYMBOL \"@@iterator\"))\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  CHAR_MAP\n  #js {\"-\"    \"_\"\n       \":\"    \"_COLON_\"\n       \"+\"    \"_PLUS_\"\n       \">\"    \"_GT_\"\n       \"<\"    \"_LT_\"\n       \"=\"    \"_EQ_\"\n       \"~\"    \"_TILDE_\"\n       \"!\"    \"_BANG_\"\n       \"@\"    \"_CIRCA_\"\n       \"#\"    \"_SHARP_\"\n       \"'\"    \"_SINGLEQUOTE_\"\n       \"\\\\\\\"\" \"_DOUBLEQUOTE_\"\n       \"%\"    \"_PERCENT_\"\n       \"^\"    \"_CARET_\"\n       \"&\"    \"_AMPERSAND_\"\n       \"*\"    \"_STAR_\"\n       \"|\"    \"_BAR_\"\n       \"{\"    \"_LBRACE_\"\n       \"}\"    \"_RBRACE_\"\n       \"[\"    \"_LBRACK_\"\n       \"]\"    \"_RBRACK_\"\n       \"\/\"    \"_SLASH_\"\n       \"\\\\\\\\\" \"_BSLASH_\"\n       \"?\"    \"_QMARK_\"})\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  DEMUNGE_MAP\n  #js {\"_\"             \"-\"\n       \"_COLON_\"       \":\"\n       \"_PLUS_\"        \"+\"\n       \"_GT_\"          \">\"\n       \"_LT_\"          \"<\"\n       \"_EQ_\"          \"=\"\n       \"_TILDE_\"       \"~\"\n       \"_BANG_\"        \"!\"\n       \"_CIRCA_\"       \"@\"\n       \"_SHARP_\"       \"#\"\n       \"_SINGLEQUOTE_\" \"'\"\n       \"_DOUBLEQUOTE_\" \"\\\\\\\"\"\n       \"_PERCENT_\"     \"%\"\n       \"_CARET_\"       \"^\"\n       \"_AMPERSAND_\"   \"&\"\n       \"_STAR_\"        \"*\"\n       \"_BAR_\"         \"|\"\n       \"_LBRACE_\"      \"{\"\n       \"_RBRACE_\"      \"}\"\n       \"_LBRACK_\"      \"[\"\n       \"_RBRACK_\"      \"]\"\n       \"_SLASH_\"       \"\/\"\n       \"_BSLASH_\"      \"\\\\\\\\\"\n       \"_QMARK_\"       \"?\"})\n\n(def DEMUNGE_PATTERN nil)\n\n(defn system-time\n  \"Returns highest resolution time offered by host in milliseconds.\"\n  []\n  (cond\n    (and (exists? js\/performance)\n         (not (nil? (. js\/performance -now))))\n    (.now js\/performance)\n\n    (and (exists? js\/process)\n         (not (nil? (. js\/process -hrtime))))\n    (let [t (.hrtime js\/process)]\n      (\/ (+ (* (aget t 0) 1e9) (aget t 1)) 1e6))\n\n    :else (.getTime (js\/Date.))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; arrays ;;;;;;;;;;;;;;;;\n\n(declare apply)\n\n(defn ^array make-array\n  \"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.\"\n  ([size]\n     (js\/Array. size))\n  ([type size]\n     (make-array size))\n  ([type size & more-sizes]\n    (let [dims more-sizes\n          dimarray (make-array size)]\n      (dotimes [i (alength dimarray)]\n        (aset dimarray i (apply make-array nil dims)))\n      dimarray)))\n\n(defn aclone\n  \"Returns a javascript array, cloned from the passed in array\"\n  [arr]\n  (let [len (alength arr)\n        new-arr (make-array len)]\n    (dotimes [i len]\n      (aset new-arr i (aget arr i)))\n    new-arr))\n\n(defn ^array array\n  \"Creates a new javascript array.\n@param {...*} var_args\" ;;array is a special case, don't emulate this doc string\n  [var-args]            ;; [& items]\n  (let [a (js\/Array. (alength (cljs.core\/js-arguments)))]\n    (loop [i 0]\n      (if (< i (alength a))\n        (do\n          (aset a i (aget (cljs.core\/js-arguments) i))\n          (recur (inc i)))\n        a))))\n\n(defn- maybe-warn\n  [e]\n  (when *print-err-fn*\n    (*print-err-fn* e)))\n\n(defn- checked-aget\n  ([array idx]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget (checked-aget array idx) idxs)))\n\n(defn- checked-aset\n  ([array idx val]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset (checked-aget array idx) idx2 idxv)))\n\n(defn- checked-aget'\n  ([array idx]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget' (checked-aget' array idx) idxs)))\n\n(defn- checked-aset'\n  ([array idx val]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset' (checked-aget' array idx) idx2 idxv)))\n\n(defn aget\n  \"Returns the value at the index\/indices. Works on JavaScript arrays.\"\n  ([array idx]\n     (cljs.core\/aget array idx))\n  ([array idx & idxs]\n     (apply aget (aget array idx) idxs)))\n\n(defn aset\n  \"Sets the value at the index\/indices. Works on JavaScript arrays.\n  Returns val.\"\n  ([array idx val]\n    (cljs.core\/aset array idx val))\n  ([array idx idx2 & idxv]\n    (apply aset (aget array idx) idx2 idxv)))\n\n(defn ^number alength\n  \"Returns the length of the array. Works on arrays of all types.\"\n  [array]\n  (cljs.core\/alength array))\n\n(declare reduce)\n\n(defn ^array into-array\n  \"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.\"\n  ([aseq]\n     (into-array nil aseq))\n  ([type aseq]\n     (reduce (fn [a x] (.push a x) a) (array) aseq)))\n\n(defn js-invoke\n  \"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.\"\n  [obj s & args]\n  (.apply (unchecked-get obj s) obj (into-array args)))\n\n(defn js-symbol?\n  \"Returns true if x is an instance of Symbol\"\n  [x]\n  (or (identical? (goog\/typeOf x) \"symbol\")\n      (and (exists? js\/Symbol)\n           (instance? js\/Symbol x))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;; core protocols ;;;;;;;;;;;;;\n\n(defprotocol Fn\n  \"Marker protocol\")\n\n(defprotocol IFn\n  \"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2\"\n  (-invoke\n    [this]\n    [this a]\n    [this a b]\n    [this a b c]\n    [this a b c d]\n    [this a b c d e]\n    [this a b c d e f]\n    [this a b c d e f g]\n    [this a b c d e f g h]\n    [this a b c d e f g h i]\n    [this a b c d e f g h i j]\n    [this a b c d e f g h i j k]\n    [this a b c d e f g h i j k l]\n    [this a b c d e f g h i j k l m]\n    [this a b c d e f g h i j k l m n]\n    [this a b c d e f g h i j k l m n o]\n    [this a b c d e f g h i j k l m n o p]\n    [this a b c d e f g h i j k l m n o p q]\n    [this a b c d e f g h i j k l m n o p q r]\n    [this a b c d e f g h i j k l m n o p q r s]\n    [this a b c d e f g h i j k l m n o p q r s t]\n    [this a b c d e f g h i j k l m n o p q r s t rest]))\n\n(defprotocol ICloneable\n  \"Protocol for cloning a value.\"\n  (^clj -clone [value]\n    \"Creates a clone of value.\"))\n\n(defprotocol ICounted\n  \"Protocol for adding the ability to count a collection in constant time.\"\n  (^number -count [coll]\n    \"Calculates the count of coll in constant time. Used by cljs.core\/count.\"))\n\n(defprotocol IEmptyableCollection\n  \"Protocol for creating an empty collection.\"\n  (-empty [coll]\n    \"Returns an empty collection of the same category as coll. Used\n     by cljs.core\/empty.\"))\n\n(defprotocol ICollection\n  \"Protocol for adding to a collection.\"\n  (^clj -conj [coll o]\n    \"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)\"))\n\n#_(defprotocol IOrdinal\n    (-index [coll]))\n\n(defprotocol IIndexed\n  \"Protocol for collections to provide indexed-based access to their items.\"\n  (-nth [coll n] [coll n not-found]\n    \"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.\"))\n\n(defprotocol ASeq\n  \"Marker protocol indicating an array sequence.\")\n\n(defprotocol ISeq\n  \"Protocol for collections to provide access to their items as sequences.\"\n  (-first [coll]\n    \"Returns the first item in the collection coll. Used by cljs.core\/first.\")\n  (^clj -rest [coll]\n    \"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()\"))\n\n(defprotocol INext\n  \"Protocol for accessing the next items of a collection.\"\n  (^clj-or-nil -next [coll]\n    \"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil\"))\n\n(defprotocol ILookup\n  \"Protocol for looking up a value in a data structure.\"\n  (-lookup [o k] [o k not-found]\n    \"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.\"))\n\n(defprotocol IAssociative\n  \"Protocol for adding associativity to collections.\"\n  (^boolean -contains-key? [coll k]\n    \"Returns true if k is a key in coll.\")\n  #_(-entry-at [coll k])\n  (^clj -assoc [coll k v]\n    \"Returns a new collection of coll with a mapping from key k to\n     value v added to it.\"))\n\n(defprotocol IFind\n  \"Protocol for implementing entry finding in collections.\"\n  (-find [coll k] \"Returns the map entry for key, or nil if key not present.\"))\n\n(defprotocol IMap\n  \"Protocol for adding mapping functionality to collections.\"\n  #_(-assoc-ex [coll k v])\n  (^clj -dissoc [coll k]\n    \"Returns a new collection of coll without the mapping for key k.\"))\n\n(defprotocol IMapEntry\n  \"Protocol for examining a map entry.\"\n  (-key [coll]\n    \"Returns the key of the map entry.\")\n  (-val [coll]\n    \"Returns the value of the map entry.\"))\n\n(defprotocol ISet\n  \"Protocol for adding set functionality to a collection.\"\n  (^clj -disjoin [coll v]\n    \"Returns a new collection of coll that does not contain v.\"))\n\n(defprotocol IStack\n  \"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.\"\n  (-peek [coll]\n    \"Returns the item from the top of the stack. Is used by cljs.core\/peek.\")\n  (^clj -pop [coll]\n    \"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core\/pop.\"))\n\n(defprotocol IVector\n  \"Protocol for adding vector functionality to collections.\"\n  (^clj -assoc-n [coll n val]\n    \"Returns a new vector with value val added at position n.\"))\n\n(defprotocol IDeref\n  \"Protocol for adding dereference functionality to a reference.\"\n  (-deref [o]\n    \"Returns the value of the reference o.\"))\n\n(defprotocol IDerefWithTimeout\n  (-deref-with-timeout [o msec timeout-val]))\n\n(defprotocol IMeta\n  \"Protocol for accessing the metadata of an object.\"\n  (^clj-or-nil -meta [o]\n    \"Returns the metadata of object o.\"))\n\n(defprotocol IWithMeta\n  \"Protocol for adding metadata to an object.\"\n  (^clj -with-meta [o meta]\n    \"Returns a new object with value of o and metadata meta added to it.\"))\n\n(defprotocol IReduce\n  \"Protocol for seq types that can reduce themselves.\n  Called by cljs.core\/reduce.\"\n  (-reduce [coll f] [coll f start]\n    \"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.\"))\n\n(defprotocol IKVReduce\n  \"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core\/reduce-kv.\"\n  (-kv-reduce [coll f init]\n    \"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.\"))\n\n(defprotocol IEquiv\n  \"Protocol for adding value comparison functionality to a type.\"\n  (^boolean -equiv [o other]\n    \"Returns true if o and other are equal, false otherwise.\"))\n\n(defprotocol IHash\n  \"Protocol for adding hashing functionality to a type.\"\n  (-hash [o]\n    \"Returns the hash code of o.\"))\n\n(defprotocol ISeqable\n  \"Protocol for adding the ability to a type to be transformed into a sequence.\"\n  (^clj-or-nil -seq [o]\n    \"Returns a seq of o, or nil if o is empty.\"))\n\n(defprotocol ISequential\n  \"Marker interface indicating a persistent collection of sequential items\")\n\n(defprotocol IList\n  \"Marker interface indicating a persistent list\")\n\n(defprotocol IRecord\n  \"Marker interface indicating a record object\")\n\n(defprotocol IReversible\n  \"Protocol for reversing a seq.\"\n  (^clj -rseq [coll]\n    \"Returns a seq of the items in coll in reversed order.\"))\n\n(defprotocol ISorted\n  \"Protocol for a collection which can represent their items\n  in a sorted manner. \"\n  (^clj -sorted-seq [coll ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\")\n  (^clj -sorted-seq-from [coll k ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)\")\n  (-entry-key [coll entry]\n    \"Returns the key for entry.\")\n  (-comparator [coll]\n    \"Returns the comparator for coll.\"))\n\n(defprotocol IWriter\n  \"Protocol for writing. Currently only implemented by StringBufferWriter.\"\n  (-write [writer s]\n    \"Writes s with writer and returns the result.\")\n  (-flush [writer]\n    \"Flush writer.\"))\n\n(defprotocol IPrintWithWriter\n  \"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.\"\n  (-pr-writer [o writer opts]))\n\n(defprotocol IPending\n  \"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.\"\n  (^boolean -realized? [x]\n    \"Returns true if a value for x has been produced, false otherwise.\"))\n\n(defprotocol IWatchable\n  \"Protocol for types that can be watched. Currently only implemented by Atom.\"\n  (-notify-watches [this oldval newval]\n    \"Calls all watchers with this, oldval and newval.\")\n  (-add-watch [this key f]\n    \"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.\")\n  (-remove-watch [this key]\n    \"Removes watcher that corresponds to key from this.\"))\n\n(defprotocol IEditableCollection\n  \"Protocol for collections which can transformed to transients.\"\n  (^clj -as-transient [coll]\n    \"Returns a new, transient version of the collection, in constant time.\"))\n\n(defprotocol ITransientCollection\n  \"Protocol for adding basic functionality to transient collections.\"\n  (^clj -conj! [tcoll val]\n    \"Adds value val to tcoll and returns tcoll.\")\n  (^clj -persistent! [tcoll]\n    \"Creates a persistent data structure from tcoll and returns it.\"))\n\n(defprotocol ITransientAssociative\n  \"Protocol for adding associativity to transient collections.\"\n  (^clj -assoc! [tcoll key val]\n    \"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.\"))\n\n(defprotocol ITransientMap\n  \"Protocol for adding mapping functionality to transient collections.\"\n  (^clj -dissoc! [tcoll key]\n    \"Returns a new transient collection of tcoll without the mapping for key.\"))\n\n(defprotocol ITransientVector\n  \"Protocol for adding vector functionality to transient collections.\"\n  (^clj -assoc-n! [tcoll n val]\n    \"Returns tcoll with value val added at position n.\")\n  (^clj -pop! [tcoll]\n    \"Returns tcoll with the last item removed from it.\"))\n\n(defprotocol ITransientSet\n  \"Protocol for adding set functionality to a transient collection.\"\n  (^clj -disjoin! [tcoll v]\n    \"Returns tcoll without v.\"))\n\n(defprotocol IComparable\n  \"Protocol for values that can be compared.\"\n  (^number -compare [x y]\n    \"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.\"))\n\n(defprotocol IChunk\n  \"Protocol for accessing the items of a chunk.\"\n  (-drop-first [coll]\n    \"Return a new chunk of coll with the first item removed.\"))\n\n(defprotocol IChunkedSeq\n  \"Protocol for accessing a collection as sequential chunks.\"\n  (-chunked-first [coll]\n    \"Returns the first chunk in coll.\")\n  (-chunked-rest [coll]\n    \"Return a new collection of coll with the first chunk removed.\"))\n\n(defprotocol IChunkedNext\n  \"Protocol for accessing the chunks of a collection.\"\n  (-chunked-next [coll]\n    \"Returns a new collection of coll without the first chunk.\"))\n\n(defprotocol INamed\n  \"Protocol for adding a name.\"\n  (^string -name [x]\n    \"Returns the name String of x.\")\n  ( ^{:tag #{string clj-nil}}-namespace [x]\n    \"Returns the namespace String of x.\"))\n\n(defprotocol IAtom\n  \"Marker protocol indicating an atom.\")\n\n(defprotocol IReset\n  \"Protocol for adding resetting functionality.\"\n  (-reset! [o new-value]\n    \"Sets the value of o to new-value.\"))\n\n(defprotocol ISwap\n  \"Protocol for adding swapping functionality.\"\n  (-swap! [o f] [o f a] [o f a b] [o f a b xs]\n    \"Swaps the value of o to be (apply f current-value-of-atom args).\"))\n\n(defprotocol IVolatile\n  \"Protocol for adding volatile functionality.\"\n  (-vreset! [o new-value]\n    \"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.\"))\n\n(defprotocol IIterable\n  \"Protocol for iterating over a collection.\"\n  (-iterator [coll]\n    \"Returns an iterator for coll.\"))\n\n(defprotocol IDrop\n  \"Protocol for persistent or algorithmically defined collections to provide a\n  means of dropping N items that is more efficient than sequential walking.\"\n  (^clj-or-nil -drop [coll n]\n    \"Returns a collection that is ISequential, ISeq, and IReduce, or nil if past\n     the end. The number of items to drop n must be > 0. It is also useful if the\n     returned coll implements IDrop for subsequent use in a partition-like scenario.\"))\n\n;; Printing support\n\n(deftype StringBufferWriter [sb]\n  IWriter\n  (-write [_ s] (.append sb s))\n  (-flush [_] nil))\n\n(defn pr-str*\n  \"Support so that collections can implement toString without\n   loading all the printing machinery.\"\n  [^not-native obj]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (-pr-writer obj writer (pr-opts))\n    (-flush writer)\n    (str sb)))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 ;;;;;;;;;;;;;;;\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/Integer.java\n(defn ^number int-rotate-left [x n]\n  (bit-or\n    (bit-shift-left x n)\n    (unsigned-bit-shift-right x (- n))))\n\n;; http:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Math\/imul\n(if (and (exists? Math\/imul)\n         (not (zero? (Math\/imul 0xffffffff 5))))\n  (defn ^number imul [a b] (Math\/imul a b))\n  (defn ^number imul [a b]\n    (let [ah (bit-and (unsigned-bit-shift-right a 16) 0xffff)\n          al (bit-and a 0xffff)\n          bh (bit-and (unsigned-bit-shift-right b 16) 0xffff)\n          bl (bit-and b 0xffff)]\n      (bit-or\n        (+ (* al bl)\n           (unsigned-bit-shift-right\n             (bit-shift-left (+ (* ah bl) (* al bh)) 16) 0)) 0))))\n\n;; http:\/\/smhasher.googlecode.com\/svn\/trunk\/MurmurHash3.cpp\n(def m3-seed 0)\n(def m3-C1 (int 0xcc9e2d51))\n(def m3-C2 (int 0x1b873593))\n\n(defn ^number m3-mix-K1 [k1]\n  (-> (int k1) (imul m3-C1) (int-rotate-left 15) (imul m3-C2)))\n\n(defn ^number m3-mix-H1 [h1 k1]\n  (int (-> (int h1) (bit-xor (int k1)) (int-rotate-left 13) (imul 5) (+ (int 0xe6546b64)))))\n\n(defn ^number m3-fmix [h1 len]\n  (as-> (int h1) h1\n    (bit-xor h1 len)\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))\n    (imul h1 (int 0x85ebca6b))\n    (bit-xor h1 (unsigned-bit-shift-right h1 13))\n    (imul h1 (int 0xc2b2ae35))\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))))\n\n(defn ^number m3-hash-int [in]\n  (if (zero? in)\n    in\n    (let [k1 (m3-mix-K1 in)\n          h1 (m3-mix-H1 m3-seed k1)]\n      (m3-fmix h1 4))))\n\n(defn hash-long [high low]\n  (bit-xor high low))\n\n(defn hash-double [f]\n  (let [arr  (doto (js\/Float64Array. 1) (aset 0 f))\n        buf  (.-buffer arr)\n        high (.getInt32 (js\/DataView. buf 0 4))\n        low  (.getInt32 (js\/DataView. buf 4 4))]\n    (hash-long high low)))\n\n(defn ^number m3-hash-unencoded-chars [in]\n  (let [h1 (loop [i 1 h1 m3-seed]\n             (if (< i (.-length in))\n               (recur (+ i 2)\n                 (m3-mix-H1 h1\n                   (m3-mix-K1\n                     (bit-or (.charCodeAt in (dec i))\n                       (bit-shift-left (.charCodeAt in i) 16)))))\n               h1))\n        h1 (if (== (bit-and (.-length in) 1) 1)\n             (bit-xor h1 (m3-mix-K1 (.charCodeAt in (dec (.-length in)))))\n             h1)]\n    (m3-fmix h1 (imul 2 (.-length in)))))\n\n;;;;;;;;;;;;;;;;;;; symbols ;;;;;;;;;;;;;;;\n\n(declare list Symbol = compare)\n\n;; Simple caching of string hashcode\n(def string-hash-cache (js-obj))\n(def string-hash-cache-count 0)\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/String.java\n(defn hash-string* [s]\n  (if-not (nil? s)\n    (let [len (.-length s)]\n      (if (pos? len)\n        (loop [i 0 hash 0]\n          (if (< i len)\n            (recur (inc i) (+ (imul 31 hash) (.charCodeAt s i)))\n            hash))\n        0))\n    0))\n\n(defn add-to-string-hash-cache [k]\n  (let [h (hash-string* k)]\n    (gobject\/set string-hash-cache k h)\n    (set! string-hash-cache-count (inc string-hash-cache-count))\n    h))\n\n(defn hash-string [k]\n  (when (> string-hash-cache-count 255)\n    (set! string-hash-cache (js-obj))\n    (set! string-hash-cache-count 0))\n  (if (nil? k)\n    0\n    (let [h (unchecked-get string-hash-cache k)]\n      (if (number? h)\n        h\n        (add-to-string-hash-cache k)))))\n\n(defn hash\n  \"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.\"\n  [o]\n  (cond\n    (implements? IHash o)\n    (bit-xor (-hash o) 0)\n\n    (number? o)\n    (if ^boolean (js\/isFinite o)\n      (if-not ^boolean (.isSafeInteger js\/Number o)\n        (hash-double o)\n        (js-mod (Math\/floor o) 2147483647))\n      (case o\n        ##Inf\n        2146435072\n        ##-Inf\n        -1048576\n        2146959360))\n\n    ;; note: mirrors Clojure's behavior on the JVM, where the hashCode is\n    ;; 1231 for true and 1237 for false\n    ;; http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Boolean.html#hashCode%28%29\n    (true? o) 1231\n\n    (false? o) 1237\n\n    (string? o)\n    (m3-hash-int (hash-string o))\n\n    (instance? js\/Date o)\n    (bit-xor (.valueOf o) 0)\n\n    (nil? o) 0\n\n    :else\n    (bit-xor (-hash o) 0)))\n\n(defn hash-combine [seed hash]\n  ; a la boost\n  (bit-xor seed\n    (+ hash 0x9e3779b9\n      (bit-shift-left seed 6)\n      (bit-shift-right seed 2))))\n\n(defn ^boolean instance?\n  \"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false\"\n  [c x]\n  (cljs.core\/instance? c x))\n\n(defn ^boolean symbol?\n  \"Return true if x is a Symbol\"\n  [x]\n  (instance? Symbol x))\n\n(defn- hash-symbol [sym]\n  (hash-combine\n    (m3-hash-unencoded-chars (.-name sym))\n    (hash-string (.-ns sym))))\n\n(defn- compare-symbols [a b]\n  (cond\n   (identical? (.-str a) (.-str b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(declare get)\n\n(deftype Symbol [ns name str ^:mutable _hash _meta]\n  Object\n  (toString [_] str)\n  (equiv [this other] (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Symbol other)\n      (identical? str (.-str other))\n      false))\n\n  IFn\n  (-invoke [sym coll]\n    (get coll sym))\n  (-invoke [sym coll not-found]\n    (get coll sym not-found))\n\n  IMeta\n  (-meta [_] _meta)\n\n  IWithMeta\n  (-with-meta [_ new-meta] (Symbol. ns name str _hash new-meta))\n\n  IHash\n  (-hash [sym]\n    (caching-hash sym hash-symbol _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer str)))\n\n(defn var?\n  \"Returns true if v is of type cljs.core.Var\"\n  [v]\n  (instance? cljs.core.Var v))\n\n(defn symbol\n  \"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.\"\n  ([name]\n   (cond (symbol? name) name\n         (string? name) (let [idx (.indexOf name \"\/\")]\n                          (if (< idx 1)\n                            (symbol nil name)\n                            (symbol (.substring name 0 idx)\n                                    (.substring name (inc idx) (. name -length)))))\n         (var? name) (.-sym name)\n         (keyword? name) (recur (.-fqn name))\n         :else (throw (new js\/Error \"no conversion to symbol\"))))\n  ([ns name]\n   (let [sym-str (if-not (nil? ns)\n                   (str ns \"\/\" name)\n                   name)]\n     (Symbol. ns name sym-str nil nil))))\n\n(deftype Var [val sym _meta]\n  Object\n  (isMacro [_]\n    (. (val) -cljs$lang$macro))\n  (toString [_]\n    (str \"#'\" sym))\n  IDeref\n  (-deref [_] (val))\n  IMeta\n  (-meta [_] _meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (Var. val sym new-meta))\n  IEquiv\n  (-equiv [this other]\n    (if (instance? Var other)\n      (= (.-sym this) (.-sym other))\n      false))\n  IHash\n  (-hash [_]\n    (hash-symbol sym))\n  Fn\n  IFn\n  (-invoke [_]\n    ((val)))\n  (-invoke [_ a]\n    ((val) a))\n  (-invoke [_ a b]\n    ((val) a b))\n  (-invoke [_ a b c]\n    ((val) a b c))\n  (-invoke [_ a b c d]\n    ((val) a b c d))\n  (-invoke [_ a b c d e]\n    ((val) a b c d e))\n  (-invoke [_ a b c d e f]\n    ((val) a b c d e f))\n  (-invoke [_ a b c d e f g]\n    ((val) a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    ((val) a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    ((val) a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    ((val) a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    ((val) a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    ((val) a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    ((val) a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    ((val) a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    ((val) a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    ((val) a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    ((val) a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    ((val) a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    ((val) a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    ((val) a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply (val) a b c d e f g h i j k l m n o p q r s t rest)))\n\n;;;;;;;;;;;;;;;;;;; fundamentals ;;;;;;;;;;;;;;;\n\n(declare array-seq prim-seq IndexedSeq)\n\n(defn iterable?\n  \"Return true if x implements IIterable protocol.\"\n  [x]\n  (satisfies? IIterable x))\n\n(defn js-iterable?\n  \"Return true if x has a JavaScript iterator property\"\n  [x]\n  (and (not (nil? x))\n       (not (nil? (js* \"~{}[~{}]\" x ITER_SYMBOL)))))\n\n(defn clone\n  \"Clone the supplied value which must implement ICloneable.\"\n  [value]\n  (-clone value))\n\n(defn cloneable?\n  \"Return true if x implements ICloneable protocol.\"\n  [value]\n  (satisfies? ICloneable value))\n\n(declare es6-iterator-seq)\n\n(defn ^seq seq\n  \"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? ISeqable coll)\n      (-seq coll)\n\n      (array? coll)\n      (when-not (zero? (alength coll))\n        (IndexedSeq. coll 0 nil))\n\n      (string? coll)\n      (when-not (zero? (.-length coll))\n        (IndexedSeq. coll 0 nil))\n\n      (js-iterable? coll)\n      (es6-iterator-seq\n        (.call (gobject\/get coll ITER_SYMBOL) coll))\n\n      (native-satisfies? ISeqable coll)\n      (-seq coll)\n\n      :else (throw (js\/Error. (str coll \" is not ISeqable\"))))))\n\n(defn first\n  \"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-first coll)\n      (let [s (seq coll)]\n        (when-not (nil? s)\n          (-first s))))))\n\n(defn ^seq rest\n  \"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.\"\n  [coll]\n  (if-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-rest coll)\n      (let [s (seq coll)]\n        (if s\n          (-rest ^not-native s)\n          ())))\n    ()))\n\n(defn ^seq next\n  \"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? INext coll)\n      (-next coll)\n      (seq (rest coll)))))\n\n(defn ^boolean =\n  \"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.\"\n  ([x] true)\n  ([x y]\n    (if (nil? x)\n      (nil? y)\n      (or (identical? x y)\n        ^boolean (-equiv x y))))\n  ([x y & more]\n     (if (= x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (= y (first more)))\n       false)))\n\n(deftype ES6Iterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value x :done false})\n      #js {:value nil :done true})))\n\n(defn es6-iterator\n  \"Return a ES2015+ compatible iterator for coll.\"\n  [coll]\n  (ES6Iterator. (seq coll)))\n\n(deftype ES6IteratorSeq [value iter ^:mutable _rest]\n  ISeqable\n  (-seq [this] this)\n  ISeq\n  (-first [_] value)\n  (-rest [_]\n    (when (nil? _rest)\n      (set! _rest (es6-iterator-seq iter)))\n    _rest))\n\n(defn es6-iterator-seq\n  \"Given an ES2015+ compatible iterator return a seq.\"\n  [iter]\n  (let [v (.next iter)]\n    (if (.-done v)\n      nil\n      (ES6IteratorSeq. (.-value v) iter nil))))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 Helpers ;;;;;;;;;;;;;;;;\n\n(defn ^number mix-collection-hash\n  \"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [hash-basis count]\n  (let [h1 m3-seed\n        k1 (m3-mix-K1 hash-basis)\n        h1 (m3-mix-H1 h1 k1)]\n    (m3-fmix h1 count)))\n\n(defn ^number hash-ordered-coll\n  \"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 1 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ (imul 31 hash-code) (hash (first coll))) 0)\n        (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-ordered-hash\n  (mix-collection-hash 1 0))\n\n(defn ^number hash-unordered-coll\n  \"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 0 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ hash-code (hash (first coll))) 0) (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-unordered-hash\n  (mix-collection-hash 0 0))\n\n;;;;;;;;;;;;;;;;;;; protocols on primitives ;;;;;;;;\n(declare hash-map list equiv-sequential)\n\n(extend-type nil\n  ICounted\n  (-count [_] 0))\n\n;; TODO: we should remove this and handle date equality checking\n;; by some other means, probably by adding a new primitive type\n;; case to the hash table lookup - David\n\n(extend-type js\/Date\n  IEquiv\n  (-equiv [o other]\n    (and (instance? js\/Date other)\n         (== (.valueOf o) (.valueOf other))))\n\n  IComparable\n  (-compare [this other]\n    (if (instance? js\/Date other)\n      (garray\/defaultCompare (.valueOf this) (.valueOf other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defprotocol Inst\n  (inst-ms* [inst]))\n\n(extend-protocol Inst\n  js\/Date\n  (inst-ms* [inst] (.getTime inst)))\n\n(defn inst-ms\n  \"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT\"\n  [inst]\n  (inst-ms* inst))\n\n(defn inst?\n  \"Return true if x satisfies Inst\"\n  [x]\n  (satisfies? Inst x))\n\n(extend-type number\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(declare with-meta)\n\n(extend-type function\n  Fn\n  IMeta\n  (-meta [_] nil))\n\n(extend-type default\n  IHash\n  (-hash [o]\n    (goog\/getUid o)))\n\n(extend-type symbol\n  IHash\n  (-hash [o]\n    (hash (.toString o))))\n\n;;this is primitive because & emits call to array-seq\n(defn inc\n  \"Returns a number one greater than num.\"\n  [x] (cljs.core\/+ x 1))\n\n(declare deref)\n\n(deftype Reduced [val]\n  IDeref\n  (-deref [o] val))\n\n(defn reduced\n  \"Wraps x in a way such that a reduce will terminate with the value x\"\n  [x]\n  (Reduced. x))\n\n(defn reduced?\n  \"Returns true if x is the result of a call to reduced\"\n  [r]\n  (instance? Reduced r))\n\n(defn ensure-reduced\n  \"If x is already reduced?, returns it, else returns (reduced x)\"\n  [x]\n  (if (reduced? x) x (reduced x)))\n\n(defn unreduced\n  \"If x is reduced?, returns (deref x), else returns x\"\n  [x]\n  (if (reduced? x) (deref x) x))\n\n;; generic to all refs\n;; (but currently hard-coded to atom!)\n(defn deref\n  \"Also reader macro: @var\/@atom\/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?.\"\n  [o]\n  (-deref o))\n\n(defn- ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n     (let [cnt (-count cicoll)]\n       (if (zero? cnt)\n         (f)\n         (loop [val (-nth cicoll 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (-nth cicoll n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([^not-native cicoll f val]\n     (let [cnt (-count cicoll)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(defn- array-reduce\n  ([arr f]\n     (let [cnt (alength arr)]\n       (if (zero? (alength arr))\n         (f)\n         (loop [val (aget arr 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (aget arr n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([arr f val]\n     (let [cnt (alength arr)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val))))\n  ([arr f val idx]\n     (let [cnt (alength arr)]\n       (loop [val val, n idx]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(declare hash-coll cons drop count nth RSeq List)\n\n(defn counted?\n  \"Returns true if coll implements count in constant time\"\n  [x] (satisfies? ICounted x))\n\n(defn indexed?\n  \"Returns true if coll implements nth in constant time\"\n  [x] (satisfies? IIndexed x))\n\n(defn- -indexOf\n  ([coll x]\n   (-indexOf coll x 0))\n  ([coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n(defn- -lastIndexOf\n  ([coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([coll x start]\n   (let [len (count coll)]\n    (if (zero? len)\n      -1\n      (loop [idx (cond\n                   (pos? start) (min (dec len) start)\n                   (neg? start) (+ len start)\n                   :else start)]\n        (if (>= idx 0)\n          (if (= (nth coll idx) x)\n            idx\n            (recur (dec idx)))\n          -1))))))\n\n(deftype IndexedSeqIterator [arr ^:mutable i]\n  Object\n  (hasNext [_]\n    (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret)))\n\n(deftype IndexedSeq [arr i meta]\n  Object\n  (toString [coll]\n   (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (IndexedSeq. arr i meta))\n\n  ISeqable\n  (-seq [this]\n    (when (< i (alength arr))\n      this))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (IndexedSeq. arr i new-meta)))\n\n  ASeq\n  ISeq\n  (-first [_] (aget arr i))\n  (-rest [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               (list)))\n\n  INext\n  (-next [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               nil))\n\n  IDrop\n  (-drop [coll n]\n    (if (pos? n)\n      (if (< (+ i n) (alength arr))\n        (IndexedSeq. arr (+ i n) nil)\n        nil)\n      coll))\n\n  ICounted\n  (-count [_]\n    (max 0 (- (alength arr) i)))\n\n  IIndexed\n  (-nth [coll n]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [coll n not-found]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        not-found)))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IIterable\n  (-iterator [coll]\n    (IndexedSeqIterator. arr i))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr i) (inc i)))\n  (-reduce [coll f start]\n    (array-reduce arr f start i))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReversible\n  (-rseq [coll]\n    (let [c (-count coll)]\n      (if (pos? c)\n        (RSeq. coll (dec c) nil)))))\n\n(es6-iterable IndexedSeq)\n\n(defn prim-seq\n  \"Create seq from a primitive JavaScript Array-like.\"\n  ([prim]\n     (prim-seq prim 0))\n  ([prim i]\n     (when (< i (alength prim))\n       (IndexedSeq. prim i nil))))\n\n(defn array-seq\n  \"Create a seq from a JavaScript array.\"\n  ([array]\n     (prim-seq array 0))\n  ([array i]\n     (prim-seq array i)))\n\n(declare with-meta seq-reduce)\n\n(deftype RSeq [ci i meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (RSeq. ci i meta))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (RSeq. ci i new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeq\n  (-first [coll]\n    (-nth ci i))\n  (-rest [coll]\n    (if (pos? i)\n      (RSeq. ci (dec i) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (pos? i)\n      (RSeq. ci (dec i) nil)))\n\n  ICounted\n  (-count [coll] (inc i))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReduce\n  (-reduce [col f] (seq-reduce f col))\n  (-reduce [col f start] (seq-reduce f start col)))\n\n(es6-iterable RSeq)\n\n(defn second\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn ffirst\n  \"Same as (first (first x))\"\n  [coll]\n  (first (first coll)))\n\n(defn nfirst\n  \"Same as (next (first x))\"\n  [coll]\n  (next (first coll)))\n\n(defn fnext\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn nnext\n  \"Same as (next (next x))\"\n  [coll]\n  (next (next coll)))\n\n(defn last\n  \"Return the last item in coll, in linear time\"\n  [s]\n  (let [sn (next s)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first s))))\n\n(extend-type default\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(defn conj\n  \"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.\"\n  ([] [])\n  ([coll] coll)\n  ([coll x]\n    (if-not (nil? coll)\n      (-conj coll x)\n      (list x)))\n  ([coll x & xs]\n    (if xs\n      (recur (conj coll x) (first xs) (next xs))\n      (conj coll x))))\n\n(defn empty\n  \"Returns an empty collection of the same category as coll, or nil\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? IEmptyableCollection coll)\n      (-empty coll)\n\n      (satisfies? IEmptyableCollection coll)\n      (-empty coll)\n\n      :else nil)))\n\n(defn- accumulating-seq-count [coll]\n  (loop [s (seq coll) acc 0]\n    (if (counted? s) ; assumes nil is counted, which it currently is\n      (+ acc (-count s))\n      (recur (next s) (inc acc)))))\n\n(defn count\n  \"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps\"\n  [coll]\n  (if-not (nil? coll)\n    (cond\n      (implements? ICounted coll)\n      (-count coll)\n\n      (array? coll)\n      (alength coll)\n\n      (string? coll)\n      ^number (.-length coll)\n\n      (implements? ISeqable coll)\n      (accumulating-seq-count coll)\n\n      :else (-count coll))\n    0))\n\n(defn- linear-traversal-nth\n  ([coll n]\n     (cond\n       (nil? coll)     (throw (js\/Error. \"Index out of bounds\"))\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         (throw (js\/Error. \"Index out of bounds\")))\n       (indexed? coll) (-nth coll n)\n       (seq coll)      (recur (next coll) (dec n))\n       :else           (throw (js\/Error. \"Index out of bounds\"))))\n  ([coll n not-found]\n     (cond\n       (nil? coll)     not-found\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         not-found)\n       (indexed? coll) (-nth coll n not-found)\n       (seq coll)      (recur (next coll) (dec n) not-found)\n       :else           not-found)))\n\n(defn nth\n  \"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.\"\n  ([coll n]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number\"))\n\n      (nil? coll)\n      coll\n\n      (implements? IIndexed coll)\n      (-nth coll n)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        (throw (js\/Error. \"Index out of bounds\"))\n        (linear-traversal-nth coll n))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll)))))))\n  ([coll n not-found]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number.\"))\n\n      (nil? coll)\n      not-found\n\n      (implements? IIndexed coll)\n      (-nth coll n not-found)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        not-found)\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        not-found)\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        not-found\n        (linear-traversal-nth coll n not-found))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n not-found)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll))))))))\n\n(defn nthrest\n  \"Returns the nth rest of coll, coll when n is 0.\"\n  [coll n]\n    (if (implements? IDrop coll)\n      (if (pos? n)\n        (or (-drop coll (Math\/ceil n)) ())\n        coll)\n      (loop [n n xs coll]\n        (if-let [xs (and (pos? n) (seq xs))]\n          (recur (dec n) (rest xs))\n          xs))))\n\n(defn get\n  \"Returns the value mapped to key, not-found or nil if key not present\n  in associative collection, set, string, array, or ILookup instance.\"\n  ([o k]\n    (when-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k)\n\n        (array? o)\n        (when (and (some? k) (< k (.-length o)))\n          (aget o (int k)))\n\n        (string? o)\n        (when (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k)))\n\n        (native-satisfies? ILookup o)\n        (-lookup o k)\n\n        :else nil)))\n  ([o k not-found]\n    (if-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k not-found)\n\n        (array? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (aget o (int k))\n          not-found)\n\n        (string? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k))\n          not-found)\n\n        (native-satisfies? ILookup o)\n        (-lookup o k not-found)\n\n        :else not-found)\n      not-found)))\n\n(declare PersistentHashMap PersistentArrayMap MapEntry)\n\n(defn assoc\n  \"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed\/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).\"\n  ([coll k v]\n   (if (implements? IAssociative coll)\n     (-assoc coll k v)\n     (if-not (nil? coll)\n       (-assoc coll k v)\n       (array-map k v))))\n  ([coll k v & kvs]\n     (let [ret (assoc coll k v)]\n       (if kvs\n         (recur ret (first kvs) (second kvs) (nnext kvs))\n         ret))))\n\n(defn dissoc\n  \"dissoc[iate]. Returns a new map of the same (hashed\/sorted) type,\n  that does not contain a mapping for key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-dissoc coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (dissoc coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn fn?\n  \"Return true if f is a JavaScript function or satisfies the Fn protocol.\"\n  [f]\n  (or (js-fn? f) (satisfies? Fn f)))\n\n(deftype MetaFn [afn meta]\n  IMeta\n  (-meta [_] meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (MetaFn. afn new-meta))\n  Fn\n  IFn\n  (-invoke [_]\n    (afn))\n  (-invoke [_ a]\n    (afn a))\n  (-invoke [_ a b]\n    (afn a b))\n  (-invoke [_ a b c]\n    (afn a b c))\n  (-invoke [_ a b c d]\n    (afn a b c d))\n  (-invoke [_ a b c d e]\n    (afn a b c d e))\n  (-invoke [_ a b c d e f]\n    (afn a b c d e f))\n  (-invoke [_ a b c d e f g]\n    (afn a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    (afn a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    (afn a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    (afn a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    (afn a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    (afn a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    (afn a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    (afn a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    (afn a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    (afn a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    (afn a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    (afn a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    (afn a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    (afn a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply afn a b c d e f g h i j k l m n o p q r s t rest)))\n\n(defn with-meta\n  \"Returns an object of the same type and value as obj, with\n  map m as its metadata.\"\n  [o meta]\n  (if (js-fn? o)\n    (MetaFn. o meta)\n    (when-not (nil? o)\n      (-with-meta o meta))))\n\n(defn meta\n  \"Returns the metadata of obj, returns nil if there is no metadata.\"\n  [o]\n  (when (and (not (nil? o))\n             (satisfies? IMeta o))\n    (-meta o)))\n\n(defn peek\n  \"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (-peek coll)))\n\n(defn pop\n  \"For a list or queue, returns a new list\/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next\/butlast.\"\n  [coll]\n  (when-not (nil? coll)\n    (-pop coll)))\n\n(defn disj\n  \"disj[oin]. Returns a new set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-disjoin coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (disj coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn empty?\n  \"Returns true if coll has no items. To check the emptiness of a seq,\n  please use the idiom (seq x) rather than (not (empty? x))\"\n  [coll]\n  (cond\n    (nil? coll)\n    true\n\n    (satisfies? ICounted coll)\n    (zero? (-count coll))\n\n    :else\n    (not (seq coll))))\n\n(defn coll?\n  \"Returns true if x satisfies ICollection\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ICollection x)))\n\n(defn set?\n  \"Returns true if x satisfies ISet\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ISet x)))\n\n(defn associative?\n \"Returns true if coll implements IAssociative\"\n  [x] (satisfies? IAssociative x))\n\n(defn ifind?\n \"Returns true if coll implements IFind\"\n  [x] (satisfies? IFind x))\n\n(defn sequential?\n  \"Returns true if coll satisfies ISequential\"\n  [x] (satisfies? ISequential x))\n\n(defn sorted?\n  \"Returns true if coll satisfies ISorted\"\n  [x] (satisfies? ISorted x))\n\n(defn reduceable?\n  \"Returns true if coll satisfies IReduce\"\n  [x] (satisfies? IReduce x))\n\n(defn map?\n  \"Return true if x satisfies IMap\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? IMap x)))\n\n(defn record?\n  \"Return true if x satisfies IRecord\"\n  [x]\n  (satisfies? IRecord x))\n\n(defn vector?\n  \"Return true if x satisfies IVector\"\n  [x] (satisfies? IVector x))\n\n(declare ChunkedCons ChunkedSeq)\n\n(defn chunked-seq?\n  \"Return true if x satisfies IChunkedSeq.\"\n  [x] (implements? IChunkedSeq x))\n\n;;;;;;;;;;;;;;;;;;;; js primitives ;;;;;;;;;;;;\n(defn js-obj\n  \"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.\"\n  ([]\n     (cljs.core\/js-obj))\n  ([& keyvals]\n     (apply gobject\/create keyvals)))\n\n(defn js-keys\n  \"Return the JavaScript keys for an object.\"\n  [obj]\n  (gobject\/getKeys obj))\n\n(defn js-delete\n  \"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.\"\n  [obj key]\n  (cljs.core\/js-delete obj key))\n\n(defn- array-copy\n  ([from i to j len]\n    (loop [i i j j len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (inc i) (inc j) (dec len)))))))\n\n(defn- array-copy-downward\n  ([from i to j len]\n     (loop [i (+ i (dec len)) j (+ j (dec len)) len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (dec i) (dec j) (dec len)))))))\n\n;;;;;;;;;;;;;;;; preds ;;;;;;;;;;;;;;;;;;\n\n(def ^:private lookup-sentinel (js-obj))\n\n(defn ^boolean false?\n  \"Returns true if x is the value false, false otherwise.\"\n  [x] (cljs.core\/false? x))\n\n(defn ^boolean true?\n  \"Returns true if x is the value true, false otherwise.\"\n  [x] (cljs.core\/true? x))\n\n(defn boolean?\n  \"Return true if x is a Boolean\"\n  [x] (or (cljs.core\/true? x) (cljs.core\/false? x)))\n\n(defn ^boolean undefined?\n  \"Returns true if x identical to the JavaScript undefined value.\"\n  [x]\n  (cljs.core\/undefined? x))\n\n(defn seq?\n  \"Return true if s satisfies ISeq\"\n  [s]\n  (if (nil? s)\n    false\n    (satisfies? ISeq s)))\n\n(defn seqable?\n  \"Return true if the seq function is supported for s\"\n  [s]\n  (or\n    (nil? s)\n    (satisfies? ISeqable s)\n    (js-iterable? s)\n    (array? s)\n    (string? s)))\n\n(defn boolean\n  \"Coerce to boolean\"\n  [x]\n  (cond\n    (nil? x) false\n    (false? x) false\n    :else true))\n\n(defn ifn?\n  \"Returns true if f returns true for fn? or satisfies IFn.\"\n  [f]\n  (or (fn? f) (satisfies? IFn f)))\n\n(defn integer?\n  \"Returns true if n is a JavaScript number with no decimal part.\"\n  [n]\n  (and (number? n)\n       (not ^boolean (js\/isNaN n))\n       (not (identical? n js\/Infinity))\n       (== (js\/parseFloat n) (js\/parseInt n 10))))\n\n(def\n  ^{:doc \"INTERNAL: do not use\"}\n  LongImpl goog.math.Long)\n\n(defn int?\n  \"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.\"\n  [x]\n  (or (integer? x)\n      (instance? goog.math.Integer x)\n      (instance? goog.math.Long x)))\n\n(defn pos-int?\n  \"Return true if x satisfies int? and is positive.\"\n  [x]\n  (cond\n    (integer? x) (pos? x)\n\n    (instance? goog.math.Integer x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    (instance? goog.math.Long x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    :else false))\n\n(defn ^boolean neg-int?\n  \"Return true if x satisfies int? and is negative.\"\n  [x]\n  (cond\n    (integer? x) (neg? x)\n\n    (instance? goog.math.Integer x)\n    (.isNegative x)\n\n    (instance? goog.math.Long x)\n    (.isNegative x)\n\n    :else false))\n\n(defn nat-int?\n  \"Return true if x satisfies int? and is a natural integer value.\"\n  [x]\n  (cond\n    (integer? x)\n    (not (neg? x))\n\n    (instance? goog.math.Integer x)\n    (not (.isNegative x))\n\n    (instance? goog.math.Long x)\n    (not (.isNegative x))\n\n    :else false))\n\n(defn float?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn double?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn infinite?\n  \"Returns true for Infinity and -Infinity values.\"\n  [x]\n  (or (identical? x js\/Number.POSITIVE_INFINITY)\n      (identical? x js\/Number.NEGATIVE_INFINITY)))\n\n(defn contains?\n  \"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.\"\n  [coll v]\n  (cond\n    (implements? IAssociative coll)\n    (-contains-key? coll v)\n\n    (native-satisfies? IAssociative coll)\n    (-contains-key? coll v)\n\n    (identical? (get coll v lookup-sentinel) lookup-sentinel)\n    false\n\n    :else\n    true))\n\n(defn find\n  \"Returns the map entry for key, or nil if key not present.\"\n  [coll k]\n  (if (ifind? coll)\n    (-find coll k)\n    (when (and (not (nil? coll))\n            (associative? coll)\n            (contains? coll k))\n      (MapEntry. k (get coll k) nil))))\n\n(defn ^boolean distinct?\n  \"Returns true if no two of the arguments are =\"\n  ([x] true)\n  ([x y] (not (= x y)))\n  ([x y & more]\n     (if (not (= x y))\n     (loop [s #{x y} xs more]\n       (let [x (first xs)\n             etc (next xs)]\n         (if xs\n           (if (contains? s x)\n             false\n             (recur (conj s x) etc))\n           true)))\n     false)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Seq fns ;;;;;;;;;;;;;;;;\n\n(defn ^number compare\n  \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.\"\n  [x y]\n  (cond\n   (identical? x y) 0\n\n   (nil? x) -1\n\n   (nil? y) 1\n\n   (number? x) (if (number? y)\n                 (garray\/defaultCompare x y)\n                 (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))\n\n   (satisfies? IComparable x)\n   (-compare x y)\n\n   :else\n   (if (and (or (string? x) (array? x) (true? x) (false? x))\n            (identical? (type x) (type y)))\n     (garray\/defaultCompare x y)\n     (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n(defn ^:private compare-indexed\n  \"Compare indexed collection.\"\n  ([xs ys]\n     (let [xl (count xs)\n           yl (count ys)]\n       (cond\n        (< xl yl) -1\n        (> xl yl) 1\n        (== xl 0) 0\n        :else (compare-indexed xs ys xl 0))))\n  ([xs ys len n]\n     (let [d (compare (nth xs n) (nth ys n))]\n       (if (and (zero? d) (< (+ n 1) len))\n         (recur xs ys len (inc n))\n         d))))\n\n(defn ^:private fn->comparator\n  \"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.\"\n  [f]\n  (if (= f compare)\n    compare\n    (fn [x y]\n      (let [r (f x y)]\n        (if (number? r)\n          r\n          (if r\n            -1\n            (if (f y x) 1 0)))))))\n\n(declare to-array)\n\n(defn sort\n  \"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([coll]\n   (sort compare coll))\n  ([comp coll]\n   (if (seq coll)\n     (let [a (to-array coll)]\n       ;; matching Clojure's stable sort, though docs don't promise it\n       (garray\/stableSort a (fn->comparator comp))\n       (with-meta (seq a) (meta coll)))\n     ())))\n\n(defn sort-by\n  \"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([keyfn coll]\n   (sort-by keyfn compare coll))\n  ([keyfn comp coll]\n     (sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))\n\n; simple reduce based on seqs, used as default\n(defn- seq-reduce\n  ([f coll]\n    (if-let [s (seq coll)]\n      (reduce f (first s) (next s))\n      (f)))\n  ([f val coll]\n    (loop [val val, coll (seq coll)]\n      (if coll\n        (let [nval (f val (first coll))]\n          (if (reduced? nval)\n            @nval\n            (recur nval (next coll))))\n        val))))\n\n(declare vec)\n\n(defn shuffle\n  \"Return a random permutation of coll\"\n  [coll]\n  (let [a (to-array coll)]\n    (garray\/shuffle a)\n    (vec a)))\n\n(defn- iter-reduce\n  ([coll f]\n   (let [iter (-iterator coll)]\n     (if (.hasNext iter)\n       (let [init (.next iter)]\n         (loop [acc init]\n           (if ^boolean (.hasNext iter)\n             (let [nacc (f acc (.next iter))]\n               (if (reduced? nacc)\n                 @nacc\n                 (recur nacc)))\n             acc)))\n       (f))))\n  ([coll f init]\n   (let [iter (-iterator coll)]\n     (loop [acc init]\n       (if ^boolean (.hasNext iter)\n         (let [nacc (f acc (.next iter))]\n           (if (reduced? nacc)\n             @nacc\n             (recur nacc)))\n         acc)))))\n\n(defn reduce\n  \"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\"\n  ([f coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f)\n\n       (array? coll)\n       (array-reduce coll f)\n\n       (string? coll)\n       (array-reduce coll f)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f)\n\n       (iterable? coll)\n       (iter-reduce coll f)\n\n       :else\n       (seq-reduce f coll)))\n  ([f val coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f val)\n\n       (array? coll)\n       (array-reduce coll f val)\n\n       (string? coll)\n       (array-reduce coll f val)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f val)\n\n       (iterable? coll)\n       (iter-reduce coll f val)\n\n       :else\n       (seq-reduce f val coll))))\n\n(defn reduce-kv\n  \"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.\"\n  ([f init coll]\n    (if (satisfies? IKVReduce coll)\n      (-kv-reduce coll f init)\n      (reduce (fn [ret me]\n                (f ret (-key me) (-val me)))\n        init coll))))\n\n(defn identity\n  \"Returns its argument.\"\n  [x] x)\n\n(defn completing\n  \"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.\"\n  ([f] (completing f identity))\n  ([f cf]\n    (fn\n      ([] (f))\n      ([x] (cf x))\n      ([x y] (f x y)))))\n\n(defn transduce\n  \"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.\"\n  ([xform f coll] (transduce xform f (f) coll))\n  ([xform f init coll]\n     (let [f (xform f)\n           ret (reduce f init coll)]\n       (f ret))))\n\n;;; Math - variadic forms will not work until the following implemented:\n;;; first, next, reduce\n\n(defn ^number +\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/+ x y))\n  ([x y & more]\n    (reduce + (cljs.core\/+ x y) more)))\n\n(defn ^number -\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/- x))\n  ([x y] (cljs.core\/- x y))\n  ([x y & more] (reduce - (cljs.core\/- x y) more)))\n\n(defn ^number *\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/* x y))\n  ([x y & more] (reduce * (cljs.core\/* x y) more)))\n\n(declare divide)\n\n(defn ^number \/\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (\/ 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce \/ (\/ x y) more)))\n\n(defn ^boolean <\n  \"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/< x y))\n  ([x y & more]\n     (if (cljs.core\/< x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (cljs.core\/< y (first more)))\n       false)))\n\n(defn ^boolean <=\n  \"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/<= x y))\n  ([x y & more]\n   (if (cljs.core\/<= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/<= y (first more)))\n     false)))\n\n(defn ^boolean >\n  \"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/> x y))\n  ([x y & more]\n   (if (cljs.core\/> x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/> y (first more)))\n     false)))\n\n(defn ^boolean >=\n  \"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/>= x y))\n  ([x y & more]\n   (if (cljs.core\/>= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/>= y (first more)))\n     false)))\n\n(defn dec\n  \"Returns a number one less than num.\"\n  [x] (- x 1))\n\n(defn ^number abs\n  {:doc \"Returns the absolute value of a.\"\n   :added \"1.11.10\"}\n  [a] (Math\/abs a))\n\n(defn ^number max\n  \"Returns the greatest of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/max x y))\n  ([x y & more]\n   (reduce max (cljs.core\/max x y) more)))\n\n(defn ^number min\n  \"Returns the least of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/min x y))\n  ([x y & more]\n   (reduce min (cljs.core\/min x y) more)))\n\n(defn ^number byte [x] x)\n\n(defn char\n  \"Coerce to char\"\n  [x]\n  (cond\n    (number? x) (.fromCharCode js\/String x)\n    (and (string? x) (== (.-length x) 1)) x\n    :else (throw (js\/Error. \"Argument to char must be a character or number\"))))\n\n(defn ^number short [x] x)\n(defn ^number float [x] x)\n(defn ^number double [x] x)\n\n(defn ^number unchecked-byte [x] x)\n(defn ^number unchecked-char [x] x)\n(defn ^number unchecked-short [x] x)\n(defn ^number unchecked-float [x] x)\n(defn ^number unchecked-double [x] x)\n\n(defn ^number unchecked-add\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add x y))\n  ([x y & more] (reduce unchecked-add (cljs.core\/unchecked-add x y) more)))\n\n(defn ^number unchecked-add-int\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add-int x y))\n  ([x y & more] (reduce unchecked-add-int (cljs.core\/unchecked-add-int x y) more)))\n\n(defn unchecked-dec\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec x))\n\n(defn unchecked-dec-int\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec-int x))\n\n(defn ^number unchecked-divide-int\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (unchecked-divide-int 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce unchecked-divide-int (unchecked-divide-int x y) more)))\n\n(defn unchecked-inc [x]\n  (cljs.core\/unchecked-inc x))\n\n(defn unchecked-inc-int [x]\n  (cljs.core\/unchecked-inc-int x))\n\n(defn ^number unchecked-multiply\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply x y))\n  ([x y & more] (reduce unchecked-multiply (cljs.core\/unchecked-multiply x y) more)))\n\n(defn ^number unchecked-multiply-int\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply-int x y))\n  ([x y & more] (reduce unchecked-multiply-int (cljs.core\/unchecked-multiply-int x y) more)))\n\n(defn unchecked-negate [x]\n  (cljs.core\/unchecked-negate x))\n\n(defn unchecked-negate-int [x]\n  (cljs.core\/unchecked-negate-int x))\n\n(declare mod)\n\n(defn unchecked-remainder-int [x n]\n  (cljs.core\/unchecked-remainder-int x n))\n\n(defn ^number unchecked-subtract\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract x))\n  ([x y] (cljs.core\/unchecked-subtract x y))\n  ([x y & more] (reduce unchecked-subtract (cljs.core\/unchecked-subtract x y) more)))\n\n(defn ^number unchecked-subtract-int\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract-int x))\n  ([x y] (cljs.core\/unchecked-subtract-int x y))\n  ([x y & more] (reduce unchecked-subtract-int (cljs.core\/unchecked-subtract-int x y) more)))\n\n(defn- ^number fix [q]\n  (if (>= q 0)\n    (Math\/floor q)\n    (Math\/ceil q)))\n\n(defn int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (bit-or x 0))\n\n(defn unchecked-int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (fix x))\n\n(defn long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn unchecked-long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn booleans [x] x)\n(defn bytes [x] x)\n(defn chars [x] x)\n(defn shorts [x] x)\n(defn ints [x] x)\n(defn floats [x] x)\n(defn doubles [x] x)\n(defn longs [x] x)\n\n(defn js-mod\n  \"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers\"\n  [n d]\n  (cljs.core\/js-mod n d))\n\n(defn mod\n  \"Modulus of num and div. Truncates toward negative infinity.\"\n  [n d]\n  (js-mod (+ (js-mod n d) d) d))\n\n(defn quot\n  \"quot[ient] of dividing numerator by denominator.\"\n  [n d]\n  (let [rem (js-mod n d)]\n    (fix (\/ (- n rem) d))))\n\n(defn rem\n  \"remainder of dividing numerator by denominator.\"\n  [n d]\n  (let [q (quot n d)]\n    (- n (* d q))))\n\n(defn bit-xor\n  \"Bitwise exclusive or\"\n  ([x y] (cljs.core\/bit-xor x y))\n  ([x y & more]\n     (reduce bit-xor (cljs.core\/bit-xor x y) more)))\n\n(defn bit-and\n  \"Bitwise and\"\n  ([x y] (cljs.core\/bit-and x y))\n  ([x y & more]\n     (reduce bit-and (cljs.core\/bit-and x y) more)))\n\n(defn bit-or\n  \"Bitwise or\"\n  ([x y] (cljs.core\/bit-or x y))\n  ([x y & more]\n     (reduce bit-or (cljs.core\/bit-or x y) more)))\n\n(defn bit-and-not\n  \"Bitwise and with complement\"\n  ([x y] (cljs.core\/bit-and-not x y))\n  ([x y & more]\n     (reduce bit-and-not (cljs.core\/bit-and-not x y) more)))\n\n(defn bit-clear\n  \"Clear bit at index n\"\n  [x n]\n  (cljs.core\/bit-clear x n))\n\n(defn bit-flip\n  \"Flip bit at index n\"\n  [x n]\n  (cljs.core\/bit-flip x n))\n\n(defn bit-not\n  \"Bitwise complement\"\n  [x] (cljs.core\/bit-not x))\n\n(defn bit-set\n  \"Set bit at index n\"\n  [x n]\n  (cljs.core\/bit-set x n))\n\n(defn ^boolean bit-test\n  \"Test bit at index n\"\n  [x n]\n  (cljs.core\/bit-test x n))\n\n(defn bit-shift-left\n  \"Bitwise shift left\"\n  [x n] (cljs.core\/bit-shift-left x n))\n\n(defn bit-shift-right\n  \"Bitwise shift right\"\n  [x n] (cljs.core\/bit-shift-right x n))\n\n(defn bit-shift-right-zero-fill\n  \"DEPRECATED: Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/bit-shift-right-zero-fill x n))\n\n(defn unsigned-bit-shift-right\n  \"Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/unsigned-bit-shift-right x n))\n\n(defn bit-count\n  \"Counts the number of bits set in n\"\n  [v]\n  (let [v (- v (bit-and (bit-shift-right v 1) 0x55555555))\n        v (+ (bit-and v 0x33333333) (bit-and (bit-shift-right v 2) 0x33333333))]\n    (bit-shift-right (* (bit-and (+ v (bit-shift-right v 4)) 0xF0F0F0F) 0x1010101) 24)))\n\n(defn ^boolean ==\n  \"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.\"\n  ([x] true)\n  ([x y] (-equiv x y))\n  ([x y & more]\n   (if (== x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (== y (first more)))\n     false)))\n\n(defn ^boolean pos?\n  \"Returns true if num is greater than zero, else false\"\n  [x] (cljs.core\/pos? x))\n\n(defn ^boolean zero?\n  \"Returns true if num is zero, else false\"\n  [x]\n  (cljs.core\/zero? x))\n\n(defn ^boolean neg?\n  \"Returns true if num is less than zero, else false\"\n  [x] (cljs.core\/neg? x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;\n\n(defn nthnext\n  \"Returns the nth next of coll, (seq coll) when n is 0.\"\n  [coll n]\n  (if (implements? IDrop coll)\n    (if (pos? n)\n      (-drop coll (Math\/ceil n))\n      (seq coll))\n    (loop [n n xs (seq coll)]\n      (if (and xs (pos? n))\n        (recur (dec n) (next xs))\n        xs))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; basics ;;;;;;;;;;;;;;;;;;\n\n(defn str\n  \"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\"\n  ([] \"\")\n  ([x] (if (nil? x)\n         \"\"\n         (.join #js [x] \"\")))\n  ([x & ys]\n    (loop [sb (StringBuffer. (str x)) more ys]\n      (if more\n        (recur (. sb  (append (str (first more)))) (next more))\n        (.toString sb)))))\n\n(defn subs\n  \"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.\"\n  ([s start] ^string (.substring s start))\n  ([s start end] ^string (.substring s start end)))\n\n(declare map name)\n\n(defn- equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n               (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n            (nil? ys) false\n            (= (first xs) (first ys)) (recur (next xs) (next ys))\n            :else false))))))\n\n(defn- hash-coll [coll]\n  (if (seq coll)\n    (loop [res (hash (first coll)) s (next coll)]\n      (if (nil? s)\n        res\n        (recur (hash-combine res (hash (first s))) (next s))))\n    0))\n\n(declare key val)\n\n(defn- hash-imap [m]\n  ;; a la clojure.lang.APersistentMap\n  (loop [h 0 s (seq m)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (bit-xor (hash (key e)) (hash (val e))))\n                    4503599627370496)\n               (next s)))\n      h)))\n\n(defn- hash-iset [s]\n  ;; a la clojure.lang.APersistentSet\n  (loop [h 0 s (seq s)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (hash e)) 4503599627370496)\n               (next s)))\n      h)))\n\n(declare name chunk-first chunk-rest)\n\n(defn- extend-object!\n  \"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached.\"\n  [obj fn-map]\n  (doseq [[key-name f] fn-map]\n    (let [str-name (name key-name)]\n      (gobject\/set obj str-name f)))\n  obj)\n\n;;;;;;;;;;;;;;;; cons ;;;;;;;;;;;;;;;;\n(deftype List [meta first rest count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (List. meta first rest count __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (List. new-meta first rest count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll]\n    (if (== count 1)\n      ()\n      rest))\n\n  INext\n  (-next [coll]\n    (if (== count 1)\n      nil\n      rest))\n\n  IStack\n  (-peek [coll] first)\n  (-pop [coll] (-rest coll))\n\n  ICollection\n  (-conj [coll o] (List. meta o coll (inc count) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ICounted\n  (-count [coll] count)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(defn list?\n  \"Returns true if x implements IList\"\n  [x]\n  (satisfies? IList x))\n\n(es6-iterable List)\n\n(deftype EmptyList [meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (EmptyList. meta))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (EmptyList. new-meta)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] nil)\n  (-rest [coll] ())\n\n  INext\n  (-next [coll] nil)\n\n  IStack\n  (-peek [coll] nil)\n  (-pop [coll] (throw (js\/Error. \"Can't pop empty list\")))\n\n  ICollection\n  (-conj [coll o] (List. meta o nil 1 nil))\n\n  IEmptyableCollection\n  (-empty [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (or (list? other)\n            (sequential? other))\n      (nil? (seq other))\n      false))\n\n  IHash\n  (-hash [coll] empty-ordered-hash)\n\n  ISeqable\n  (-seq [coll] nil)\n\n  ICounted\n  (-count [coll] 0)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(set! (.-EMPTY List) (EmptyList. nil))\n\n(es6-iterable EmptyList)\n\n(defn reversible?\n  \"Returns true if coll satisfies? IReversible.\"\n  [coll]\n  (satisfies? IReversible coll))\n\n(defn ^seq rseq\n  \"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil\"\n  [rev]\n  (-rseq rev))\n\n(defn reverse\n  \"Returns a seq of the items in coll in reverse order. Not lazy.\"\n  [coll]\n  (if (reversible? coll)\n    (or (rseq coll) ())\n    (reduce conj () coll)))\n\n(defn list\n  \"Creates a new list containing the items.\"\n  [& xs]\n  (let [arr (if (and (instance? IndexedSeq xs) (zero? (.-i xs)))\n              (.-arr xs)\n              (let [arr (array)]\n                (loop [^not-native xs xs]\n                  (if-not (nil? xs)\n                    (do\n                      (.push arr (-first xs))\n                      (recur (-next xs)))\n                    arr))))]\n    (loop [i (alength arr) r ()]\n      (if (> i 0)\n        (recur (dec i) (-conj r (aget arr (dec i))))\n        r))))\n\n(deftype Cons [meta first rest ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (Cons. meta first rest __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cons. new-meta first rest __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll] (if (nil? rest) () rest))\n\n  INext\n  (-next [coll]\n    (if (nil? rest) nil (seq rest)))\n\n  ICollection\n  (-conj [coll o] (Cons. nil o coll nil))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable Cons)\n\n(defn cons\n  \"Returns a new seq where x is the first element and coll is the rest.\"\n  [x coll]\n  (cond\n    (nil? coll)             (List. nil x nil 1 nil)\n    (implements? ISeq coll) (Cons. nil x coll nil)\n    :default                (Cons. nil x (seq coll) nil)))\n\n(defn hash-keyword [k]\n  (int (+ (hash-symbol k) 0x9e3779b9)))\n\n(defn- compare-keywords [a b]\n  (cond\n   (identical? (.-fqn a) (.-fqn b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(deftype Keyword [ns name fqn ^:mutable _hash]\n  Object\n  (toString [_] (str \":\" fqn))\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Keyword other)\n      (identical? fqn (.-fqn other))\n      false))\n  IFn\n  (-invoke [kw coll]\n    (get coll kw))\n  (-invoke [kw coll not-found]\n    (get coll kw not-found))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-keyword _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer (str \":\" fqn))))\n\n(defn keyword?\n  \"Return true if x is a Keyword\"\n  [x]\n  (instance? Keyword x))\n\n(defn keyword-identical?\n  \"Efficient test to determine that two keywords are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (keyword? x) (keyword? y))\n      (identical? (.-fqn x) (.-fqn y))\n      false)))\n\n(defn symbol-identical?\n  \"Efficient test to determine that two symbols are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (symbol? x) (symbol? y))\n      (identical? (.-str x) (.-str y))\n      false)))\n\n(defn namespace\n  \"Returns the namespace String of a symbol or keyword, or nil if not present.\"\n  [x]\n  (if (implements? INamed x)\n    (-namespace x)\n    (throw (js\/Error. (str \"Doesn't support namespace: \" x)))))\n\n(defn ident?\n  \"Return true if x is a symbol or keyword\"\n  [x] (or (keyword? x) (symbol? x)))\n\n(defn simple-ident?\n  \"Return true if x is a symbol or keyword without a namespace\"\n  [x] (and (ident? x) (nil? (namespace x))))\n\n(defn qualified-ident?\n  \"Return true if x is a symbol or keyword with a namespace\"\n  [x] (boolean (and (ident? x) (namespace x) true)))\n\n(defn simple-symbol?\n  \"Return true if x is a symbol without a namespace\"\n  [x] (and (symbol? x) (nil? (namespace x))))\n\n(defn qualified-symbol?\n  \"Return true if x is a symbol with a namespace\"\n  [x] (boolean (and (symbol? x) (namespace x) true)))\n\n(defn simple-keyword?\n  \"Return true if x is a keyword without a namespace\"\n  [x] (and (keyword? x) (nil? (namespace x))))\n\n(defn qualified-keyword?\n  \"Return true if x is a keyword with a namespace\"\n  [x] (boolean (and (keyword? x) (namespace x) true)))\n\n(defn keyword\n  \"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.\"\n  ([name] (cond\n            (keyword? name) name\n            (symbol? name) (Keyword.\n                             (cljs.core\/namespace name)\n                             (cljs.core\/name name) (.-str name) nil)\n            (= \"\/\" name) (Keyword. nil name name nil)\n            (string? name) (let [parts (.split name \"\/\")]\n                             (if (== (alength parts) 2)\n                               (Keyword. (aget parts 0) (aget parts 1) name nil)\n                               (Keyword. nil (aget parts 0) name nil)))))\n  ([ns name]\n   (let [ns   (cond\n                (keyword? ns) (cljs.core\/name ns)\n                (symbol? ns)  (cljs.core\/name ns)\n                :else ns)\n         name (cond\n                (keyword? name) (cljs.core\/name name)\n                (symbol? name) (cljs.core\/name name)\n                :else name)]\n     (Keyword. ns name (str (when ns (str ns \"\/\")) name) nil))))\n\n(deftype LazySeq [meta ^:mutable fn ^:mutable s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (sval [coll]\n    (if (nil? fn)\n      s\n      (do\n        (set! s (fn))\n        (set! fn nil)\n        s)))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll]\n    (not fn))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (LazySeq. new-meta #(-seq coll) nil __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (first s)))\n  (-rest [coll]\n    (-seq coll)\n    (if-not (nil? s)\n      (rest s)\n      ()))\n\n  INext\n  (-next [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (next s)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (.sval coll)\n    (when-not (nil? s)\n      (loop [ls s]\n        (if (instance? LazySeq ls)\n          (recur (.sval ls))\n          (do (set! s ls)\n              (seq s))))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable LazySeq)\n\n(declare ArrayChunk)\n\n(deftype ChunkBuffer [^:mutable buf ^:mutable end]\n  Object\n  (add [_ o]\n    (aset buf end o)\n    (set! end (inc end)))\n\n  (chunk [_]\n    (let [ret (ArrayChunk. buf 0 end)]\n      (set! buf nil)\n      ret))\n\n  ICounted\n  (-count [_] end))\n\n(defn chunk-buffer [capacity]\n  (ChunkBuffer. (make-array capacity) 0))\n\n(deftype ArrayChunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [coll i]\n    (aget arr (+ off i)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (== off end)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr off) (inc off)))\n  (-reduce [coll f start]\n    (array-reduce arr f start off)))\n\n(defn array-chunk\n  ([arr]\n     (ArrayChunk. arr 0 (alength arr)))\n  ([arr off]\n     (ArrayChunk. arr off (alength arr)))\n  ([arr off end]\n     (ArrayChunk. arr off end)))\n\n(deftype ChunkedCons [chunk more meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ChunkedCons. chunk more new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ASeq\n  ISeq\n  (-first [coll] (-nth chunk 0))\n  (-rest [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (if (nil? more)\n        ()\n        more)))\n\n  INext\n  (-next [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (when-not (nil? more)\n        (-seq more))))\n\n  IChunkedSeq\n  (-chunked-first [coll] chunk)\n  (-chunked-rest [coll]\n    (if (nil? more)\n      ()\n      more))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (if (nil? more)\n      nil\n      more))\n\n  ICollection\n  (-conj [this o]\n    (cons o this))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash)))\n\n(es6-iterable ChunkedCons)\n\n(defn chunk-cons [chunk rest]\n  (if (zero? (-count chunk))\n    rest\n    (ChunkedCons. chunk rest nil nil)))\n\n(defn chunk-append [b x]\n  (.add b x))\n\n(defn chunk [b]\n  (.chunk b))\n\n(defn chunk-first [s]\n  (-chunked-first s))\n\n(defn chunk-rest [s]\n  (-chunked-rest s))\n\n(defn chunk-next [s]\n  (if (implements? IChunkedNext s)\n    (-chunked-next s)\n    (seq (-chunked-rest s))))\n\n;;;;;;;;;;;;;;;;\n\n(defn to-array\n  \"Returns an array containing the contents of coll.\"\n  [coll]\n  (let [ary (array)]\n    (loop [s (seq coll)]\n      (if-not (nil? s)\n        (do (. ary push (first s))\n            (recur (next s)))\n        ary))))\n\n(defn to-array-2d\n  \"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.\"\n  [coll]\n    (let [ret (make-array (count coll))]\n      (loop [i 0 xs (seq coll)]\n        (when-not (nil? xs)\n          (aset ret i (to-array (first xs)))\n          (recur (inc i) (next xs))))\n      ret))\n\n(defn int-array\n  \"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (int-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn long-array\n  \"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (long-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn double-array\n  \"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (double-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn object-array\n  \"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (object-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn bounded-count\n  \"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq\"\n  {:added \"1.9\"}\n  [n coll]\n  (if (counted? coll)\n    (count coll)\n    (loop [i 0 s (seq coll)]\n      (if (and (not (nil? s)) (< i n))\n        (recur (inc i) (next s))\n        i))))\n\n(defn spread\n  [arglist]\n  (when-not (nil? arglist)\n    (let [n (next arglist)]\n      (if (nil? n)\n        (seq (first arglist))\n        (cons (first arglist)\n              (spread n))))))\n\n(defn concat\n  \"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"\n  ([] (lazy-seq nil))\n  ([x] (lazy-seq x))\n  ([x y]\n    (lazy-seq\n      (let [s (seq x)]\n        (if s\n          (if (chunked-seq? s)\n            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))\n            (cons (first s) (concat (rest s) y)))\n          y))))\n  ([x y & zs]\n     (let [cat (fn cat [xys zs]\n                 (lazy-seq\n                   (let [xys (seq xys)]\n                     (if xys\n                       (if (chunked-seq? xys)\n                         (chunk-cons (chunk-first xys)\n                                     (cat (chunk-rest xys) zs))\n                         (cons (first xys) (cat (rest xys) zs)))\n                       (when zs\n                         (cat (first zs) (next zs)))))))]\n       (cat (concat x y) zs))))\n\n(defn list*\n  \"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.\"\n  ([args] (seq args))\n  ([a args] (cons a args))\n  ([a b args] (cons a (cons b args)))\n  ([a b c args] (cons a (cons b (cons c args))))\n  ([a b c d & more]\n     (cons a (cons b (cons c (cons d (spread more)))))))\n\n\n;;; Transients\n\n(defn transient\n  \"Returns a new, transient version of the collection, in constant time.\"\n  [coll]\n  (-as-transient coll))\n\n(defn persistent!\n  \"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.\"\n  [tcoll]\n  (-persistent! tcoll))\n\n(defn conj!\n  \"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.\"\n  ([] (transient []))\n  ([tcoll] tcoll)\n  ([tcoll val]\n    (-conj! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-conj! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n(defn assoc!\n  \"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.\"\n  ([tcoll key val]\n    (-assoc! tcoll key val))\n  ([tcoll key val & kvs]\n    (let [ntcoll (-assoc! tcoll key val)]\n      (if kvs\n        (recur ntcoll (first kvs) (second kvs) (nnext kvs))\n        ntcoll))))\n\n(defn dissoc!\n  \"Returns a transient map that doesn't contain a mapping for key(s).\"\n  ([tcoll key]\n    (-dissoc! tcoll key))\n  ([tcoll key & ks]\n    (let [ntcoll (-dissoc! tcoll key)]\n      (if ks\n        (recur ntcoll (first ks) (next ks))\n        ntcoll))))\n\n(defn pop!\n  \"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll\"\n  [tcoll]\n  (-pop! tcoll))\n\n(defn disj!\n  \"disj[oin]. Returns a transient set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([tcoll val]\n    (-disjoin! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-disjoin! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; apply ;;;;;;;;;;;;;;;;\n\n;; see core.clj\n(gen-apply-to)\n\n(set! *unchecked-if* true)\n\n(defn- ^seq next*\n  \"Internal. DO NOT USE! Next without the nil? check.\"\n  [coll]\n  (if (implements? INext coll)\n    (-next ^not-native coll)\n    (seq (rest coll))))\n\n(defn- apply-to-simple\n  \"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!\"\n  ([f ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$0 f)\n       (.cljs$core$IFn$_invoke$arity$0 f)\n       (.call f f))\n     (apply-to-simple f (-first args) (next* args))))\n  ([f a0 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$1 f)\n       (.cljs$core$IFn$_invoke$arity$1 f a0)\n       (.call f f a0))\n     (apply-to-simple f a0 (-first args) (next* args))))\n  ([f a0 a1 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$2 f)\n       (.cljs$core$IFn$_invoke$arity$2 f a0 a1)\n       (.call f f a0 a1))\n     (apply-to-simple f a0 a1 (-first args) (next* args))))\n  ([f a0 a1 a2 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$3 f)\n       (.cljs$core$IFn$_invoke$arity$3 f a0 a1 a2)\n       (.call f f a0 a1 a2))\n     (apply-to-simple f a0 a1 a2 (-first args) (next* args))))\n  ([f a0 a1 a2 a3 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$4 f)\n       (.cljs$core$IFn$_invoke$arity$4 f a0 a1 a2 a3)\n       (.call f f a0 a1 a2 a3))\n     (gen-apply-to-simple f 4 args))))\n\n(defn apply\n  \"Applies fn f to the argument list formed by prepending intervening arguments to args.\"\n  ([f args]\n   (if (.-cljs$lang$applyTo f)\n     (let [fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (bounded-count (inc fixed-arity) args)]\n       (if (<= bc fixed-arity)\n         (apply-to f bc args)\n         (.cljs$lang$applyTo f args)))\n     (apply-to-simple f (seq args))))\n  ([f x args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (inc (bounded-count fixed-arity args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x (seq args))))\n  ([f x y args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 2 (bounded-count (dec fixed-arity) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y (seq args))))\n  ([f x y z args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y z args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 3 (bounded-count (- fixed-arity 2) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y z (seq args))))\n  ([f a b c d & args]\n   (if (.-cljs$lang$applyTo f)\n     (let [spread-args (spread args)\n           arglist (cons a (cons b (cons c (cons d spread-args))))\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 4 (bounded-count (- fixed-arity 3) spread-args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f a b c d (spread args)))))\n\n(set! *unchecked-if* false)\n\n;; CLJS-3200: used by destructure macro for maps to reduce amount of repeated code\n;; placed here because it needs apply and hash-map (only declared at this point)\n(defn --destructure-map [gmap]\n  (if (implements? ISeq gmap)\n    (if (next gmap)\n      (.createAsIfByAssoc PersistentArrayMap (to-array gmap))\n      (if (seq gmap)\n        (first gmap)\n        (.-EMPTY PersistentArrayMap)))\n    gmap))\n\n(defn vary-meta\n \"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.\"\n  ([obj f]\n   (with-meta obj (f (meta obj))))\n  ([obj f a]\n   (with-meta obj (f (meta obj) a)))\n  ([obj f a b]\n   (with-meta obj (f (meta obj) a b)))\n  ([obj f a b c]\n   (with-meta obj (f (meta obj) a b c)))\n  ([obj f a b c d]\n   (with-meta obj (f (meta obj) a b c d)))\n  ([obj f a b c d & args]\n   (with-meta obj (apply f (meta obj) a b c d args))))\n\n(defn ^boolean not=\n  \"Same as (not (= obj1 obj2))\"\n  ([x] false)\n  ([x y] (not (= x y)))\n  ([x y & more]\n   (not (apply = x y more))))\n\n(defn not-empty\n  \"If coll is empty, returns nil, else coll\"\n  [coll] (when (seq coll) coll))\n\n(defn nil-iter []\n  (reify\n    Object\n    (hasNext [_] false)\n    (next [_] (js\/Error. \"No such element\"))\n    (remove [_] (js\/Error. \"Unsupported operation\"))))\n\n(deftype StringIter [s ^:mutable i]\n  Object\n  (hasNext [_] (< i (.-length s)))\n  (next [_]\n    (let [ret (.charAt s i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn string-iter [x]\n  (StringIter. x 0))\n\n(deftype ArrayIter [arr ^:mutable i]\n  Object\n  (hasNext [_] (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn array-iter [x]\n  (ArrayIter. x 0))\n\n(def INIT #js {})\n(def START #js {})\n\n(deftype SeqIter [^:mutable _seq ^:mutable _next]\n  Object\n  (hasNext [_]\n    (if (identical? _seq INIT)\n      (do\n        (set! _seq START)\n        (set! _next (seq _next)))\n      (if (identical? _seq _next)\n        (set! _next (next _seq))))\n    (not (nil? _next)))\n  (next [this]\n    (if-not ^boolean (.hasNext this)\n      (throw (js\/Error. \"No such element\"))\n      (do\n        (set! _seq _next)\n        (first _next))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn seq-iter [coll]\n  (SeqIter. INIT coll))\n\n(defn iter [coll]\n  (cond\n    (iterable? coll) (-iterator coll)\n    (nil? coll) (nil-iter)\n    (string? coll) (string-iter coll)\n    (array? coll) (array-iter coll)\n    (seqable? coll) (seq-iter coll)\n    :else (throw (js\/Error. (str \"Cannot create iterator from \" coll)))))\n\n(deftype Many [vals]\n  Object\n  (add [this o]\n    (.push vals o)\n    this)\n  (remove [this]\n    (.shift vals))\n  (isEmpty [this]\n    (zero? (.-length vals)))\n  (toString [this]\n    (str \"Many: \" vals)))\n\n(def ^:private NONE #js {})\n\n(deftype Single [^:mutable val]\n  Object\n  (add [this o]\n    (if (identical? val NONE)\n      (do\n        (set! val o)\n        this)\n      (Many. #js [val o])))\n  (remove [this]\n    (if (identical? val NONE)\n      (throw (js\/Error. (str \"Removing object from empty buffer\")))\n      (let [ret val]\n        (set! val NONE)\n        ret)))\n  (isEmpty [this]\n    (identical? val NONE))\n  (toString [this]\n    (str \"Single: \" val)))\n\n(deftype Empty []\n  Object\n  (add [this o]\n    (Single. o))\n  (remove [this]\n    (throw (js\/Error. (str \"Removing object from empty buffer\"))))\n  (isEmpty [this]\n    true)\n  (toString [this]\n    \"Empty\"))\n\n(def ^:private EMPTY (Empty.))\n\n(deftype MultiIterator [iters]\n  Object\n  (hasNext [_]\n    (loop [iters (seq iters)]\n      (if-not (nil? iters)\n        (let [iter (first iters)]\n          (if-not ^boolean (.hasNext iter)\n            false\n            (recur (next iters))))\n        true)))\n  (next [_]\n    (let [nexts (array)]\n      (dotimes [i (alength iters)]\n        (aset nexts i (.next (aget iters i))))\n      (prim-seq nexts 0))))\n\n(defn- chunkIteratorSeq [iter]\n  (lazy-seq\n    (when ^boolean (.hasNext iter)\n      (let [arr (array)]\n        (loop [n 0]\n          (if (and (.hasNext iter) (< n 32))\n            (do\n              (aset arr n (.next iter))\n              (recur (inc n)))\n            (chunk-cons (array-chunk arr 0 n) (chunkIteratorSeq iter))))))))\n\n(deftype TransformerIterator [^:mutable buffer ^:mutable _next ^:mutable completed ^:mutable xf sourceIter multi]\n  Object\n  (step [this]\n    (if-not (identical? _next NONE)\n      true\n      (loop []\n        (if (identical? _next NONE)\n          (if ^boolean (.isEmpty buffer)\n            (if ^boolean completed\n              false\n              (if ^boolean (.hasNext sourceIter)\n                (let [iter (if ^boolean multi\n                             (apply xf (cons nil (.next sourceIter)))\n                             (xf nil (.next sourceIter)))]\n                  (when (reduced? iter)\n                    (xf nil)\n                    (set! completed true))\n                  (recur))\n                (do\n                  (xf nil)\n                  (set! completed true)\n                  (recur))))\n            (do\n              (set! _next (.remove buffer))\n              (recur)))\n          true))))\n  (hasNext [this]\n    (.step this))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (let [ret _next]\n        (set! _next NONE)\n        ret)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_]\n    (js\/Error. \"Unsupported operation\")))\n\n(es6-iterable TransformerIterator)\n\n(defn transformer-iterator\n  [xform sourceIter multi]\n  (let [iterator (TransformerIterator. EMPTY NONE false nil sourceIter multi)]\n    (set! (.-xf iterator)\n      (xform (fn\n               ([] nil)\n               ([acc] acc)\n               ([acc o]\n                (set! (.-buffer iterator) (.add (.-buffer iterator) o))\n                acc))))\n    iterator))\n\n(set! (.-create TransformerIterator)\n  (fn [xform source]\n    (transformer-iterator xform source false)))\n\n(set! (.-createMulti TransformerIterator)\n  (fn [xform sources]\n    (transformer-iterator xform (MultiIterator. (to-array sources)) true)))\n\n(defn sequence\n  \"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments\"\n  ([coll]\n     (if (seq? coll)\n       coll\n       (or (seq coll) ())))\n  ([xform coll]\n   (or (chunkIteratorSeq\n         (.create TransformerIterator xform (iter coll)))\n       ()))\n  ([xform coll & colls]\n   (or (chunkIteratorSeq\n         (.createMulti TransformerIterator xform (map iter (cons coll colls))))\n       ())))\n\n(defn every?\n  \"Returns true if (pred x) is logical true for every x in coll, else\n  false.\"\n  [pred coll]\n  (cond\n   (nil? (seq coll)) true\n   (pred (first coll)) (recur pred (next coll))\n   :else false))\n\n(defn not-every?\n  \"Returns false if (pred x) is logical true for every x in\n  coll, else true.\"\n  [pred coll] (not (every? pred coll)))\n\n(defn some\n  \"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)\"\n  [pred coll]\n  (when-let [s (seq coll)]\n    (or (pred (first s)) (recur pred (next s)))))\n\n(defn not-any?\n  \"Returns false if (pred x) is logical true for any x in coll,\n  else true.\"\n  [pred coll] (not (some pred coll)))\n\n(defn even?\n  \"Returns true if n is even, throws an exception if n is not an integer\"\n   [n] (if (integer? n)\n        (zero? (bit-and n 1))\n        (throw (js\/Error. (str \"Argument must be an integer: \" n)))))\n\n(defn odd?\n  \"Returns true if n is odd, throws an exception if n is not an integer\"\n  [n] (not (even? n)))\n\n(defn complement\n  \"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.\"\n  [f]\n  (fn\n    ([] (not (f)))\n    ([x] (not (f x)))\n    ([x y] (not (f x y)))\n    ([x y & zs] (not (apply f x y zs)))))\n\n(defn constantly\n  \"Returns a function that takes any number of arguments and returns x.\"\n  [x] (fn [& args] x))\n\n(defn comp\n  \"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.\"\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))\n\n(defn partial\n  \"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.\"\n  ([f] f)\n  ([f arg1]\n   (fn\n     ([] (f arg1))\n     ([x] (f arg1 x))\n     ([x y] (f arg1 x y))\n     ([x y z] (f arg1 x y z))\n     ([x y z & args] (apply f arg1 x y z args))))\n  ([f arg1 arg2]\n   (fn\n     ([] (f arg1 arg2))\n     ([x] (f arg1 arg2 x))\n     ([x y] (f arg1 arg2 x y))\n     ([x y z] (f arg1 arg2 x y z))\n     ([x y z & args] (apply f arg1 arg2 x y z args))))\n  ([f arg1 arg2 arg3]\n   (fn\n     ([] (f arg1 arg2 arg3))\n     ([x] (f arg1 arg2 arg3 x))\n     ([x y] (f arg1 arg2 arg3 x y))\n     ([x y z] (f arg1 arg2 arg3 x y z))\n     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))\n  ([f arg1 arg2 arg3 & more]\n   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))\n\n(defn fnil\n  \"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.\"\n  ([f x]\n   (fn\n     ([a] (f (if (nil? a) x a)))\n     ([a b] (f (if (nil? a) x a) b))\n     ([a b c] (f (if (nil? a) x a) b c))\n     ([a b c & ds] (apply f (if (nil? a) x a) b c ds))))\n  ([f x y]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))\n  ([f x y z]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))\n\n(declare volatile!)\n\n(defn map-indexed\n  \"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (let [i (volatile! -1)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (rf result (f (vswap! i inc) input)))))))\n  ([f coll]\n    (letfn [(mapi [idx coll]\n              (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (chunk-append b (f (+ idx i) (-nth c i))))\n                      (chunk-cons (chunk b) (mapi (+ idx size) (chunk-rest s))))\n                    (cons (f idx (first s)) (mapi (inc idx) (rest s)))))))]\n      (mapi 0 coll))))\n\n(defn keep\n  \"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.\"\n  ([f]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result input]\n          (let [v (f input)]\n            (if (nil? v)\n              result\n              (rf result v)))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n            (let [x (f (-nth c i))]\n              (when-not (nil? x)\n                (chunk-append b x))))\n          (chunk-cons (chunk b) (keep f (chunk-rest s))))\n        (let [x (f (first s))]\n          (if (nil? x)\n            (keep f (rest s))\n            (cons x (keep f (rest s))))))))))\n\n;; =============================================================================\n;; Atom\n\n(deftype Atom [state meta validator watches]\n  Object\n  (equiv [this other]\n    (-equiv this other))\n\n  IAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] state)\n\n  IMeta\n  (-meta [_] meta)\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (set! (.-watches this) (assoc watches key f))\n    this)\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn atom\n  \"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.\"\n  ([x] (Atom. x nil nil nil))\n  ([x & {:keys [meta validator]}] (Atom. x meta validator nil)))\n\n(declare pr-str)\n\n(defn reset!\n  \"Sets the value of atom to newval without regard for the\n  current value. Returns new-value.\"\n  [a new-value]\n  (if (instance? Atom a)\n    (let [validate (.-validator a)]\n      (when-not (nil? validate)\n        (when-not (validate new-value)\n          (throw (js\/Error. \"Validator rejected reference state\"))))\n      (let [old-value (.-state a)]\n        (set! (.-state a) new-value)\n        (when-not (nil? (.-watches a))\n          (-notify-watches a old-value new-value))\n        new-value))\n    (-reset! a new-value)))\n\n(defn reset-vals!\n  \"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.\"\n  {:added \"1.9\"}\n  [a new-value]\n  (if (instance? Atom a)\n    (let [validate (.-validator a)]\n      (when-not (nil? validate)\n        (when-not (validate new-value)\n          (throw (js\/Error. \"Validator rejected reference state\"))))\n      (let [old-value (.-state a)]\n        (set! (.-state a) new-value)\n        (when-not (nil? (.-watches a))\n          (-notify-watches a old-value new-value))\n        [old-value new-value]))\n    [(-deref a) (-reset! a new-value)]))\n\n(defn swap!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.\"\n  ([a f]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a)))\n     (-swap! a f)))\n  ([a f x]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x))\n     (-swap! a f x)))\n  ([a f x y]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x y))\n     (-swap! a f x y)))\n  ([a f x y & more]\n   (if (instance? Atom a)\n     (reset! a (apply f (.-state a) x y more))\n     (-swap! a f x y more))))\n\n(defn swap-vals!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.\"\n  {:added \"1.9\"}\n  ([a f]\n   (if (instance? Atom a)\n     (reset-vals! a (f (.-state a)))\n     [(-deref a) (-swap! a f)]))\n  ([a f x]\n   (if (instance? Atom a)\n     (reset-vals! a (f (.-state a) x))\n     [(-deref a) (-swap! a f x)]))\n  ([a f x y]\n   (if (instance? Atom a)\n     (reset-vals! a (f (.-state a) x y))\n     [(-deref a) (-swap! a f x y)]))\n  ([a f x y & more]\n   (if (instance? Atom a)\n     (reset-vals! a (apply f (.-state a) x y more))\n     [(-deref a) (-swap! a f x y more)])))\n\n(defn compare-and-set!\n  \"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.\"\n  [^not-native a oldval newval]\n  (if (= (-deref a) oldval)\n    (do (reset! a newval) true)\n    false))\n\n(defn set-validator!\n  \"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.\"\n  [iref val]\n  (when (and (some? val)\n             (not (val (-deref iref))))\n    (throw (js\/Error. \"Validator rejected reference state\")))\n  (set! (.-validator iref) val))\n\n(defn get-validator\n  \"Gets the validator-fn for a var\/ref\/agent\/atom.\"\n  [iref]\n  (.-validator iref))\n\n(deftype Volatile [^:mutable state]\n  IVolatile\n  (-vreset! [_ new-state]\n    (set! state new-state))\n\n  IDeref\n  (-deref [_] state))\n\n(defn volatile!\n  \"Creates and returns a Volatile with an initial value of val.\"\n  [val]\n  (Volatile. val))\n\n(defn volatile?\n  \"Returns true if x is a volatile.\"\n  [x] (instance? Volatile x))\n\n(defn vreset!\n  \"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.\"\n  [vol newval]  (-vreset! vol newval))\n\n(defn keep-indexed\n  \"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.\"\n  ([f]\n   (fn [rf]\n     (let [ia (volatile! -1)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [i (vswap! ia inc)\n                  v (f i input)]\n              (if (nil? v)\n                result\n                (rf result v))))))))\n  ([f coll]\n     (letfn [(keepi [idx coll]\n               (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (let [x (f (+ idx i) (-nth c i))]\n                          (when-not (nil? x)\n                            (chunk-append b x))))\n                      (chunk-cons (chunk b) (keepi (+ idx size) (chunk-rest s))))\n                    (let [x (f idx (first s))]\n                      (if (nil? x)\n                        (keepi (inc idx) (rest s))\n                        (cons x (keepi (inc idx) (rest s)))))))))]\n       (keepi 0 coll))))\n\n(defn every-pred\n  \"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.\"\n  ([p]\n     (fn ep1\n       ([] true)\n       ([x] (boolean (p x)))\n       ([x y] (boolean (and (p x) (p y))))\n       ([x y z] (boolean (and (p x) (p y) (p z))))\n       ([x y z & args] (boolean (and (ep1 x y z)\n                                     (every? p args))))))\n  ([p1 p2]\n     (fn ep2\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z))))\n       ([x y z & args] (boolean (and (ep2 x y z)\n                                     (every? #(and (p1 %) (p2 %)) args))))))\n  ([p1 p2 p3]\n     (fn ep3\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x) (p3 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y) (p3 x) (p3 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z) (p3 x) (p3 y) (p3 z))))\n       ([x y z & args] (boolean (and (ep3 x y z)\n                                     (every? #(and (p1 %) (p2 %) (p3 %)) args))))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn epn\n         ([] true)\n         ([x] (every? #(% x) ps))\n         ([x y] (every? #(and (% x) (% y)) ps))\n         ([x y z] (every? #(and (% x) (% y) (% z)) ps))\n         ([x y z & args] (boolean (and (epn x y z)\n                                       (every? #(every? % args) ps))))))))\n\n(defn some-fn\n  \"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.\"\n  ([p]\n     (fn sp1\n       ([] nil)\n       ([x] (p x))\n       ([x y] (or (p x) (p y)))\n       ([x y z] (or (p x) (p y) (p z)))\n       ([x y z & args] (or (sp1 x y z)\n                           (some p args)))))\n  ([p1 p2]\n     (fn sp2\n       ([] nil)\n       ([x] (or (p1 x) (p2 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))\n       ([x y z & args] (or (sp2 x y z)\n                           (some #(or (p1 %) (p2 %)) args)))))\n  ([p1 p2 p3]\n     (fn sp3\n       ([] nil)\n       ([x] (or (p1 x) (p2 x) (p3 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y) (p3 x) (p3 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z) (p3 x) (p3 y) (p3 z)))\n       ([x y z & args] (or (sp3 x y z)\n                           (some #(or (p1 %) (p2 %) (p3 %)) args)))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn spn\n         ([] nil)\n         ([x] (some #(% x) ps))\n         ([x y] (some #(or (% x) (% y)) ps))\n         ([x y z] (some #(or (% x) (% y) (% z)) ps))\n         ([x y z & args] (or (spn x y z)\n                             (some #(some % args) ps)))))))\n\n(defn map\n  \"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (rf result (f input)))\n        ([result input & inputs]\n           (rf result (apply f input inputs))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (chunk-append b (f (-nth c i))))\n          (chunk-cons (chunk b) (map f (chunk-rest s))))\n        (cons (f (first s)) (map f (rest s)))))))\n  ([f c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (f (first s1) (first s2))\n              (map f (rest s1) (rest s2)))))))\n  ([f c1 c2 c3]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]\n      (when (and  s1 s2 s3)\n        (cons (f (first s1) (first s2) (first s3))\n              (map f (rest s1) (rest s2) (rest s3)))))))\n  ([f c1 c2 c3 & colls]\n   (let [step (fn step [cs]\n                 (lazy-seq\n                  (let [ss (map seq cs)]\n                    (when (every? identity ss)\n                      (cons (map first ss) (step (map rest ss)))))))]\n     (map #(apply f %) (step (conj colls c3 c2 c1))))))\n\n(defn take\n  \"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na\n                    nn (vswap! na dec)\n                    result (if (pos? n)\n                             (rf result input)\n                             result)]\n                (if (not (pos? nn))\n                  (ensure-reduced result)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when (pos? n)\n         (when-let [s (seq coll)]\n           (cons (first s) (take (dec n) (rest s))))))))\n\n(defn drop\n  \"Returns a laziness-preserving sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na]\n                (vswap! na dec)\n                (if (pos? n)\n                  result\n                  (rf result input))))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (if (implements? IDrop coll)\n       (or\n         (if (pos? n)\n           (-drop coll (Math\/ceil n))\n           (seq coll))\n         ())\n       (let [step (fn [n coll]\n                    (let [s (seq coll)]\n                      (if (and (pos? n) s)\n                        (recur (dec n) (rest s))\n                        s)))]\n         (lazy-seq (step n coll))))))\n\n(defn drop-last\n  \"Return a lazy sequence of all but the last n (default 1) items in coll\"\n  ([s] (drop-last 1 s))\n  ([n s] (map (fn [x _] x) s (drop n s))))\n\n(defn take-last\n  \"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.\"\n  [n coll]\n  (loop [s (seq coll), lead (seq (drop n coll))]\n    (if lead\n      (recur (next s) (next lead))\n      s)))\n\n(defn drop-while\n  \"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (let [da (volatile! true)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [drop? @da]\n                (if (and drop? (pred input))\n                  result\n                  (do\n                    (vreset! da nil)\n                    (rf result input)))))))))\n  ([pred coll]\n     (let [step (fn [pred coll]\n                  (let [s (seq coll)]\n                    (if (and s (pred (first s)))\n                      (recur pred (rest s))\n                      s)))]\n       (lazy-seq (step pred coll)))))\n\n(deftype Cycle [meta all prev ^:mutable current ^:mutable _next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (currentval [coll]\n    (when-not ^seq current\n      (if-let [c (next prev)]\n        (set! current c)\n        (set! current all)))\n    current)\n\n  IPending\n  (-realized? [coll]\n    (some? current))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cycle. new-meta all prev current _next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (first (.currentval coll)))\n  (-rest [coll]\n    (when (nil? _next)\n      (set! _next (Cycle. nil all (.currentval coll) nil nil)))\n    _next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f]\n    (loop [s (.currentval coll) ret (first s)]\n      (let [s   (or (next s) all)\n            ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur s ret)))))\n  (-reduce [coll f start]\n    (loop [s (.currentval coll) ret start]\n      (let [ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur (or (next s) all) ret))))))\n\n(defn cycle\n  \"Returns a lazy (infinite!) sequence of repetitions of the items in coll.\"\n  [coll] (if-let [vals (seq coll)]\n           (Cycle. nil vals nil vals nil)\n           (.-EMPTY List)))\n\n(defn split-at\n  \"Returns a vector of [(take n coll) (drop n coll)]\"\n  [n coll]\n  [(take n coll) (drop n coll)])\n\n(deftype Repeat [meta count val ^:mutable next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll] false)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Repeat. new-meta count val next nil)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    val)\n  (-rest [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          ()))\n      next))\n\n  INext\n  (-next [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          nil))\n      next))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IDrop\n  (-drop [coll n]\n    (if (== count -1)\n      coll\n      (let [dropped-count (- count n)]\n        (when (pos? dropped-count)\n          (Repeat. nil dropped-count val nil nil)))))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IReduce\n  (-reduce [coll f]\n    (if (== count -1)\n      (loop [ret (f val val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 1 ret val]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret))))\n  (-reduce [coll f start]\n    (if (== count -1)\n      (loop [ret (f start val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 0 ret start]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret)))))\n\n(defn repeat\n  \"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"\n  ([x] (Repeat. nil -1 x nil nil))\n  ([n x] (if (pos? n)\n           (Repeat. nil n x nil nil)\n           (.-EMPTY List))))\n\n(defn replicate\n  \"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs.\"\n  [n x] (take n (repeat x)))\n\n(defn repeatedly\n  \"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it\"\n  ([f] (lazy-seq (cons (f) (repeatedly f))))\n  ([n f] (take n (repeatedly f))))\n\n(def ^:private UNREALIZED-SEED #js {})\n\n(deftype Iterate [meta f prev-seed ^:mutable seed ^:mutable next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPending\n  (-realized? [coll]\n    (not (identical? seed UNREALIZED-SEED)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Iterate. new-meta f prev-seed seed next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (when (identical? UNREALIZED-SEED seed)\n      (set! seed (f prev-seed)))\n    seed)\n  (-rest [coll]\n    (when (nil? next)\n      (set! next (Iterate. nil f (-first coll) UNREALIZED-SEED nil)))\n    next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll rf]\n    (let [first (-first coll)\n          v     (f first)]\n      (loop [ret (rf first v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v))))))\n  (-reduce [coll rf start]\n    (let [v (-first coll)]\n      (loop [ret (rf start v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v)))))))\n\n(defn iterate\n  \"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"\n  {:added \"1.0\"}\n  [f x] (Iterate. nil f nil x nil))\n\n(defn interleave\n  \"Returns a lazy seq of the first item in each coll, then the second etc.\"\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (interleave (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleave (map rest ss))))))))\n\n(defn interpose\n  \"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.\"\n  ([sep]\n    (fn [rf]\n      (let [started (volatile! false)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if @started\n              (let [sepr (rf result sep)]\n                (if (reduced? sepr)\n                  sepr\n                  (rf sepr input)))\n              (do\n                (vreset! started true)\n                (rf result input))))))))\n  ([sep coll] (drop 1 (interleave (repeat sep) coll))))\n\n\n\n(defn- flatten1\n  \"Take a collection of collections, and return a lazy seq\n  of items from the inner collection\"\n  [colls]\n  (let [cat (fn cat [coll colls]\n              (lazy-seq\n                (if-let [coll (seq coll)]\n                  (cons (first coll) (cat (rest coll) colls))\n                  (when (seq colls)\n                    (cat (first colls) (rest colls))))))]\n    (cat nil colls)))\n\n(declare cat)\n\n(defn mapcat\n  \"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided\"\n  {:added \"1.0\"\n   :static true}\n  ([f] (comp (map f) cat))\n  ([f & colls]\n     (apply concat (apply map f colls))))\n\n(defn filter\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (if (pred input)\n             (rf result input)\n             result)))))\n  ([pred coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (when (pred (-nth c i))\n                (chunk-append b (-nth c i))))\n          (chunk-cons (chunk b) (filter pred (chunk-rest s))))\n        (let [f (first s) r (rest s)]\n          (if (pred f)\n            (cons f (filter pred r))\n            (filter pred r))))))))\n\n(defn remove\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred] (filter (complement pred)))\n  ([pred coll]\n     (filter (complement pred) coll)))\n\n(defn tree-seq\n  \"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.\"\n   [branch? children root]\n   (let [walk (fn walk [node]\n                (lazy-seq\n                 (cons node\n                  (when (branch? node)\n                    (mapcat walk (children node))))))]\n     (walk root)))\n\n(defn flatten\n  \"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.\"\n  [x]\n  (filter #(not (sequential? %))\n          (rest (tree-seq sequential? seq x))))\n\n(defn into\n  \"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.\"\n  ([] [])\n  ([to] to)\n  ([to from]\n     (if-not (nil? to)\n       (if (implements? IEditableCollection to)\n         (-with-meta (persistent! (reduce -conj! (transient to) from)) (meta to))\n         (reduce -conj to from))\n       (reduce conj to from)))\n  ([to xform from]\n     (if (implements? IEditableCollection to)\n       (let [tm (meta to)\n             rf (fn\n                  ([coll] (-> (persistent! coll) (-with-meta tm)))\n                  ([coll v] (conj! coll v)))]\n         (transduce xform rf (transient to) from))\n       (transduce xform conj to from))))\n\n(defn mapv\n  \"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.\"\n  ([f coll]\n     (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll)\n         persistent!))\n  ([f c1 c2]\n     (into [] (map f c1 c2)))\n  ([f c1 c2 c3]\n     (into [] (map f c1 c2 c3)))\n  ([f c1 c2 c3 & colls]\n     (into [] (apply map f c1 c2 c3 colls))))\n\n(defn filterv\n  \"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\"\n  [pred coll]\n  (-> (reduce (fn [v o] (if (pred o) (conj! v o) v))\n              (transient [])\n              coll)\n      persistent!))\n\n(defn partition\n  \"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.\"\n  ([n coll]\n     (partition n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (when (== n (count p))\n             (cons p (partition n step (drop step s))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (if (== n (count p))\n             (cons p (partition n step pad (drop step s)))\n             (list (take n (concat p pad)))))))))\n\n(defn get-in\n  \"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.\"\n  {:added \"1.2\"\n   :static true}\n  ([m ks]\n   (loop [m m\n          ks (seq ks)]\n     (if (nil? ks)\n       m\n       (recur (get m (first ks))\n         (next ks)))))\n  ([m ks not-found]\n     (loop [sentinel lookup-sentinel\n            m m\n            ks (seq ks)]\n       (if-not (nil? ks)\n         (let [m (get m (first ks) sentinel)]\n           (if (identical? sentinel m)\n             not-found\n             (recur sentinel m (next ks))))\n         m))))\n\n(defn assoc-in\n  \"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.\"\n  [m [k & ks] v]\n  (if ks\n    (assoc m k (assoc-in (get m k) ks v))\n    (assoc m k v)))\n\n(defn update-in\n  \"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.\"\n  ([m [k & ks] f]\n   (if ks\n     (assoc m k (update-in (get m k) ks f))\n     (assoc m k (f (get m k)))))\n  ([m [k & ks] f a]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a))\n     (assoc m k (f (get m k) a))))\n  ([m [k & ks] f a b]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b))\n     (assoc m k (f (get m k) a b))))\n  ([m [k & ks] f a b c]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b c))\n     (assoc m k (f (get m k) a b c))))\n  ([m [k & ks] f a b c & args]\n   (if ks\n     (assoc m k (apply update-in (get m k) ks f a b c args))\n     (assoc m k (apply f (get m k) a b c args)))))\n\n(defn update\n  \"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.\"\n  ([m k f]\n   (assoc m k (f (get m k))))\n  ([m k f x]\n   (assoc m k (f (get m k) x)))\n  ([m k f x y]\n   (assoc m k (f (get m k) x y)))\n  ([m k f x y z]\n   (assoc m k (f (get m k) x y z)))\n  ([m k f x y z & more]\n   (assoc m k (apply f (get m k) x y z more))))\n\n;;; PersistentVector\n\n(deftype VectorNode [edit arr])\n\n(defn- pv-fresh-node [edit]\n  (VectorNode. edit (make-array 32)))\n\n(defn- pv-aget [node idx]\n  (aget (.-arr node) idx))\n\n(defn- pv-aset [node idx val]\n  (aset (.-arr node) idx val))\n\n(defn- pv-clone-node [node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn- tail-off [pv]\n  (let [cnt (.-cnt pv)]\n    (if (< cnt 32)\n      0\n      (bit-shift-left (bit-shift-right-zero-fill (dec cnt) 5) 5))))\n\n(defn- new-path [edit level node]\n  (loop [ll level\n         ret node]\n    (if (zero? ll)\n      ret\n      (let [embed ret\n            r (pv-fresh-node edit)\n            _ (pv-aset r 0 embed)]\n        (recur (- ll 5) r)))))\n\n(defn- push-tail [pv level parent tailnode]\n  (let [ret (pv-clone-node parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]\n    (if (== 5 level)\n      (do\n        (pv-aset ret subidx tailnode)\n        ret)\n      (let [child (pv-aget parent subidx)]\n        (if-not (nil? child)\n          (let [node-to-insert (push-tail pv (- level 5) child tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret)\n          (let [node-to-insert (new-path nil (- level 5) tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret))))))\n\n(defn- vector-index-out-of-bounds [i cnt]\n  (throw (js\/Error. (str \"No item \" i \" in vector of length \" cnt))))\n\n(defn- first-array-for-longvec [pv]\n  ;; invariants: (count pv) > 32.\n  (loop [node (.-root pv)\n         level (.-shift pv)]\n    (if (pos? level)\n      (recur (pv-aget node 0) (- level 5))\n      (.-arr node))))\n\n(defn- unchecked-array-for [pv i]\n  ;; invariant: i is a valid index of pv (use array-for if unknown).\n  (if (>= i (tail-off pv))\n      (.-tail pv)\n      (loop [node (.-root pv)\n             level (.-shift pv)]\n        (if (pos? level)\n          (recur (pv-aget node (bit-and (bit-shift-right-zero-fill i level) 0x01f))\n                 (- level 5))\n          (.-arr node)))))\n\n(defn- array-for [pv i]\n  (if (and (<= 0 i) (< i (.-cnt pv)))\n    (unchecked-array-for pv i)\n    (vector-index-out-of-bounds i (.-cnt pv))))\n\n(defn- do-assoc [pv level node i val]\n  (let [ret (pv-clone-node node)]\n    (if (zero? level)\n      (do\n        (pv-aset ret (bit-and i 0x01f) val)\n        ret)\n      (let [subidx (bit-and (bit-shift-right-zero-fill i level) 0x01f)]\n        (pv-aset ret subidx (do-assoc pv (- level 5) (pv-aget node subidx) i val))\n        ret))))\n\n(defn- pop-tail [pv level node]\n  (let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]\n    (cond\n     (> level 5) (let [new-child (pop-tail pv (- level 5) (pv-aget node subidx))]\n                   (if (and (nil? new-child) (zero? subidx))\n                     nil\n                     (let [ret (pv-clone-node node)]\n                       (pv-aset ret subidx new-child)\n                       ret)))\n     (zero? subidx) nil\n     :else (let [ret (pv-clone-node node)]\n             (pv-aset ret subidx nil)\n             ret))))\n\n(deftype RangedIterator [^:mutable i ^:mutable base ^:mutable arr v start end]\n  Object\n  (hasNext [this]\n    (< i end))\n  (next [this]\n    (when (== (- i base) 32)\n      (set! arr (unchecked-array-for v i))\n      (set! base (+ base 32)))\n    (let [ret (aget arr (bit-and i 0x01f))]\n      (set! i (inc i))\n      ret)))\n\n(defn ranged-iterator [v start end]\n  (let [i start]\n    (RangedIterator. i (- i (js-mod i 32))\n      (when (< start (count v))\n        (unchecked-array-for v i))\n      v start end)))\n\n(defn- pv-reduce\n  ([pv f start end]\n   (if (< start end)\n     (pv-reduce pv f (nth pv start) (inc start) end)\n     (f)))\n  ([pv f init start end]\n   (loop [acc init i start arr (unchecked-array-for pv start)]\n     (if (< i end)\n       (let [j (bit-and i 0x01f)\n             arr (if (zero? j) (unchecked-array-for pv i) arr)\n             nacc (f acc (aget arr j))]\n         (if (reduced? nacc)\n           @nacc\n           (recur nacc (inc i) arr)))\n       acc))))\n\n(declare tv-editable-root tv-editable-tail TransientVector\n         pr-sequential-writer pr-writer chunked-seq)\n\n(defprotocol APersistentVector\n  \"Marker protocol\")\n\n(deftype PersistentVector [meta cnt shift root tail ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (PersistentVector. meta cnt shift root tail __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentVector. new-meta cnt shift root tail __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when (> cnt 0)\n      (-nth coll (dec cnt))))\n  (-pop [coll]\n    (cond\n     (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n     (== 1 cnt) (-with-meta (.-EMPTY PersistentVector) meta)\n     (< 1 (- cnt (tail-off coll)))\n      (PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)\n      :else (let [new-tail (unchecked-array-for coll (- cnt 2))\n                  nr (pop-tail coll shift root)\n                  new-root (if (nil? nr) (.-EMPTY-NODE PersistentVector) nr)\n                  cnt-1 (dec cnt)]\n              (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n                (PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)\n                (PersistentVector. meta cnt-1 shift new-root new-tail nil)))))\n\n  ICollection\n  (-conj [coll o]\n    (if (< (- cnt (tail-off coll)) 32)\n      (let [len (alength tail)\n            new-tail (make-array (inc len))]\n        (dotimes [i len]\n          (aset new-tail i (aget tail i)))\n        (aset new-tail len o)\n        (PersistentVector. meta (inc cnt) shift root new-tail nil))\n      (let [root-overflow? (> (bit-shift-right-zero-fill cnt 5) (bit-shift-left 1 shift))\n            new-shift (if root-overflow? (+ shift 5) shift)\n            new-root (if root-overflow?\n                       (let [n-r (pv-fresh-node nil)]\n                           (pv-aset n-r 0 root)\n                           (pv-aset n-r 1 (new-path nil shift (VectorNode. nil tail)))\n                           n-r)\n                       (push-tail coll shift root (VectorNode. nil tail)))]\n        (PersistentVector. meta (inc cnt) new-shift new-root (array o) nil))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (instance? PersistentVector other)\n      (if (== cnt (count other))\n        (let [me-iter  (-iterator coll)\n              you-iter (-iterator other)]\n          (loop []\n            (if ^boolean (.hasNext me-iter)\n              (let [x (.next me-iter)\n                    y (.next you-iter)]\n                (if (= x y)\n                  (recur)\n                  false))\n              true)))\n        false)\n      (equiv-sequential coll other)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (cond\n      (zero? cnt) nil\n      (<= cnt 32) (IndexedSeq. tail 0 nil)\n      :else (chunked-seq coll (first-array-for-longvec coll) 0 0)))\n\n  IDrop\n  (-drop [coll n]\n    (if (< n cnt)\n      (let [offset (js-mod n 32)]\n        (chunked-seq coll (unchecked-array-for coll n) (- n offset) offset))\n      nil))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IIndexed\n  (-nth [coll n]\n    (aget (array-for coll n) (bit-and n 0x01f)))\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (aget (unchecked-array-for coll n) (bit-and n 0x01f))\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (number? k)\n      (-assoc-n coll k v)\n      (throw (js\/Error. \"Vector's key for assoc must be a number.\"))))\n  (-contains-key? [coll k]\n    (if (integer? k)\n      (and (<= 0 k) (< k cnt))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when (and (<= 0 n) (< n cnt))\n      (MapEntry. n (aget (unchecked-array-for coll n) (bit-and n 0x01f)) nil)))\n\n  APersistentVector\n  IVector\n  (-assoc-n [coll n val]\n    (cond\n       (and (<= 0 n) (< n cnt))\n       (if (<= (tail-off coll) n)\n         (let [new-tail (aclone tail)]\n           (aset new-tail (bit-and n 0x01f) val)\n           (PersistentVector. meta cnt shift root new-tail nil))\n         (PersistentVector. meta cnt shift (do-assoc coll shift root n val) tail nil))\n       (== n cnt) (-conj coll val)\n       :else (throw (js\/Error. (str \"Index \" n \" out of bounds  [0,\" cnt \"]\")))))\n\n  IReduce\n  (-reduce [v f]\n    (pv-reduce v f 0 cnt))\n  (-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IKVReduce\n  (-kv-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (+ j i) (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (if (number? k)\n      (-nth coll k)\n      (throw (js\/Error. \"Key must be integer\"))))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientVector. cnt shift (tv-editable-root root) (tv-editable-tail tail)))\n\n  IReversible\n  (-rseq [coll]\n    (when (pos? cnt)\n      (RSeq. coll (dec cnt) nil)))\n\n  IIterable\n  (-iterator [this]\n    (ranged-iterator this 0 cnt)))\n\n(set! (.-EMPTY-NODE PersistentVector) (VectorNode. nil (make-array 32)))\n\n(set! (.-EMPTY PersistentVector)\n  (PersistentVector. nil 0 5 (.-EMPTY-NODE PersistentVector) (array) empty-ordered-hash))\n\n(set! (.-fromArray PersistentVector)\n  (fn [xs ^boolean no-clone]\n    (let [l (alength xs)\n          xs (if no-clone xs (aclone xs))]\n      (if (< l 32)\n        (PersistentVector. nil l 5 (.-EMPTY-NODE PersistentVector) xs nil)\n        (let [node (.slice xs 0 32)\n              v (PersistentVector. nil 32 5 (.-EMPTY-NODE PersistentVector) node nil)]\n          (loop [i 32 out (-as-transient v)]\n            (if (< i l)\n              (recur (inc i) (conj! out (aget xs i)))\n              (persistent! out))))))))\n\n(es6-iterable PersistentVector)\n\n(declare map-entry?)\n\n(defn vec\n  \"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.\"\n  [coll]\n  (cond\n    (map-entry? coll)\n    [(key coll) (val coll)]\n\n    (vector? coll)\n    (with-meta coll nil)\n\n    (array? coll)\n    (.fromArray PersistentVector coll true)\n\n    :else\n    (-persistent!\n      (reduce -conj!\n        (-as-transient (.-EMPTY PersistentVector))\n        coll))))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  [& args]\n  (if (and (instance? IndexedSeq args) (zero? (.-i args)))\n    (.fromArray PersistentVector (.-arr args) (not (array? (.-arr args))))\n    (vec args)))\n\n(declare subvec)\n\n(deftype ChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (chunked-seq vec node i off new-meta)))\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  IDrop\n  (-drop [coll n]\n    (let [o (+ off n)]\n      (if (< o (alength node))\n        (chunked-seq vec node i o)\n        (let [i (+ i o)]\n          (if (< i (-count vec))\n            (let [new-offset (js-mod i 32)]\n              (chunked-seq vec (unchecked-array-for vec i) (- i new-offset) new-offset))\n            nil)))))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    ())\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n  (-chunked-rest [coll]\n    (let [end (+ i (alength node))]\n      (if (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0)\n        ())))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [end (+ i (alength node))]\n      (when (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (pv-reduce vec f (+ i off) (count vec)))\n\n  (-reduce [coll f start]\n    (pv-reduce vec f start (+ i off) (count vec))))\n\n(es6-iterable ChunkedSeq)\n\n(defn chunked-seq\n  ([vec i off] (ChunkedSeq. vec (array-for vec i) i off nil nil))\n  ([vec node i off] (ChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (ChunkedSeq. vec node i off meta nil)))\n\n(declare build-subvec)\n\n(deftype Subvec [meta v start end ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (Subvec. meta v start end __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (build-subvec new-meta v start end __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when-not (== start end)\n      (-nth v (dec end))))\n  (-pop [coll]\n    (if (== start end)\n      (throw (js\/Error. \"Can't pop empty vector\"))\n      (build-subvec meta v start (dec end) nil)))\n\n  ICollection\n  (-conj [coll o]\n    (build-subvec meta (-assoc-n v end o) start (inc end) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [subvec-seq (fn subvec-seq [i]\n                       (when-not (== i end)\n                         (cons (-nth v i)\n                               (lazy-seq\n                                (subvec-seq (inc i))))))]\n      (subvec-seq start)))\n\n  IReversible\n  (-rseq [coll]\n    (if-not (== start end)\n      (RSeq. coll (dec (- end start)) nil)))\n\n  ICounted\n  (-count [coll] (- end start))\n\n  IIndexed\n  (-nth [coll n]\n    (if (or (neg? n) (<= end (+ start n)))\n      (vector-index-out-of-bounds n (- end start))\n      (-nth v (+ start n))))\n  (-nth [coll n not-found]\n    (if (or (neg? n) (<= end (+ start n)))\n      not-found\n      (-nth v (+ start n) not-found)))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll key val]\n    (if (number? key)\n      (-assoc-n coll key val)\n      (throw (js\/Error. \"Subvec's key for assoc must be a number.\"))))\n  (-contains-key? [coll key]\n    (if (integer? key)\n      (and (<= 0 key) (< key (- end start)))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when-not (neg? n)\n      (let [idx (+ start n)]\n        (when (< idx end)\n          (MapEntry. n (-lookup v idx) nil)))))\n\n  IVector\n  (-assoc-n [coll n val]\n    (let [v-pos (+ start n)]\n      (if (or (neg? n) (<= (inc end) v-pos))\n        (throw (js\/Error. (str \"Index \" n \" out of bounds [0,\" (-count coll) \"]\")))\n        (build-subvec meta (assoc v v-pos val) start (max end (inc v-pos)) nil))))\n\n  IReduce\n  (-reduce [coll f]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f start end)\n      (ci-reduce coll f)))\n  (-reduce [coll f init]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f init start end)\n      (ci-reduce coll f init)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (loop [i start j 0 init init]\n      (if (< i end)\n        (let [init (f init j (-nth v i))]\n          (if (reduced? init)\n            @init\n            (recur (inc i) (inc j) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (-nth coll k))\n  (-invoke [coll k not-found]\n    (-nth coll k not-found))\n\n  IIterable\n  (-iterator [coll]\n    (if (implements? APersistentVector v)\n      (ranged-iterator v start end)\n      (seq-iter coll))))\n\n(es6-iterable Subvec)\n\n(defn- build-subvec [meta v start end __hash]\n  (if (instance? Subvec v)\n    (recur meta (.-v v) (+ (.-start v) start) (+ (.-start v) end) __hash)\n    (do\n      (when-not (vector? v)\n        (throw (js\/Error. \"v must satisfy IVector\")))\n      (when (or (neg? start)\n                (< end start)\n                (> end (count v)))\n        (throw (js\/Error. \"Index out of bounds\")))\n      (Subvec. meta v start end __hash))))\n\n(defn subvec\n  \"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.\"\n  ([v start]\n   (subvec v start (count v)))\n  ([v start end]\n   (assert (and (not (nil? start)) (not (nil? end))))\n   (build-subvec nil v (int start) (int end) nil)))\n\n(defn- tv-ensure-editable [edit node]\n  (if (identical? edit (.-edit node))\n    node\n    (VectorNode. edit (aclone (.-arr node)))))\n\n(defn- tv-editable-root [node]\n  (VectorNode. (js-obj) (aclone (.-arr node))))\n\n(defn- tv-editable-tail [tl]\n  (let [ret (make-array 32)]\n    (array-copy tl 0 ret 0 (alength tl))\n    ret))\n\n(defn- tv-push-tail [tv level parent tail-node]\n  (let [ret    (tv-ensure-editable (.. tv -root -edit) parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt tv)) level) 0x01f)]\n    (pv-aset ret subidx\n             (if (== level 5)\n               tail-node\n               (let [child (pv-aget ret subidx)]\n                 (if-not (nil? child)\n                   (tv-push-tail tv (- level 5) child tail-node)\n                   (new-path (.. tv -root -edit) (- level 5) tail-node)))))\n    ret))\n\n(defn- tv-pop-tail [tv level node]\n  (let [node   (tv-ensure-editable (.. tv -root -edit) node)\n        subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt tv) 2) level) 0x01f)]\n    (cond\n      (> level 5) (let [new-child (tv-pop-tail\n                                   tv (- level 5) (pv-aget node subidx))]\n                    (if (and (nil? new-child) (zero? subidx))\n                      nil\n                      (do (pv-aset node subidx new-child)\n                          node)))\n      (zero? subidx) nil\n      :else (do (pv-aset node subidx nil)\n                node))))\n\n(defn- unchecked-editable-array-for [tv i]\n  ;; invariant: i is a valid index of tv.\n  (if (>= i (tail-off tv))\n    (.-tail tv)\n    (let [root (.-root tv)]\n      (loop [node  root\n             level (.-shift tv)]\n        (if (pos? level)\n          (recur (tv-ensure-editable\n                   (.-edit root)\n                   (pv-aget node\n                            (bit-and (bit-shift-right-zero-fill i level)\n                                     0x01f)))\n                 (- level 5))\n          (.-arr node))))))\n\n(deftype TransientVector [^:mutable cnt\n                          ^:mutable shift\n                          ^:mutable root\n                          ^:mutable tail]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if ^boolean (.-edit root)\n      (if (< (- cnt (tail-off tcoll)) 32)\n        (do (aset tail (bit-and cnt 0x01f) o)\n            (set! cnt (inc cnt))\n            tcoll)\n        (let [tail-node (VectorNode. (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (if (> (bit-shift-right-zero-fill cnt 5)\n                 (bit-shift-left 1 shift))\n            (let [new-root-array (make-array 32)\n                  new-shift      (+ shift 5)]\n              (aset new-root-array 0 root)\n              (aset new-root-array 1 (new-path (.-edit root) shift tail-node))\n              (set! root  (VectorNode. (.-edit root) new-root-array))\n              (set! shift new-shift)\n              (set! cnt   (inc cnt))\n              tcoll)\n            (let [new-root (tv-push-tail tcoll shift root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              tcoll))))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [len (- cnt (tail-off tcoll))\n                trimmed-tail (make-array len)]\n            (array-copy tail 0 trimmed-tail 0 len)\n            (PersistentVector. nil cnt shift root trimmed-tail nil)))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if (number? key)\n      (-assoc-n! tcoll key val)\n      (throw (js\/Error. \"TransientVector's key for assoc! must be a number.\"))))\n\n  ITransientVector\n  (-assoc-n! [tcoll n val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 n) (< n cnt))\n        (if (<= (tail-off tcoll) n)\n          (do (aset tail (bit-and n 0x01f) val)\n              tcoll)\n          (let [new-root\n                ((fn go [level node]\n                   (let [node (tv-ensure-editable (.-edit root) node)]\n                     (if (zero? level)\n                       (do (pv-aset node (bit-and n 0x01f) val)\n                           node)\n                       (let [subidx (bit-and (bit-shift-right-zero-fill n level)\n                                             0x01f)]\n                         (pv-aset node subidx\n                                  (go (- level 5) (pv-aget node subidx)))\n                         node))))\n                 shift root)]\n            (set! root new-root)\n            tcoll))\n        (== n cnt) (-conj! tcoll val)\n        :else\n        (throw\n         (js\/Error.\n          (str \"Index \" n \" out of bounds for TransientVector of length\" cnt))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [tcoll]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n        (== 1 cnt)                       (do (set! cnt 0) tcoll)\n        (pos? (bit-and (dec cnt) 0x01f)) (do (set! cnt (dec cnt)) tcoll)\n        :else\n        (let [new-tail (unchecked-editable-array-for tcoll (- cnt 2))\n              new-root (let [nr (tv-pop-tail tcoll shift root)]\n                         (if-not (nil? nr)\n                           nr\n                           (VectorNode. (.-edit root) (make-array 32))))]\n          (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n            (let [new-root (tv-ensure-editable (.-edit root) (pv-aget new-root 0))]\n              (set! root  new-root)\n              (set! shift (- shift 5))\n              (set! cnt   (dec cnt))\n              (set! tail  new-tail)\n              tcoll)\n            (do (set! root new-root)\n                (set! cnt  (dec cnt))\n                (set! tail new-tail)\n                tcoll))))\n      (throw (js\/Error. \"pop! after persistent!\"))))\n\n  ICounted\n  (-count [coll]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  IIndexed\n  (-nth [coll n]\n    (if ^boolean (.-edit root)\n      (aget (array-for coll n) (bit-and n 0x01f))\n      (throw (js\/Error. \"nth after persistent!\"))))\n\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (-nth coll n)\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond\n      (not ^boolean (.-edit root)) (throw (js\/Error. \"lookup after persistent!\"))\n      (number? k) (-nth coll k not-found)\n      :else not-found))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n;;; PersistentQueue ;;;\n\n(deftype PersistentQueueIter [^:mutable fseq riter]\n  Object\n  (hasNext [_]\n    (or (and (some? fseq) (seq fseq)) (and (some? riter) (.hasNext riter))))\n  (next [_]\n    (cond\n      (some? fseq)\n      (let [ret (first fseq)]\n        (set! fseq (next fseq))\n        ret)\n      (and (some? riter) ^boolean (.hasNext riter))\n      (.next riter)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentQueueSeq [meta front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueueSeq. new-meta front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest  [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (if (nil? rear)\n        (-empty coll)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  INext\n  (-next [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (when (some? rear)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll))\n\n(es6-iterable PersistentQueueSeq)\n\n(deftype PersistentQueue [meta count front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [coll] (PersistentQueue. meta count front rear __hash))\n\n  IIterable\n  (-iterator [coll]\n    (PersistentQueueIter. front (-iterator rear)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueue. new-meta count front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest [coll] (rest (seq coll)))\n\n  IStack\n  (-peek [coll] (first front))\n  (-pop [coll]\n    (if front\n      (if-let [f1 (next front)]\n        (PersistentQueue. meta (dec count) f1 rear nil)\n        (PersistentQueue. meta (dec count) (seq rear) [] nil))\n      coll))\n\n  ICollection\n  (-conj [coll o]\n    (if front\n      (PersistentQueue. meta (inc count) front (conj (or rear []) o) nil)\n      (PersistentQueue. meta (inc count) (conj front o) [] nil)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentQueue) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [rear (seq rear)]\n      (if (or front rear)\n        (PersistentQueueSeq. nil front (seq rear) nil))))\n\n  ICounted\n  (-count [coll] count))\n\n(set! (.-EMPTY PersistentQueue) (PersistentQueue. nil 0 nil [] empty-ordered-hash))\n\n(es6-iterable PersistentQueue)\n\n(deftype NeverEquiv []\n  Object\n  (equiv [this other]\n    (-equiv this other))\n  IEquiv\n  (-equiv [o other] false))\n\n(def ^:private never-equiv (NeverEquiv.))\n\n(defn equiv-map\n  \"Test map equivalence. Returns true if x equals y, otherwise returns false.\"\n  [x y]\n  (boolean\n    (when (and (map? y) (not (record? y)))\n      ; assume all maps are counted\n      (when (== (count x) (count y))\n        (if (satisfies? IKVReduce x)\n          (reduce-kv\n            (fn [_ k v]\n              (if (= (get y k never-equiv) v)\n                true\n                (reduced false)))\n            true x)\n          (every?\n            (fn [xkv]\n              (= (get y (first xkv) never-equiv) (second xkv)))\n            x))))))\n\n\n(defn- scan-array [incr k array]\n  (let [len (alength array)]\n    (loop [i 0]\n      (when (< i len)\n        (if (identical? k (aget array i))\n          i\n          (recur (+ i incr)))))))\n\n; The keys field is an array of all keys of this map, in no particular\n; order. Any string, keyword, or symbol key is used as a property name\n; to store the value in strobj.  If a key is assoc'ed when that same\n; key already exists in strobj, the old value is overwritten. If a\n; non-string key is assoc'ed, return a HashMap object instead.\n\n(defn- obj-map-compare-keys [a b]\n  (let [a (hash a)\n        b (hash b)]\n    (cond\n     (< a b) -1\n     (> a b) 1\n     :else 0)))\n\n(defn- obj-map->hash-map [m k v]\n  (let [ks  (.-keys m)\n        len (alength ks)\n        so  (.-strobj m)\n        mm  (meta m)]\n    (loop [i   0\n           out (transient (.-EMPTY PersistentHashMap))]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (inc i) (assoc! out k (gobject\/get so k))))\n        (-with-meta (persistent! (assoc! out k v)) mm)))))\n\n;;; ObjMap - DEPRECATED\n\n(defn- obj-clone [obj ks]\n  (let [new-obj (js-obj)\n        l (alength ks)]\n    (loop [i 0]\n      (when (< i l)\n        (let [k (aget ks i)]\n          (gobject\/set new-obj k (gobject\/get obj k))\n          (recur (inc i)))))\n    new-obj))\n\n(deftype ObjMap [meta keys strobj update-count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ObjMap. new-meta keys strobj update-count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (reduce -conj\n              coll\n              entry)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY ObjMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? (alength keys))\n      (map #(vector % (unchecked-get strobj %))\n           (.sort keys obj-map-compare-keys))))\n\n  ICounted\n  (-count [coll] (alength keys))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (unchecked-get strobj k)\n      not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (string? k)\n        (if (or (> update-count (.-HASHMAP_THRESHOLD ObjMap))\n                (>= (alength keys) (.-HASHMAP_THRESHOLD ObjMap)))\n          (obj-map->hash-map coll k v)\n          (if-not (nil? (scan-array 1 k keys))\n            (let [new-strobj (obj-clone strobj keys)]\n              (gobject\/set new-strobj k v)\n              (ObjMap. meta keys new-strobj (inc update-count) nil)) ; overwrite\n            (let [new-strobj (obj-clone strobj keys) ; append\n                  new-keys (aclone keys)]\n              (gobject\/set new-strobj k v)\n              (.push new-keys k)\n              (ObjMap. meta new-keys new-strobj (inc update-count) nil))))\n        ;; non-string key. game over.\n        (obj-map->hash-map coll k v)))\n  (-contains-key? [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      true\n      false))\n\n  IFind\n  (-find [coll k]\n    (when (and (string? k)\n            (not (nil? (scan-array 1 k keys))))\n      (MapEntry. k (unchecked-get strobj k) nil)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength keys)]\n      (loop [keys (.sort keys obj-map-compare-keys)\n             init init]\n        (if (seq keys)\n          (let [k (first keys)\n                init (f init k (unchecked-get strobj k))]\n            (if (reduced? init)\n              @init\n              (recur (rest keys) init)))\n          init))))\n\n  IMap\n  (-dissoc [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (let [new-keys (aclone keys)\n            new-strobj (obj-clone strobj keys)]\n        (.splice new-keys (scan-array 1 k new-keys) 1)\n        (js-delete new-strobj k)\n        (ObjMap. meta new-keys new-strobj (inc update-count) nil))\n      coll)) ; key not found, return coll unchanged\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (transient (into (hash-map) coll))))\n\n(set! (.-EMPTY ObjMap) (ObjMap. nil (array) (js-obj) 0 empty-unordered-hash))\n\n(set! (.-HASHMAP_THRESHOLD ObjMap) 8)\n\n(set! (.-fromObject ObjMap) (fn [ks obj] (ObjMap. nil ks obj 0 nil)))\n\n;; Record Iterator\n(deftype RecordIter [^:mutable i record base-count fields ext-map-iter]\n  Object\n  (hasNext [_]\n    (or (< i base-count) (.hasNext ext-map-iter)))\n  (next [_]\n    (if (< i base-count)\n      (let [k (nth fields i)]\n        (set! i (inc i))\n        (MapEntry. k (-lookup record k) nil))\n      (.next ext-map-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype ES6EntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [[k v] (first s)]\n        (set! s (next s))\n        #js {:value #js [k v] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-entries-iterator [coll]\n  (ES6EntriesIterator. (seq coll)))\n\n(deftype ES6SetEntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value #js [x x] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-set-entries-iterator [coll]\n  (ES6SetEntriesIterator. (seq coll)))\n\n;;; PersistentArrayMap\n\n(defn- array-index-of-nil? [arr]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (nil? (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-keyword? [arr k]\n  (let [len  (alength arr)\n        kstr (.-fqn k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (keyword? (aget arr i))\n             (identical? kstr (.-fqn (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-symbol? [arr k]\n  (let [len  (alength arr)\n        kstr (.-str k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (symbol? (aget arr i))\n             (identical? kstr (.-str (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-identical? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (identical? k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-equiv? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (= k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn array-index-of [arr k]\n  (cond\n    (keyword? k) (array-index-of-keyword? arr k)\n\n    (or (string? k) (number? k))\n    (array-index-of-identical? arr k)\n\n    (symbol? k) (array-index-of-symbol? arr k)\n\n    (nil? k)\n    (array-index-of-nil? arr)\n\n    :else (array-index-of-equiv? arr k)))\n\n(defn- array-map-index-of [m k]\n  (array-index-of (.-arr m) k))\n\n(defn- array-extend-kv [arr k v]\n  (let [l (alength arr)\n        narr (make-array (+ l 2))]\n    (loop [i 0]\n      (when (< i l)\n        (aset narr i (aget arr i))\n        (recur (inc i))))\n    (aset narr l k)\n    (aset narr (inc l) v)\n    narr))\n\n(defn- array-map-extend-kv [m k v]\n  (array-extend-kv (.-arr m) k v))\n\n(declare TransientArrayMap)\n\n(deftype MapEntry [key val ^:mutable __hash]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(defn map-entry?\n  \"Returns true if x satisfies IMapEntry\"\n  [x]\n  (implements? IMapEntry x))\n\n(deftype PersistentArrayMapSeq [arr i _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (PersistentArrayMapSeq. arr i new-meta)))\n\n  ICounted\n  (-count [coll]\n    (\/ (- (alength arr) i) 2))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (MapEntry. (aget arr i) (aget arr (inc i)) nil))\n\n  (-rest [coll]\n    (if (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)))\n\n  IDrop\n  (-drop [coll n]\n    (when (< n (-count coll))\n      (PersistentArrayMapSeq. arr (+ i (* 2 n)) nil)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentArrayMapSeq)\n\n(defn persistent-array-map-seq [arr i _meta]\n  (when (<= i (- (alength arr) 2))\n    (PersistentArrayMapSeq. arr i _meta)))\n\n(declare keys vals)\n\n(deftype PersistentArrayMapIterator [arr ^:mutable i cnt]\n  Object\n  (hasNext [_]\n    (< i cnt))\n  (next [_]\n    (let [ret (MapEntry. (aget arr i) (aget arr (inc i)) nil)]\n      (set! i (+ i 2))\n      ret)))\n\n(deftype PersistentArrayMap [meta cnt arr ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentArrayMap. meta cnt arr __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentArrayMap. new-meta cnt arr __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentArrayMap) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (if (and (map? other) (not (record? other)))\n      (let [alen (alength arr)\n            ^not-native other other]\n        (if (== cnt (-count other))\n          (loop [i 0]\n            (if (< i alen)\n              (let [v (-lookup other (aget arr i) lookup-sentinel)]\n                (if-not (identical? v lookup-sentinel)\n                  (if (= (aget arr (inc i)) v)\n                    (recur (+ i 2))\n                    false)\n                  false))\n              true))\n          false))\n      false))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  IIterable\n  (-iterator [this]\n    (PersistentArrayMapIterator. arr 0 (* cnt 2)))\n\n  ISeqable\n  (-seq [coll]\n    (persistent-array-map-seq arr 0 nil))\n\n  IDrop\n  (-drop [coll n]\n    (when-some [s (-seq coll)]\n      (-drop s n)))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [idx (array-map-index-of coll k)]\n      (if (== idx -1)\n        not-found\n        (aget arr (inc idx)))))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [idx (array-map-index-of coll k)]\n      (cond\n        (== idx -1)\n        (if (< cnt (.-HASHMAP-THRESHOLD PersistentArrayMap))\n          (let [arr (array-map-extend-kv coll k v)]\n            (PersistentArrayMap. meta (inc cnt) arr nil))\n          (-> (into (.-EMPTY PersistentHashMap) coll)\n            (-assoc k v)\n            (-with-meta meta)))\n\n        (identical? v (aget arr (inc idx)))\n        coll\n\n        :else\n        (let [arr (doto (aclone arr)\n                    (aset (inc idx) v))]\n          (PersistentArrayMap. meta cnt arr nil)))))\n\n  (-contains-key? [coll k]\n    (not (== (array-map-index-of coll k) -1)))\n\n  IFind\n  (-find [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (when-not (== idx -1)\n        (MapEntry. (aget arr idx) (aget arr (inc idx)) nil))))\n\n  IMap\n  (-dissoc [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (if (>= idx 0)\n        (let [len     (alength arr)\n              new-len (- len 2)]\n          (if (zero? new-len)\n            (-empty coll)\n            (let [new-arr (make-array new-len)]\n              (loop [s 0 d 0]\n                (cond\n                  (>= s len) (PersistentArrayMap. meta (dec cnt) new-arr nil)\n                  (= k (aget arr s)) (recur (+ s 2) d)\n                  :else (do (aset new-arr d (aget arr s))\n                            (aset new-arr (inc d) (aget arr (inc s)))\n                            (recur (+ s 2) (+ d 2))))))))\n        coll)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength arr)]\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [init (f init (aget arr i) (aget arr (inc i)))]\n            (if (reduced? init)\n              @init\n              (recur (+ i 2) init)))\n          init))))\n\n  IReduce\n  (-reduce [coll f]\n    (iter-reduce coll f))\n  (-reduce [coll f start]\n    (iter-reduce coll f start))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientArrayMap. (js-obj) (alength arr) (aclone arr))))\n\n(set! (.-EMPTY PersistentArrayMap) (PersistentArrayMap. nil 0 (array) empty-unordered-hash))\n\n(set! (.-HASHMAP-THRESHOLD PersistentArrayMap) 8)\n\n(set! (.-fromArray PersistentArrayMap)\n  (fn [arr ^boolean no-clone ^boolean no-check]\n    (as-> (if no-clone arr (aclone arr)) arr\n      (if no-check\n        arr\n        (let [ret (array)]\n          (loop [i 0]\n            (when (< i (alength arr))\n              (let [k (aget arr i)\n                    v (aget arr (inc i))\n                    idx (array-index-of ret k)]\n                (when (== idx -1)\n                  (.push ret k)\n                  (.push ret v)))\n              (recur (+ i 2))))\n          ret))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createWithCheck PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (throw (js\/Error. (str \"Duplicate key: \" k)))))\n          (recur (+ i 2))))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(defn key-test [key other]\n  (cond\n    (identical? key other) true\n    (keyword-identical? key other) true\n    :else (= key other)))\n\n(defn- ^boolean pam-dupes? [arr]\n  (loop [i 0]\n    (if (< i (alength arr))\n      (let [dupe? (loop [j 0]\n                    (if (< j i)\n                      (or\n                        (key-test (aget arr i) (aget arr j))\n                        (recur (+ 2 j)))\n                      false))]\n        (or dupe? (recur (+ 2 i))))\n      false)))\n\n(defn- pam-new-size [arr]\n  (loop [i 0 n 0]\n    (if (< i (alength arr))\n      (let [dupe? (loop [j 0]\n                    (if (< j i)\n                      (or\n                        (key-test (aget arr i) (aget arr j))\n                        (recur (+ 2 j)))\n                      false))]\n        (recur (+ 2 i) (if dupe? n (+ n 2))))\n      n)))\n\n(defn- pam-grow-seed-array [seed trailing]\n  (let [seed-cnt  (dec (alength seed))\n        extra-kvs (seq trailing)\n        ret       (make-array (+ seed-cnt (* 2 (count extra-kvs))))\n        ret       (array-copy seed 0 ret 0 seed-cnt)]\n    (loop [i seed-cnt extra-kvs extra-kvs]\n      (if extra-kvs\n        (let [kv (first extra-kvs)]\n          (aset ret i (-key kv))\n          (aset ret (inc i) (-val kv))\n          (recur (+ 2 i) (next extra-kvs)))\n        ret))))\n\n(set! (.-createAsIfByAssoc PersistentArrayMap)\n  (fn [init]\n    ;; check trailing element\n    (let [len           (alength init)\n          has-trailing? (== 1 (bit-and len  1))]\n      (if-not (or has-trailing? (pam-dupes? init))\n        (PersistentArrayMap. nil (\/ len 2) init nil)\n        (.createAsIfByAssocComplexPath PersistentArrayMap init has-trailing?)))))\n\n(set! (.-createAsIfByAssocComplexPath PersistentArrayMap)\n  (fn [init ^boolean has-trailing?]\n    (let [init (if has-trailing?\n                 (pam-grow-seed-array init\n                   ;; into {} in case the final element is not a map but something conj-able\n                   ;; for parity with Clojure implementation of CLJ-2603\n                   (into {} (aget init (dec (alength init)))))\n                 init)\n          n    (pam-new-size init)\n          len  (alength init)]\n      (if (< n len)\n        (let [nodups (make-array n)]\n          (loop [i 0 m 0]\n            (if (< i len)\n              (let [dupe? (loop [j 0]\n                            (if (< j m)\n                              (or\n                                (key-test (aget init i) (aget init j))\n                                (recur (+ 2 j)))\n                              false))]\n                (if-not dupe?\n                  (let [j (loop [j (- len 2)]\n                            (if (>= j i)\n                              (if (key-test (aget init i) (aget init j))\n                                j\n                                (recur (- j 2)))\n                              j))]\n                    (aset nodups m (aget init i))\n                    (aset nodups (inc m) (aget init (inc j)))\n                    (recur (+ 2 i) (+ 2 m)))\n                  (recur (+ 2 i) m)))))\n          (PersistentArrayMap. nil (\/ (alength nodups) 2) nodups nil))\n        (PersistentArrayMap. nil (\/ (alength init) 2) init nil)))))\n\n(es6-iterable PersistentArrayMap)\n\n(declare array->transient-hash-map)\n\n(deftype TransientArrayMap [^:mutable ^boolean editable?\n                            ^:mutable len\n                            arr]\n  ICounted\n  (-count [tcoll]\n    (if editable?\n      (quot len 2)\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (-lookup tcoll k nil))\n\n  (-lookup [tcoll k not-found]\n    (if editable?\n      (let [idx (array-map-index-of tcoll k)]\n        (if (== idx -1)\n          not-found\n          (aget arr (inc idx))))\n      (throw (js\/Error. \"lookup after persistent!\"))))\n\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if editable?\n      (cond\n        (map-entry? o)\n        (-assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (-assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (-assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if editable?\n      (do (set! editable? false)\n          (PersistentArrayMap. nil (quot len 2) arr nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (if (== idx -1)\n          (if (<= (+ len 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))\n            (do (set! len (+ len 2))\n                (.push arr key)\n                (.push arr val)\n                tcoll)\n            (assoc! (array->transient-hash-map len arr) key val))\n          (if (identical? val (aget arr (inc idx)))\n            tcoll\n            (do (aset arr (inc idx) val)\n                tcoll))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  ITransientMap\n  (-dissoc! [tcoll key]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (when (>= idx 0)\n          (aset arr idx (aget arr (- len 2)))\n          (aset arr (inc idx) (aget arr (dec len)))\n          (doto arr .pop .pop)\n          (set! len (- len 2)))\n        tcoll)\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key nil))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n(declare TransientHashMap)\n\n(defn- array->transient-hash-map [len arr]\n  (loop [out (transient (.-EMPTY PersistentHashMap))\n         i   0]\n    (if (< i len)\n      (recur (assoc! out (aget arr i) (aget arr (inc i))) (+ i 2))\n      out)))\n\n;;; PersistentHashMap\n\n(deftype Box [^:mutable val])\n\n(declare create-inode-seq create-array-node-seq create-node)\n\n(defn- mask [hash shift]\n  (bit-and (bit-shift-right-zero-fill hash shift) 0x01f))\n\n(defn- clone-and-set\n  ([arr i a]\n     (doto (aclone arr)\n       (aset i a)))\n  ([arr i a j b]\n     (doto (aclone arr)\n       (aset i a)\n       (aset j b))))\n\n(defn- remove-pair [arr i]\n  (let [new-arr (make-array (- (alength arr) 2))]\n    (array-copy arr 0 new-arr 0 (* 2 i))\n    (array-copy arr (* 2 (inc i)) new-arr (* 2 i) (- (alength new-arr) (* 2 i)))\n    new-arr))\n\n(defn- bitmap-indexed-node-index [bitmap bit]\n  (bit-count (bit-and bitmap (dec bit))))\n\n(defn- bitpos [hash shift]\n  (bit-shift-left 1 (mask hash shift)))\n\n(defn- edit-and-set\n  ([inode edit i a]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       editable))\n  ([inode edit i a j b]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       (aset (.-arr editable) j b)\n       editable)))\n\n(defn- inode-kv-reduce [arr f init]\n  (let [len (alength arr)]\n    (loop [i 0 init init]\n      (if (< i len)\n        (let [init (let [k (aget arr i)]\n                     (if-not (nil? k)\n                       (f init k (aget arr (inc i)))\n                       (let [node (aget arr (inc i))]\n                         (if-not (nil? node)\n                           (.kv-reduce node f init)\n                           init))))]\n          (if (reduced? init)\n            init\n            (recur (+ i 2) init)))\n        init))))\n\n(declare ArrayNode)\n\n (deftype NodeIterator [arr ^:mutable i ^:mutable next-entry ^:mutable next-iter]\n  Object\n  (advance [this]\n    (let [len (alength arr)]\n      (loop []\n        (if (< i len)\n          (let [key (aget arr i)\n                node-or-val (aget arr (inc i))\n                ^boolean found\n                (cond (some? key)\n                      (set! next-entry (MapEntry. key node-or-val nil))\n                      (some? node-or-val)\n                      (let [new-iter (-iterator node-or-val)]\n                        (if ^boolean (.hasNext new-iter)\n                          (set! next-iter new-iter)\n                          false))\n                      :else false)]\n            (set! i (+ i 2))\n            (if found true (recur)))\n          false))))\n  (hasNext [this]\n    (or (some? next-entry) (some? next-iter) (.advance this)))\n  (next [this]\n    (cond\n      (some? next-entry)\n      (let [ret next-entry]\n        (set! next-entry nil)\n        ret)\n      (some? next-iter)\n      (let [ret (.next next-iter)]\n        (when-not ^boolean (.hasNext next-iter)\n          (set! next-iter nil))\n        ret)\n      ^boolean (.advance this)\n      (.next this)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype BitmapIndexedNode [edit ^:mutable bitmap ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (if (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc (.-EMPTY BitmapIndexedNode)\n                                              (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. nil (inc n) nodes))\n            (let [new-arr (make-array (* 2 (inc n)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (BitmapIndexedNode. nil (bit-or bitmap bit) new-arr))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc val-or-node (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (BitmapIndexedNode. nil bitmap\n                                        (clone-and-set arr (* 2 idx) nil (inc (* 2 idx))\n                                                       (create-node (+ shift 5) key-or-nil val-or-node hash key val)))))))))\n\n  (inode-without [inode shift hash key]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without val-or-node (+ shift 5) hash key)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))\n                        (== bitmap bit) nil\n                        :else (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))))\n                (key-test key key-or-nil)\n                (if (== bitmap bit)\n                  nil\n                  (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx)))\n                :else inode)))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)  (.inode-lookup val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil) val-or-node\n                :else not-found)))))\n\n  (inode-find [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil) (.inode-find val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil)          (MapEntry. key-or-nil val-or-node nil)\n                :else not-found)))))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [n       (bit-count bitmap)\n            new-arr (make-array (if (neg? n) 4 (* 2 (inc n))))]\n        (array-copy arr 0 new-arr 0 (* 2 n))\n        (BitmapIndexedNode. e bitmap new-arr))))\n\n  (edit-and-remove-pair [inode e bit i]\n    (if (== bitmap bit)\n      nil\n      (let [editable (.ensure-editable inode e)\n            earr     (.-arr editable)\n            len      (alength earr)]\n        (set! (.-bitmap editable) (bit-xor bit (.-bitmap editable)))\n        (array-copy earr (* 2 (inc i))\n                    earr (* 2 i)\n                    (- len (* 2 (inc i))))\n        (aset earr (- len 2) nil)\n        (aset earr (dec len) nil)\n        editable)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (cond\n            (< (* 2 n) (alength arr))\n            (let [editable (.ensure-editable inode edit)\n                  earr     (.-arr editable)]\n              (set! (.-val added-leaf?) true)\n              (array-copy-downward earr (* 2 idx)\n                                   earr (* 2 (inc idx))\n                                   (* 2 (- n idx)))\n              (aset earr (* 2 idx) key)\n              (aset earr (inc (* 2 idx)) val)\n              (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n              editable)\n\n            (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc! (.-EMPTY BitmapIndexedNode)\n                                               edit (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. edit (inc n) nodes))\n\n            :else\n            (let [new-arr (make-array (* 2 (+ n 4)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (let [editable (.ensure-editable inode edit)]\n                (set! (.-arr editable) new-arr)\n                (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n                editable))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc! val-or-node edit (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (edit-and-set inode edit (inc (* 2 idx)) n)))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (edit-and-set inode edit (inc (* 2 idx)) val))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (edit-and-set inode edit (* 2 idx) nil (inc (* 2 idx))\n                                  (create-node edit (+ shift 5) key-or-nil val-or-node hash key val))))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without! val-or-node edit (+ shift 5) hash key removed-leaf?)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (edit-and-set inode edit (inc (* 2 idx)) n)\n                        (== bitmap bit) nil\n                        :else (.edit-and-remove-pair inode edit bit idx)))\n                (key-test key key-or-nil)\n                (do (set! (.-val removed-leaf?) true)\n                    (.edit-and-remove-pair inode edit bit idx))\n                :else inode)))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(set! (.-EMPTY BitmapIndexedNode) (BitmapIndexedNode. nil 0 (make-array 0)))\n\n(defn- pack-array-node [array-node edit idx]\n  (let [arr     (.-arr array-node)\n        len     (alength arr)\n        new-arr (make-array (* 2 (dec (.-cnt array-node))))]\n    (loop [i 0 j 1 bitmap 0]\n      (if (< i len)\n        (if (and (not (== i idx))\n                 (not (nil? (aget arr i))))\n          (do (aset new-arr j (aget arr i))\n              (recur (inc i) (+ j 2) (bit-or bitmap (bit-shift-left 1 i))))\n          (recur (inc i) j bitmap))\n        (BitmapIndexedNode. edit bitmap new-arr)))))\n\n(deftype ArrayNodeIterator [arr ^:mutable i ^:mutable next-iter]\n  Object\n  (hasNext [this]\n    (let [len (alength arr)]\n      (loop []\n        (if-not (and  (some? next-iter) ^boolean (.hasNext next-iter))\n          (if (< i len)\n            (let [node (aget arr i)]\n              (set! i (inc i))\n              (when (some? node)\n                (set! next-iter (-iterator node)))\n              (recur))\n            false)\n          true))))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (.next next-iter)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype ArrayNode [edit ^:mutable cnt ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (ArrayNode. nil (inc cnt) (clone-and-set arr idx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?)))\n        (let [n (.inode-assoc node (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (ArrayNode. nil cnt (clone-and-set arr idx n)))))))\n\n  (inode-without [inode shift hash key]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (let [n (.inode-without node (+ shift 5) hash key)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode nil idx)\n              (ArrayNode. nil (dec cnt) (clone-and-set arr idx n)))\n\n            :else\n            (ArrayNode. nil cnt (clone-and-set arr idx n))))\n        inode)))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-lookup node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-find node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-seq [inode]\n    (create-array-node-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (ArrayNode. e cnt (aclone arr))))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (let [editable (edit-and-set inode edit idx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))]\n          (set! (.-cnt editable) (inc (.-cnt editable)))\n          editable)\n        (let [n (.inode-assoc! node edit (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (edit-and-set inode edit idx n))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        inode\n        (let [n (.inode-without! node edit (+ shift 5) hash key removed-leaf?)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode edit idx)\n              (let [editable (edit-and-set inode edit idx n)]\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))\n\n            :else\n            (edit-and-set inode edit idx n))))))\n\n  (kv-reduce [inode f init]\n    (let [len (alength arr)]           ; actually 32\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [node (aget arr i)]\n            (if-not (nil? node)\n              (let [init (.kv-reduce node f init)]\n                (if (reduced? init)\n                  init\n                  (recur (inc i) init)))\n              (recur (inc i) init)))\n          init))))\n\n IIterable\n (-iterator [coll]\n    (ArrayNodeIterator. arr 0 nil)))\n\n(defn- hash-collision-node-find-index [arr cnt key]\n  (let [lim (* 2 cnt)]\n    (loop [i 0]\n      (if (< i lim)\n        (if (key-test key (aget arr i))\n          i\n          (recur (+ i 2)))\n        -1))))\n\n(deftype HashCollisionNode [edit\n                            ^:mutable collision-hash\n                            ^:mutable cnt\n                            ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (let [len     (* 2 cnt)\n                new-arr (make-array (+ len 2))]\n            (array-copy arr 0 new-arr 0 len)\n            (aset new-arr len key)\n            (aset new-arr (inc len) val)\n            (set! (.-val added-leaf?) true)\n            (HashCollisionNode. nil collision-hash (inc cnt) new-arr))\n          (if (= (aget arr (inc idx)) val)\n            inode\n            (HashCollisionNode. nil collision-hash cnt (clone-and-set arr (inc idx) val)))))\n      (.inode-assoc (BitmapIndexedNode. nil (bitpos collision-hash shift) (array nil inode))\n                    shift hash key val added-leaf?)))\n\n  (inode-without [inode shift hash key]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (== idx -1) inode\n            (== cnt 1)  nil\n            :else (HashCollisionNode. nil collision-hash (dec cnt) (remove-pair arr (quot idx 2))))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0) not-found\n            :else     (aget arr (inc idx)))))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0) not-found\n            :else     (MapEntry. (aget arr idx) (aget arr (inc idx)) nil))))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [new-arr (make-array (* 2 (inc cnt)))]\n        (array-copy arr 0 new-arr 0 (* 2 cnt))\n        (HashCollisionNode. e collision-hash cnt new-arr))))\n\n  (ensure-editable-array [inode e count array]\n    (if (identical? e edit)\n      (do (set! arr array)\n          (set! cnt count)\n          inode)\n      (HashCollisionNode. edit collision-hash count array)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (if (> (alength arr) (* 2 cnt))\n            (let [editable (edit-and-set inode edit (* 2 cnt) key (inc (* 2 cnt)) val)]\n              (set! (.-val added-leaf?) true)\n              (set! (.-cnt editable) (inc (.-cnt editable)))\n              editable)\n            (let [len     (alength arr)\n                  new-arr (make-array (+ len 2))]\n              (array-copy arr 0 new-arr 0 len)\n              (aset new-arr len key)\n              (aset new-arr (inc len) val)\n              (set! (.-val added-leaf?) true)\n              (.ensure-editable-array inode edit (inc cnt) new-arr)))\n          (if (identical? (aget arr (inc idx)) val)\n            inode\n            (edit-and-set inode edit (inc idx) val))))\n      (.inode-assoc! (BitmapIndexedNode. edit (bitpos collision-hash shift) (array nil inode nil nil))\n                     edit shift hash key val added-leaf?)))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (if (== idx -1)\n        inode\n        (do (set! (.-val removed-leaf?) true)\n            (if (== cnt 1)\n              nil\n              (let [editable (.ensure-editable inode edit)\n                    earr     (.-arr editable)]\n                (aset earr idx (aget earr (- (* 2 cnt) 2)))\n                (aset earr (inc idx) (aget earr (dec (* 2 cnt))))\n                (aset earr (dec (* 2 cnt)) nil)\n                (aset earr (- (* 2 cnt) 2) nil)\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(defn- create-node\n  ([shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc shift key2hash key2 val2 added-leaf?))))))\n  ([edit shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc! edit shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc! edit shift key2hash key2 val2 added-leaf?)))))))\n\n(deftype NodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (NodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll]\n    (if (nil? s)\n      (MapEntry. (aget nodes i) (aget nodes (inc i)) nil)\n      (first s)))\n\n  (-rest [coll]\n    (let [ret (if (nil? s)\n                (create-inode-seq nodes (+ i 2) nil)\n                (create-inode-seq nodes i (next s)))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (if (nil? s)\n      (create-inode-seq nodes (+ i 2) nil)\n      (create-inode-seq nodes i (next s))))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable NodeSeq)\n\n(defn- create-inode-seq\n  ([nodes]\n     (create-inode-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-not (nil? (aget nodes j))\n               (NodeSeq. nil nodes j nil nil)\n               (if-let [node (aget nodes (inc j))]\n                 (if-let [node-seq (.inode-seq node)]\n                   (NodeSeq. nil nodes (+ j 2) node-seq nil)\n                   (recur (+ j 2)))\n                 (recur (+ j 2)))))))\n       (NodeSeq. nil nodes i s nil))))\n\n(deftype ArrayNodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ArrayNodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll] (first s))\n  (-rest  [coll]\n    (let [ret (create-array-node-seq nodes i (next s))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (create-array-node-seq nodes i (next s)))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ArrayNodeSeq)\n\n(defn- create-array-node-seq\n  ([nodes] (create-array-node-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-let [nj (aget nodes j)]\n               (if-let [ns (.inode-seq nj)]\n                 (ArrayNodeSeq. nil nodes (inc j) ns nil)\n                 (recur (inc j)))\n               (recur (inc j))))))\n       (ArrayNodeSeq. nil nodes i s nil))))\n\n(deftype HashMapIter [nil-val root-iter ^:mutable seen]\n  Object\n  (hasNext [_]\n    (or (not ^boolean seen) ^boolean (.hasNext root-iter)))\n  (next [_]\n    (if-not ^boolean seen\n      (do\n        (set! seen true)\n        (MapEntry. nil nil-val nil))\n      (.next root-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashMap [meta cnt root ^boolean has-nil? nil-val ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashMap. meta cnt root has-nil? nil-val __hash))\n\n  IIterable\n  (-iterator [coll]\n    (let [root-iter (if ^boolean root (-iterator root) (nil-iter))]\n      (if has-nil?\n        (HashMapIter. nil-val root-iter false)\n        root-iter)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashMap. new-meta cnt root has-nil? nil-val __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? cnt)\n      (let [s (if-not (nil? root) (.inode-seq root))]\n        (if has-nil?\n          (cons (MapEntry. nil nil-val nil) s)\n          s))))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond (nil? k)    (if has-nil?\n                        nil-val\n                        not-found)\n          (nil? root) not-found\n          :else       (.inode-lookup root 0 (hash k) k not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (nil? k)\n      (if (and has-nil? (identical? v nil-val))\n        coll\n        (PersistentHashMap. meta (if has-nil? cnt (inc cnt)) root true v nil))\n      (let [added-leaf? (Box. false)\n            new-root    (-> (if (nil? root)\n                              (.-EMPTY BitmapIndexedNode)\n                              root)\n                            (.inode-assoc 0 (hash k) k v added-leaf?))]\n        (if (identical? new-root root)\n          coll\n          (PersistentHashMap. meta (if ^boolean (.-val added-leaf?) (inc cnt) cnt) new-root has-nil? nil-val nil)))))\n\n  (-contains-key? [coll k]\n    (cond (nil? k)    has-nil?\n          (nil? root) false\n          :else       (not (identical? (.inode-lookup root 0 (hash k) k lookup-sentinel)\n                                       lookup-sentinel))))\n\n  IFind\n  (-find [coll k]\n    (cond\n      (nil? k) (when has-nil? (MapEntry. nil nil-val nil))\n      (nil? root) nil\n      :else (.inode-find root 0 (hash k) k nil)))\n\n  IMap\n  (-dissoc [coll k]\n    (cond (nil? k)    (if has-nil?\n                        (PersistentHashMap. meta (dec cnt) root false nil nil)\n                        coll)\n          (nil? root) coll\n          :else\n          (let [new-root (.inode-without root 0 (hash k) k)]\n            (if (identical? new-root root)\n              coll\n              (PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [init (if has-nil? (f init nil nil-val) init)]\n      (cond\n        (reduced? init)          @init\n        (not (nil? root)) (unreduced (.kv-reduce root f init))\n        :else                    init)))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientHashMap. (js-obj) root cnt has-nil? nil-val)))\n\n(set! (.-EMPTY PersistentHashMap) (PersistentHashMap. nil 0 nil false nil empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashMap)\n  (fn [arr ^boolean no-clone]\n    (let [arr (if no-clone arr (aclone arr))\n          len (alength arr)]\n      (loop [i 0 ret (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (recur (+ i 2)\n            (-assoc! ret (aget arr i) (aget arr (inc i))))\n          (-persistent! ret))))))\n\n(set! (.-fromArrays PersistentHashMap)\n  (fn [ks vs]\n    (let [len (alength ks)]\n      (loop [i 0 ^not-native out (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (if (<= (alength vs) i)\n            (throw (js\/Error. (str \"No value supplied for key: \" (aget ks i))))\n            (recur (inc i) (-assoc! out (aget ks i) (aget vs i))))\n          (persistent! out))))))\n\n(set! (.-createWithCheck PersistentHashMap)\n  (fn [arr]\n    (let [len (alength arr)\n          ret (transient (.-EMPTY PersistentHashMap))]\n      (loop [i 0]\n        (when (< i len)\n          (-assoc! ret (aget arr i) (aget arr (inc i)))\n          (if (not= (-count ret) (inc (\/ i 2)))\n            (throw (js\/Error. (str \"Duplicate key: \" (aget arr i))))\n            (recur (+ i 2)))))\n      (-persistent! ret))))\n\n(es6-iterable PersistentHashMap)\n\n(deftype TransientHashMap [^:mutable ^boolean edit\n                           ^:mutable root\n                           ^:mutable count\n                           ^:mutable ^boolean has-nil?\n                           ^:mutable nil-val]\n  Object\n  (conj! [tcoll o]\n    (if edit\n      (cond\n        (map-entry? o)\n        (.assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (.assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (.assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent\"))))\n\n  (assoc! [tcoll k v]\n    (if edit\n      (if (nil? k)\n        (do (if (identical? nil-val v)\n              nil\n              (set! nil-val v))\n            (if has-nil?\n              nil\n              (do (set! count (inc count))\n                  (set! has-nil? true)))\n            tcoll)\n        (let [added-leaf? (Box. false)\n              node        (-> (if (nil? root)\n                                (.-EMPTY BitmapIndexedNode)\n                                root)\n                              (.inode-assoc! edit 0 (hash k) k v added-leaf?))]\n          (if (identical? node root)\n            nil\n            (set! root node))\n          (if ^boolean (.-val added-leaf?)\n            (set! count (inc count)))\n          tcoll))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (without! [tcoll k]\n    (if edit\n      (if (nil? k)\n        (if has-nil?\n          (do (set! has-nil? false)\n              (set! nil-val nil)\n              (set! count (dec count))\n              tcoll)\n          tcoll)\n        (if (nil? root)\n          tcoll\n          (let [removed-leaf? (Box. false)\n                node (.inode-without! root edit 0 (hash k) k removed-leaf?)]\n            (if (identical? node root)\n              nil\n              (set! root node))\n            (if ^boolean (.-val removed-leaf?)\n              (set! count (dec count)))\n            tcoll)))\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  (persistent! [tcoll]\n    (if edit\n      (do (set! edit nil)\n          (PersistentHashMap. nil count root has-nil? nil-val nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ICounted\n  (-count [coll]\n    (if edit\n      count\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (if (nil? k)\n      (if has-nil?\n        nil-val)\n      (if (nil? root)\n        nil\n        (.inode-lookup root 0 (hash k) k))))\n\n  (-lookup [tcoll k not-found]\n    (if (nil? k)\n      (if has-nil?\n        nil-val\n        not-found)\n      (if (nil? root)\n        not-found\n        (.inode-lookup root 0 (hash k) k not-found))))\n\n  ITransientCollection\n  (-conj! [tcoll val] (.conj! tcoll val))\n\n  (-persistent! [tcoll] (.persistent! tcoll))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val] (.assoc! tcoll key val))\n\n  ITransientMap\n  (-dissoc! [tcoll key] (.without! tcoll key))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n;;; PersistentTreeMap\n\n(defn- tree-map-seq-push [node stack ^boolean ascending?]\n  (loop [t node stack stack]\n    (if-not (nil? t)\n      (recur (if ascending? (.-left t) (.-right t))\n             (conj stack t))\n      stack)))\n\n(deftype PersistentTreeMapSeq [meta stack ^boolean ascending? cnt ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISeqable\n  (-seq [this] this)\n\n  ISequential\n  ISeq\n  (-first [this] (peek stack))\n  (-rest [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (if-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil)\n        ())))\n  INext\n  (-next [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (when-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil))))\n\n  ICounted\n  (-count [coll]\n    (if (neg? cnt)\n      (inc (count (next coll)))\n      cnt))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMapSeq. new-meta stack ascending? cnt __hash)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentTreeMapSeq)\n\n(defn- create-tree-map-seq [tree ascending? cnt]\n  (PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))\n\n(declare RedNode BlackNode)\n\n(defn- balance-left [key val ins right]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-left ins))\n      (RedNode. (.-key ins) (.-val ins)\n              (.blacken (.-left ins))\n              (BlackNode. key val (.-right ins) right nil)\n              nil)\n\n      (instance? RedNode (.-right ins))\n      (RedNode. (.. ins -right -key) (.. ins -right -val)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.-left ins)\n                            (.. ins -right -left)\n                            nil)\n                (BlackNode. key val\n                            (.. ins -right -right)\n                            right\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val ins right nil))\n    (BlackNode. key val ins right nil)))\n\n(defn- balance-right [key val left ins]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-right ins))\n      (RedNode. (.-key ins) (.-val ins)\n                (BlackNode. key val left (.-left ins) nil)\n                (.blacken (.-right ins))\n                nil)\n\n      (instance? RedNode (.-left ins))\n      (RedNode. (.. ins -left -key) (.. ins -left -val)\n                (BlackNode. key val left (.. ins -left -left) nil)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.. ins -left -right)\n                            (.-right ins)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val left ins nil))\n    (BlackNode. key val left ins nil)))\n\n(defn- balance-left-del [key val del right]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val (.blacken del) right nil)\n\n    (instance? BlackNode right)\n    (balance-right key val del (.redden right))\n\n    (and (instance? RedNode right) (instance? BlackNode (.-left right)))\n    (RedNode. (.. right -left -key) (.. right -left -val)\n              (BlackNode. key val del (.. right -left -left) nil)\n              (balance-right (.-key right) (.-val right)\n                             (.. right -left -right)\n                             (.redden (.-right right)))\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- balance-right-del [key val left del]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val left (.blacken del) nil)\n\n    (instance? BlackNode left)\n    (balance-left key val (.redden left) del)\n\n    (and (instance? RedNode left) (instance? BlackNode (.-right left)))\n    (RedNode. (.. left -right -key) (.. left -right -val)\n              (balance-left (.-key left) (.-val left)\n                            (.redden (.-left left))\n                            (.. left -right -left))\n              (BlackNode. key val (.. left -right -right) del nil)\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- tree-map-kv-reduce [node f init]\n  (let [init (if-not (nil? (.-left node))\n               (tree-map-kv-reduce (.-left node) f init)\n               init)]\n    (if (reduced? init)\n      init\n      (let [init (f init (.-key node) (.-val node))]\n        (if (reduced? init)\n          init\n          (if-not (nil? (.-right node))\n            (tree-map-kv-reduce (.-right node) f init)\n            init))))))\n\n(deftype BlackNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (.balance-left ins node))\n\n  (add-right [node ins]\n    (.balance-right ins node))\n\n  (remove-left [node del]\n    (balance-left-del key val del right))\n\n  (remove-right [node del]\n    (balance-right-del key val left del))\n\n  (blacken [node] node)\n\n  (redden [node] (RedNode. key val left right nil))\n\n  (balance-left [node parent]\n    (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil))\n\n  (balance-right [node parent]\n    (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil))\n\n  (replace [node key val left right]\n    (BlackNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable BlackNode)\n\n(deftype RedNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (RedNode. key val ins right nil))\n\n  (add-right [node ins]\n    (RedNode. key val left ins nil))\n\n  (remove-left [node del]\n    (RedNode. key val del right nil))\n\n  (remove-right [node del]\n    (RedNode. key val left del nil))\n\n  (blacken [node]\n    (BlackNode. key val left right nil))\n\n  (redden [node]\n    (throw (js\/Error. \"red-black tree invariant violation\")))\n\n  (balance-left [node parent]\n    (cond\n      (instance? RedNode left)\n      (RedNode. key val\n                (.blacken left)\n                (BlackNode. (.-key parent) (.-val parent) right (.-right parent) nil)\n                nil)\n\n      (instance? RedNode right)\n      (RedNode. (.-key right) (.-val right)\n                (BlackNode. key val left (.-left right) nil)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-right right)\n                            (.-right parent)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil)))\n\n  (balance-right [node parent]\n    (cond\n      (instance? RedNode right)\n      (RedNode. key val\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            left\n                            nil)\n                (.blacken right)\n                nil)\n\n      (instance? RedNode left)\n      (RedNode. (.-key left) (.-val left)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            (.-left left)\n                            nil)\n                (BlackNode. key val (.-right left) right nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil)))\n\n  (replace [node key val left right]\n    (RedNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable RedNode)\n\n(defn- tree-map-add [comp tree k v found]\n  (if (nil? tree)\n    (RedNode. k v nil nil nil)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            nil)\n\n        (neg? c)\n        (let [ins (tree-map-add comp (.-left tree) k v found)]\n          (if-not (nil? ins)\n            (.add-left tree ins)))\n\n        :else\n        (let [ins (tree-map-add comp (.-right tree) k v found)]\n          (if-not (nil? ins)\n            (.add-right tree ins)))))))\n\n(defn- tree-map-append [left right]\n  (cond\n    (nil? left)\n    right\n\n    (nil? right)\n    left\n\n    (instance? RedNode left)\n    (if (instance? RedNode right)\n      (let [app (tree-map-append (.-right left) (.-left right))]\n        (if (instance? RedNode app)\n          (RedNode. (.-key app) (.-val app)\n                    (RedNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                    (RedNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                    nil)\n          (RedNode. (.-key left) (.-val left)\n                    (.-left left)\n                    (RedNode. (.-key right) (.-val right) app (.-right right) nil)\n                    nil)))\n      (RedNode. (.-key left) (.-val left)\n                (.-left left)\n                (tree-map-append (.-right left) right)\n                nil))\n\n    (instance? RedNode right)\n    (RedNode. (.-key right) (.-val right)\n              (tree-map-append left (.-left right))\n              (.-right right)\n              nil)\n\n    :else\n    (let [app (tree-map-append (.-right left) (.-left right))]\n      (if (instance? RedNode app)\n        (RedNode. (.-key app) (.-val app)\n                  (BlackNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                  (BlackNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                  nil)\n        (balance-left-del (.-key left) (.-val left)\n                          (.-left left)\n                          (BlackNode. (.-key right) (.-val right)\n                                      app\n                                      (.-right right)\n                                      nil))))))\n\n(defn- tree-map-remove [comp tree k found]\n  (if-not (nil? tree)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            (tree-map-append (.-left tree) (.-right tree)))\n\n        (neg? c)\n        (let [del (tree-map-remove comp (.-left tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-left tree))\n              (balance-left-del (.-key tree) (.-val tree) del (.-right tree))\n              (RedNode. (.-key tree) (.-val tree) del (.-right tree) nil))))\n\n        :else\n        (let [del (tree-map-remove comp (.-right tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-right tree))\n              (balance-right-del (.-key tree) (.-val tree) (.-left tree) del)\n              (RedNode. (.-key tree) (.-val tree) (.-left tree) del nil))))))))\n\n(defn- tree-map-replace [comp tree k v]\n  (let [tk (.-key tree)\n        c  (comp k tk)]\n    (cond (zero? c) (.replace tree tk v (.-left tree) (.-right tree))\n          (neg? c)  (.replace tree tk (.-val tree) (tree-map-replace comp (.-left tree) k v) (.-right tree))\n          :else     (.replace tree tk (.-val tree) (.-left tree) (tree-map-replace comp (.-right tree) k v)))))\n\n(declare key)\n\n(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  (entry-at [coll k]\n    (loop [t tree]\n      (if-not (nil? t)\n        (let [c (comp k (.-key t))]\n          (cond (zero? c) t\n                (neg? c)  (recur (.-left t))\n                :else     (recur (.-right t)))))))\n\n  ICloneable\n  (-clone [_] (PersistentTreeMap. comp tree cnt meta __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMap. comp tree cnt new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeMap. comp nil 0 meta 0))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (if-not (nil? tree)\n      (unreduced (tree-map-kv-reduce tree f init))\n      init))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  ISeqable\n  (-seq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree true cnt)))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree false cnt)))\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [n (.entry-at coll k)]\n      (if-not (nil? n)\n        (.-val n)\n        not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [found (array nil)\n          t     (tree-map-add comp tree k v found)]\n      (if (nil? t)\n        (let [found-node (nth found 0)]\n          (if (= v (.-val found-node))\n            coll\n            (PersistentTreeMap. comp (tree-map-replace comp tree k v) cnt meta nil)))\n        (PersistentTreeMap. comp (.blacken t) (inc cnt) meta nil))))\n\n  (-contains-key? [coll k]\n    (not (nil? (.entry-at coll k))))\n\n  IFind\n  (-find [coll k]\n    (.entry-at coll k))\n\n  IMap\n  (-dissoc [coll k]\n    (let [found (array nil)\n          t     (tree-map-remove comp tree k found)]\n      (if (nil? t)\n        (if (nil? (nth found 0))\n          coll\n          (PersistentTreeMap. comp nil 0 meta nil))\n        (PersistentTreeMap. comp (.blacken t) (dec cnt) meta nil))))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (if (pos? cnt)\n      (create-tree-map-seq tree ascending? cnt)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (if (pos? cnt)\n      (loop [stack nil t tree]\n        (if-not (nil? t)\n          (let [c (comp k (.-key t))]\n            (cond\n              (zero? c)  (PersistentTreeMapSeq. nil (conj stack t) ascending? -1 nil)\n              ascending? (if (neg? c)\n                           (recur (conj stack t) (.-left t))\n                           (recur stack          (.-right t)))\n              :else      (if (pos? c)\n                           (recur (conj stack t) (.-right t))\n                           (recur stack          (.-left t)))))\n          (when-not (nil? stack)\n            (PersistentTreeMapSeq. nil stack ascending? -1 nil))))))\n\n  (-entry-key [coll entry] (key entry))\n\n  (-comparator [coll] comp))\n\n(set! (.-EMPTY PersistentTreeMap) (PersistentTreeMap. compare nil 0 nil empty-unordered-hash))\n\n(es6-iterable PersistentTreeMap)\n\n(defn hash-map\n  \"keyval => key val\n  Returns a new hash map with supplied mappings.\"\n  [& keyvals]\n  (loop [in (seq keyvals), out (transient (.-EMPTY PersistentHashMap))]\n    (if in\n      (let [in' (next in)]\n        (if (nil? in')\n          (throw (js\/Error. (str \"No value supplied for key: \" (first in))))\n          (recur (next in') (assoc! out (first in) (first in')) )))\n      (persistent! out))))\n\n(defn array-map\n  \"keyval => key val\n  Returns a new array map with supplied mappings.\"\n  [& keyvals]\n  (let [arr (if (and (instance? IndexedSeq keyvals) (zero? (.-i keyvals)))\n              (.-arr keyvals)\n              (into-array keyvals))]\n    (if (odd? (alength arr))\n      (throw (js\/Error. (str \"No value supplied for key: \" (last arr))))\n      (.createAsIfByAssoc PersistentArrayMap arr))))\n\n(defn seq-to-map-for-destructuring\n  \"Builds a map from a seq as described in\n  https:\/\/clojure.org\/reference\/special_forms#keyword-arguments\"\n  [s]\n  (if (next s)\n    (.createAsIfByAssoc PersistentArrayMap (to-array s))\n    (if (seq s) (first s) (.-EMPTY PersistentArrayMap))))\n\n(defn obj-map\n  \"keyval => key val\n  Returns a new object map with supplied mappings.\"\n  [& keyvals]\n  (let [ks  (array)\n        obj (js-obj)]\n    (loop [kvs (seq keyvals)]\n      (if kvs\n        (do (.push ks (first kvs))\n            (gobject\/set obj (first kvs) (second kvs))\n            (recur (nnext kvs)))\n        (.fromObject ObjMap ks obj)))))\n\n(defn sorted-map\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out (.-EMPTY PersistentTreeMap)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn sorted-map-by\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals)\n            out (PersistentTreeMap. (fn->comparator comparator) nil 0 nil 0)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(deftype KeySeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (KeySeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-key me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (KeySeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (KeySeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable KeySeq)\n\n(defn keys\n  \"Returns a sequence of the map's keys, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (KeySeq. mseq nil)))\n\n(defn key\n  \"Returns the key of the map entry.\"\n  [map-entry]\n  (-key map-entry))\n\n(deftype ValSeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (ValSeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-val me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (ValSeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (ValSeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ValSeq)\n\n(defn vals\n  \"Returns a sequence of the map's values, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (ValSeq. mseq nil)))\n\n(defn val\n  \"Returns the value in the map entry.\"\n  [map-entry]\n  (-val map-entry))\n\n(defn merge\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.\"\n  [& maps]\n  (when (some identity maps)\n    (reduce #(conj (or %1 {}) %2) maps)))\n\n(defn merge-with\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).\"\n  [f & maps]\n  (when (some identity maps)\n    (let [merge-entry (fn [m e]\n                        (let [k (key e) v (val e)]\n                          (if (contains? m k)\n                            (assoc m k (f (get m k) v))\n                            (assoc m k v))))\n          merge2 (fn [m1 m2]\n                   (reduce merge-entry (or m1 {}) (seq m2)))]\n      (reduce merge2 maps))))\n\n(defn select-keys\n  \"Returns a map containing only those entries in map whose key is in keys\"\n  [map keyseq]\n    (loop [ret {} keys (seq keyseq)]\n      (if keys\n        (let [key   (first keys)\n              entry (get map key ::not-found)]\n          (recur\n           (if (not= entry ::not-found)\n             (assoc ret key entry)\n             ret)\n           (next keys)))\n        (-with-meta ret (meta map)))))\n\n;;; PersistentHashSet\n\n(declare TransientHashSet)\n\n(deftype HashSetIter [iter]\n  Object\n  (hasNext [_]\n    (.hasNext iter))\n  (next [_]\n    (if ^boolean (.hasNext iter)\n      (.-key (.next iter))\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashSet [meta hash-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashSet. meta hash-map __hash))\n\n  IIterable\n  (-iterator [coll]\n    (HashSetIter. (-iterator hash-map)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashSet. new-meta hash-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentHashSet. meta (assoc hash-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashSet) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true hash-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys hash-map))\n\n  ICounted\n  (-count [coll] (-count hash-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (if-let [entry (-find hash-map v)]\n      (key entry)\n      not-found))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentHashSet. meta (-dissoc hash-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll] (TransientHashSet. (-as-transient hash-map))))\n\n(set! (.-EMPTY PersistentHashSet)\n  (PersistentHashSet. nil (.-EMPTY PersistentArrayMap) empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashSet)\n  (fn [items ^boolean no-clone]\n    (let [len (alength items)]\n      (if (<= len (.-HASHMAP-THRESHOLD PersistentArrayMap))\n        (let [arr (if no-clone items (aclone items))]\n          (loop [i 0\n                 out (transient (.-EMPTY PersistentArrayMap))]\n            (if (< i len)\n              (recur (inc i) (-assoc! out (aget items i) nil))\n              (PersistentHashSet. nil (-persistent! out) nil))))\n       (loop [i 0\n              out (transient (.-EMPTY PersistentHashSet))]\n         (if (< i len)\n           (recur (inc i) (-conj! out (aget items i)))\n           (-persistent! out)))))))\n\n(set! (.-createWithCheck PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len]\n            (-conj! t (aget items i))\n            (when-not (= (count t) (inc i))\n              (throw (js\/Error. (str \"Duplicate key: \" (aget items i))))))\n          (-persistent! t))))\n\n(set! (.-createAsIfByAssoc PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len] (-conj! t (aget items i)))\n          (-persistent! t))))\n\n(es6-iterable PersistentHashSet)\n\n(deftype TransientHashSet [^:mutable transient-map]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (set! transient-map (assoc! transient-map o nil))\n    tcoll)\n\n  (-persistent! [tcoll]\n    (PersistentHashSet. nil (persistent! transient-map) nil))\n\n  ITransientSet\n  (-disjoin! [tcoll v]\n    (set! transient-map (dissoc! transient-map v))\n    tcoll)\n\n  ICounted\n  (-count [tcoll] (count transient-map))\n\n  ILookup\n  (-lookup [tcoll v]\n    (-lookup tcoll v nil))\n\n  (-lookup [tcoll v not-found]\n    (if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)\n      not-found\n      v))\n\n  IFn\n  (-invoke [tcoll k]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      nil\n      k))\n\n  (-invoke [tcoll k not-found]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      not-found\n      k)))\n\n(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentTreeSet. meta tree-map __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeSet. new-meta tree-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentTreeSet. meta (assoc tree-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeSet. meta (-empty tree-map) 0))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true tree-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys tree-map))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (map key (-sorted-seq tree-map ascending?)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (map key (-sorted-seq-from tree-map k ascending?)))\n\n  (-entry-key [coll entry] entry)\n\n  (-comparator [coll] (-comparator tree-map))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? (count tree-map))\n      (map key (rseq tree-map))))\n\n  ICounted\n  (-count [coll] (count tree-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (let [n (.entry-at tree-map v)]\n      (if-not (nil? n)\n        (.-key n)\n        not-found)))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentTreeSet. meta (dissoc tree-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n(set! (.-EMPTY PersistentTreeSet)\n  (PersistentTreeSet. nil (.-EMPTY PersistentTreeMap) empty-unordered-hash))\n\n(es6-iterable PersistentTreeSet)\n\n(defn set-from-indexed-seq [iseq]\n  (let [arr (.-arr iseq)\n        ret (areduce arr i ^not-native res (-as-transient #{})\n              (-conj! res (aget arr i)))]\n    (-persistent! ^not-native ret)))\n\n(defn set\n  \"Returns a set of the distinct elements of coll.\"\n  [coll]\n  (if (set? coll)\n    (with-meta coll nil)\n    (let [in (seq coll)]\n      (cond\n        (nil? in) #{}\n\n        (and (instance? IndexedSeq in) (zero? (.-i in)))\n        (.createAsIfByAssoc PersistentHashSet (.-arr in))\n\n        :else\n        (loop [^not-native in  in\n               ^not-native out (-as-transient #{})]\n          (if-not (nil? in)\n            (recur (next in) (-conj! out (-first in)))\n            (persistent! out)))))))\n\n(defn hash-set\n  \"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.\"\n  ([] #{})\n  ([& keys] (set keys)))\n\n(defn sorted-set\n  \"Returns a new sorted set with supplied keys.\"\n  ([& keys]\n   (reduce -conj (.-EMPTY PersistentTreeSet) keys)))\n\n(defn sorted-set-by\n  \"Returns a new sorted set with supplied keys, using the supplied comparator.\"\n  ([comparator & keys]\n   (reduce -conj\n           (PersistentTreeSet. nil (sorted-map-by comparator) 0)\n           keys)))\n\n(defn replace\n  \"Given a map of replacement pairs and a vector\/collection, returns a\n  vector\/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.\"\n  ([smap]\n     (map #(if-let [e (find smap %)] (val e) %)))\n  ([smap coll]\n     (if (vector? coll)\n       (let [n (count coll)]\n         (reduce (fn [v i]\n                   (if-let [e (find smap (nth v i))]\n                     (assoc v i (second e))\n                     v))\n           coll (take n (iterate inc 0))))\n       (map #(if-let [e (find smap %)] (second e) %) coll))))\n\n(defn distinct\n  \"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.\"\n  ([]\n    (fn [rf]\n      (let [seen (volatile! #{})]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if (contains? @seen input)\n              result\n              (do (vswap! seen conj input)\n                  (rf result input))))))))\n  ([coll]\n    (let [step (fn step [xs seen]\n                 (lazy-seq\n                   ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{}))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn butlast\n  \"Return a seq of all but the last item in coll, in linear time\"\n  [s]\n  (loop [ret [] s s]\n    (if (next s)\n      (recur (conj ret (first s)) (next s))\n      (seq ret))))\n\n(defn name\n  \"Returns the name String of a string, symbol or keyword.\"\n  [x]\n  (if (implements? INamed x)\n    (-name x)\n    (if (string? x)\n      x\n      (throw (js\/Error. (str \"Doesn't support name: \" x))))))\n\n(defn zipmap\n  \"Returns a map with the keys mapped to the corresponding vals.\"\n  [keys vals]\n    (loop [map (transient {})\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc! map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        (persistent! map))))\n\n(defn max-key\n  \"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (> (k x) (k y)) x y))\n  ([k x y & more]\n   (reduce #(max-key k %1 %2) (max-key k x y) more)))\n\n(defn min-key\n  \"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (< (k x) (k y)) x y))\n  ([k x y & more]\n     (reduce #(min-key k %1 %2) (min-key k x y) more)))\n\n(deftype ArrayList [^:mutable arr]\n  Object\n  (add [_ x] (.push arr x))\n  (size [_] (alength arr))\n  (clear [_] (set! arr (array)))\n  (isEmpty [_] (zero? (alength arr)))\n  (toArray [_] arr))\n\n(defn array-list []\n  (ArrayList. (array)))\n\n(defn partition-all\n  \"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   (fn [rf]\n     (let [a (array-list)]\n       (fn\n         ([] (rf))\n         ([result]\n            (let [result (if (.isEmpty a)\n                           result\n                           (let [v (vec (.toArray a))]\n                             ;;clear first!\n                             (.clear a)\n                             (unreduced (rf result v))))]\n              (rf result)))\n         ([result input]\n            (.add a input)\n            (if (== n (.size a))\n              (let [v (vec (.toArray a))]\n                (.clear a)\n                (rf result v))\n              result))))))\n  ([n coll]\n     (partition-all n n coll))\n  ([n step coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (take n s) (partition-all n step (drop step s)))))))\n\n(defn splitv-at\n  \"Returns a vector of [(into [] (take n) coll) (drop n coll)]\"\n  [n coll]\n  [(into [] (take n) coll) (drop n coll)])\n\n(defn partitionv\n  \"Returns a lazy sequence of vectors of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.\"\n  ([n coll]\n   (partitionv n n coll))\n  ([n step coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (let [p (into [] (take n) s)]\n         (when (= n (count p))\n           (cons p (partitionv n step (nthrest s step))))))))\n  ([n step pad coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (let [p (into [] (take n) s)]\n         (if (= n (count p))\n           (cons p (partitionv n step pad (nthrest s step)))\n           (list (into [] (take n) (concat p pad)))))))))\n\n(defn partitionv-all\n  \"Returns a lazy sequence of vector partitions, but may include\n  partitions with fewer than n items at the end.\n  Returns a stateful transducer when no collection is provided.\"\n  ([n]\n   (partition-all n))\n  ([n coll]\n   (partitionv-all n n coll))\n  ([n step coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (let [seg (into [] (take n) coll)]\n         (cons seg (partitionv-all n step (drop step s))))))))\n\n(defn take-while\n  \"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (if (pred input)\n              (rf result input)\n              (reduced result))))))\n  ([pred coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (when (pred (first s))\n           (cons (first s) (take-while pred (rest s))))))))\n\n(defn mk-bound-fn\n  [sc test key]\n  (fn [e]\n    (let [comp (-comparator sc)]\n      (test (comp (-entry-key sc e) key) 0))))\n\n(defn subseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{> >=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key true)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc true)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc start-key true)]\n       (take-while (mk-bound-fn sc end-test end-key)\n                   (if ((mk-bound-fn sc start-test start-key) e) s (next s))))))\n\n(defn rsubseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{< <=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key false)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc false)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc end-key false)]\n       (take-while (mk-bound-fn sc start-test start-key)\n                   (if ((mk-bound-fn sc end-test end-key) e) s (next s))))))\n\n(deftype IntegerRangeChunk [start step count]\n  ICounted\n  (-count [coll] count)\n\n  ISeq\n  (-first [coll] start)\n\n  IIndexed\n  (-nth [coll i]\n    (+ start (* i step)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i count))\n      (+ start (* i step))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (<= count 1)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (IntegerRangeChunk. (+ start step) step (dec count)))))\n\n(deftype RangeIterator [^:mutable i end step]\n  Object\n  (hasNext [_]\n    (if (pos? step)\n      (< i end)\n      (> i end)))\n  (next [_]\n    (let [ret i]\n      (set! i (+ i step))\n      ret)))\n\n(defn- range-count\n  \"Returns exact size of remaining items in an IntegerRange.\"\n  [start end step]\n  (Math\/ceil (\/ (- end start) step)))\n\n(deftype IntegerRange [meta start end step cnt ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (IntegerRange. meta start end step cnt __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (IntegerRange. new-meta start end step cnt __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (IntegerRange. nil (+ start step) end step (range-count (+ start step) end step) nil))\n      (when (> (+ start step) end)\n        (IntegerRange. nil (+ start step) end step (range-count (+ start step) end step) nil))))\n\n  IDrop\n  (-drop [rng n]\n    (if (pos? n)\n      (if (< n cnt)\n        (IntegerRange. nil (+ start (* step n)) end step (- cnt n) nil)\n        nil)\n      rng))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (IntegerRangeChunk. start step (min cnt 32)))\n  (-chunked-rest [rng]\n    (if (<= cnt 32)\n      ()\n      (let [start (+ start (* step 32))]\n        (cond\n          (pos? step)\n          (if (<= end start)\n            ()\n            (IntegerRange. nil start end step (range-count start end step) nil))\n\n          (neg? step)\n          (if (>= end start)\n            ()\n            (IntegerRange. nil start end step (range-count start end step) nil))\n\n          :else\n          (if (== end start)\n            ()\n            (repeat start))))))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  ICounted\n  (-count [rng]\n    cnt)\n\n  IIndexed\n  (-nth [rng n]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [rng n not-found]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        not-found)))\n\n  IReduce\n  (-reduce [rng f] (ci-reduce rng f))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable IntegerRange)\n\n(deftype Range [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [arr (make-array 32)\n            val (loop [n 0 val start]\n                  (if (< n 32)\n                    (do\n                      (aset arr n val)\n                      (let [n (inc n)\n                            val (+ val step)]\n                        (if (if (pos? step) (< val end) (> val end))\n                          (recur n val)\n                          (set! chunk (array-chunk arr 0 n)))))\n                    val))]\n        (when (nil? chunk)\n          (set! chunk (array-chunk arr 0 32))\n          (when (if (pos? step) (< val end) (> val end))\n            (set! chunk-next (Range. nil val end step nil nil nil)))))))\n\n  ICloneable\n  (-clone [_] (Range. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (Range. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [rng f] (seq-reduce f rng))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable Range)\n\n(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.\"\n  ([] (range 0 (.-MAX_VALUE js\/Number) 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (cond\n     (pos? step)\n     (if (<= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step (range-count start end step) nil)\n         (Range. nil start end step nil nil nil)))\n\n     (neg? step)\n     (if (>= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step (range-count start end step) nil)\n         (Range. nil start end step nil nil nil)))\n\n     :else\n     (if (== end start)\n       ()\n       (repeat start)))))\n\n(defn take-nth\n  \"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [ia (volatile! -1)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [i (vswap! ia inc)]\n                (if (zero? (rem i n))\n                  (rf result input)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (cons (first s) (take-nth n (drop n s)))))))\n\n(defn split-with\n  \"Returns a vector of [(take-while pred coll) (drop-while pred coll)]\"\n  [pred coll]\n  [(take-while pred coll) (drop-while pred coll)])\n\n(defn partition-by\n  \"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.\"\n  ([f]\n     (fn [rf]\n       (let [a (array-list)\n             pa (volatile! ::none)]\n         (fn\n           ([] (rf))\n           ([result]\n              (let [result (if (.isEmpty a)\n                             result\n                             (let [v (vec (.toArray a))]\n                               ;;clear first!\n                               (.clear a)\n                               (unreduced (rf result v))))]\n                (rf result)))\n           ([result input]\n              (let [pval @pa\n                    val (f input)]\n                (vreset! pa val)\n                (if (or (keyword-identical? pval ::none)\n                        (= val pval))\n                  (do\n                    (.add a input)\n                    result)\n                  (let [v (vec (.toArray a))]\n                    (.clear a)\n                    (let [ret (rf result v)]\n                      (when-not (reduced? ret)\n                        (.add a input))\n                      ret)))))))))\n  ([f coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [fst (first s)\n               fv (f fst)\n               run (cons fst (take-while #(= fv (f %)) (next s)))]\n           (cons run (partition-by f (lazy-seq (drop (count run) s)))))))))\n\n(defn frequencies\n  \"Returns a map from distinct items in coll to the number of times\n  they appear.\"\n  [coll]\n  (persistent!\n   (reduce (fn [counts x]\n             (assoc! counts x (inc (get counts x 0))))\n           (transient {}) coll)))\n\n(defn reductions\n  \"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.\"\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (if (reduced? init)\n     (list @init)\n     (cons init\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (reductions f (f init (first s)) (rest s))))))))\n\n(defn juxt\n  \"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]\"\n  ([f]\n     (fn\n       ([] (vector (f)))\n       ([x] (vector (f x)))\n       ([x y] (vector (f x y)))\n       ([x y z] (vector (f x y z)))\n       ([x y z & args] (vector (apply f x y z args)))))\n  ([f g]\n     (fn\n       ([] (vector (f) (g)))\n       ([x] (vector (f x) (g x)))\n       ([x y] (vector (f x y) (g x y)))\n       ([x y z] (vector (f x y z) (g x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (vector (f) (g) (h)))\n       ([x] (vector (f x) (g x) (h x)))\n       ([x y] (vector (f x y) (g x y) (h x y)))\n       ([x y z] (vector (f x y z) (g x y z) (h x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args) (apply h x y z args)))))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))\n\n(defn dorun\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.\"\n  ([coll]\n   (when-let [s (seq coll)]\n     (recur (next s))))\n  ([n coll]\n   (when (and (seq coll) (pos? n))\n     (recur (dec n) (next coll)))))\n\n(defn doall\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.\"\n  ([coll]\n   (dorun coll)\n   coll)\n  ([n coll]\n   (dorun n coll)\n   coll))\n\n;;;;;;;;;;;;;;;;;;;;;;;;; Regular Expressions ;;;;;;;;;;\n\n(defn regexp?\n  \"Returns true if x is a JavaScript RegExp instance.\"\n  [x]\n  (instance? js\/RegExp x))\n\n(defn re-matches\n  \"Returns the result of (re-find re s) if re fully matches s.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when (and (not (nil? matches))\n                 (= (aget matches 0) s))\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-matches must match against a string.\"))))\n\n\n(defn re-find\n  \"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when-not (nil? matches)\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-find must match against a string.\"))))\n\n(defn- re-seq* [re s]\n  (when-some [matches (.exec re s)]\n    (let [match-str (aget matches 0)\n          match-vals (if (== (.-length matches) 1)\n                       match-str\n                       (vec matches))]\n      (cons match-vals\n            (lazy-seq\n             (let [post-idx (+ (.-index matches)\n                               (max 1 (.-length match-str)))]\n               (when (<= post-idx (.-length s))\n                 (re-seq* re (subs s post-idx)))))))))\n\n(defn re-seq\n  \"Returns a lazy sequence of successive matches of re in s.\"\n  [re s]\n  (if (string? s)\n    (re-seq* re s)\n    (throw (js\/TypeError. \"re-seq must match against a string.\"))))\n\n(defn re-pattern\n  \"Returns an instance of RegExp which has compiled the provided string.\"\n  [s]\n  (if (instance? js\/RegExp s)\n    s\n    (let [[prefix flags] (re-find #\"^\\(\\?([idmsux]*)\\)\" s)\n          pattern (subs s (if (nil? prefix)\n                            0\n                            (count ^string prefix)))]\n      (js\/RegExp. pattern (or flags \"\")))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Printing ;;;;;;;;;;;;;;;;\n\n(defn pr-sequential-writer [writer print-one begin sep end opts coll]\n  (binding [*print-level* (when-not (nil? *print-level*) (dec *print-level*))]\n    (if (and (not (nil? *print-level*)) (neg? *print-level*))\n      (-write writer \"#\")\n      (do\n        (-write writer begin)\n        (if (zero? (:print-length opts))\n          (when (seq coll)\n            (-write writer (or (:more-marker opts) \"...\")))\n          (do\n            (when (seq coll)\n              (print-one (first coll) writer opts))\n            (loop [coll (next coll) n (dec (:print-length opts))]\n              (if (and coll (or (nil? n) (not (zero? n))))\n                (do\n                  (-write writer sep)\n                  (print-one (first coll) writer opts)\n                  (recur (next coll) (dec n)))\n                (when (and (seq coll) (zero? n))\n                  (-write writer sep)\n                  (-write writer (or (:more-marker opts) \"...\")))))))\n        (-write writer end)))))\n\n(defn write-all [writer & ss]\n  (doseq [s ss]\n    (-write writer s)))\n\n(defn string-print [x]\n  (when (nil? *print-fn*)\n    (throw (js\/Error. \"No *print-fn* fn set for evaluation environment\")))\n  (*print-fn* x)\n  nil)\n\n(defn flush [] ;stub\n  nil)\n\n(def ^:private char-escapes\n  (js-obj\n    \"\\\"\" \"\\\\\\\"\"\n    \"\\\\\" \"\\\\\\\\\"\n    \"\\b\" \"\\\\b\"\n    \"\\f\" \"\\\\f\"\n    \"\\n\" \"\\\\n\"\n    \"\\r\" \"\\\\r\"\n    \"\\t\" \"\\\\t\"))\n\n(defn ^:private quote-string\n  [s]\n  (str \\\"\n       (.replace s (js\/RegExp \"[\\\\\\\\\\\"\\b\\f\\n\\r\\t]\" \"g\")\n         (fn [match] (unchecked-get char-escapes match)))\n       \\\"))\n\n(declare print-map)\n\n(defn print-meta? [opts obj]\n  (and (boolean (get opts :meta))\n       (implements? IMeta obj)\n       (not (nil? (meta obj)))))\n\n(defn- pr-writer-impl\n  [obj writer opts]\n  (cond\n    (nil? obj) (-write writer \"nil\")\n    :else\n    (do\n      (when (print-meta? opts obj)\n        (-write writer \"^\")\n        (pr-writer (meta obj) writer opts)\n        (-write writer \" \"))\n      (cond\n        ;; handle CLJS ctors\n        ^boolean (.-cljs$lang$type obj)\n        (.cljs$lang$ctorPrWriter obj obj writer opts)\n\n        ; Use the new, more efficient, IPrintWithWriter interface when possible.\n        (satisfies? IPrintWithWriter obj)\n        (-pr-writer obj writer opts)\n\n        (or (true? obj) (false? obj))\n        (-write writer (str obj))\n\n        (number? obj)\n        (-write writer\n          (cond\n            ^boolean (js\/isNaN obj) \"##NaN\"\n            (identical? obj js\/Number.POSITIVE_INFINITY) \"##Inf\"\n            (identical? obj js\/Number.NEGATIVE_INFINITY) \"##-Inf\"\n            :else (str obj)))\n\n        (object? obj)\n        (do\n          (-write writer \"#js \")\n          (print-map\n            (map (fn [k]\n                   (MapEntry. (cond-> k (some? (re-matches #\"[A-Za-z_\\*\\+\\?!\\-'][\\w\\*\\+\\?!\\-']*\" k)) keyword) (unchecked-get obj k) nil))\n              (js-keys obj))\n            pr-writer writer opts))\n\n        (array? obj)\n        (pr-sequential-writer writer pr-writer \"#js [\" \" \" \"]\" opts obj)\n\n        (string? obj)\n        (if (:readably opts)\n          (-write writer (quote-string obj))\n          (-write writer obj))\n\n        (js-fn? obj)\n        (let [name (.-name obj)\n              name (if (or (nil? name) (gstring\/isEmpty name))\n                     \"Function\"\n                     name)]\n          (write-all writer \"#object[\" name\n            (if *print-fn-bodies*\n              (str \" \\\"\" (str obj) \"\\\"\")\n              \"\")\n            \"]\"))\n\n        (instance? js\/Date obj)\n        (let [normalize (fn [n len]\n                          (loop [ns (str n)]\n                            (if (< (count ns) len)\n                              (recur (str \"0\" ns))\n                              ns)))]\n          (write-all writer\n            \"#inst \\\"\"\n            (normalize (.getUTCFullYear obj) 4)     \"-\"\n            (normalize (inc (.getUTCMonth obj)) 2)  \"-\"\n            (normalize (.getUTCDate obj) 2)         \"T\"\n            (normalize (.getUTCHours obj) 2)        \":\"\n            (normalize (.getUTCMinutes obj) 2)      \":\"\n            (normalize (.getUTCSeconds obj) 2)      \".\"\n            (normalize (.getUTCMilliseconds obj) 3) \"-\"\n            \"00:00\\\"\"))\n\n        (regexp? obj) (write-all writer \"#\\\"\" (.-source obj) \"\\\"\")\n\n        (js-symbol? obj) (write-all writer \"#object[\" (.toString obj) \"]\" )\n\n        :else\n        (if (some-> obj .-constructor .-cljs$lang$ctorStr)\n          (write-all writer\n            \"#object[\" (.replace (.. obj -constructor -cljs$lang$ctorStr)\n                         (js\/RegExp. \"\/\" \"g\") \".\") \"]\")\n          (let [name (some-> obj .-constructor .-name)\n                name (if (or (nil? name) (gstring\/isEmpty name))\n                       \"Object\"\n                       name)]\n            (if (nil? (. obj -constructor))\n              (write-all writer \"#object[\" name \"]\")\n              (write-all writer \"#object[\" name \" \" (str obj) \"]\"))))))))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn prn-str-with-opts\n  \"Same as pr-str-with-opts followed by (newline)\"\n  [objs opts]\n  (if (empty? objs)\n    \"\\n\"\n    (let [sb (pr-sb-with-opts objs opts)]\n      (.append sb \\newline)\n      (str sb))))\n\n(defn- pr-with-opts\n  \"Prints a sequence of objects using string-print, observing all\n  the options given in opts\"\n  [objs opts]\n  (string-print (pr-str-with-opts objs opts)))\n\n(defn newline\n  \"Prints a newline using *print-fn*\"\n  ([] (newline nil))\n  ([opts]\n   (string-print \"\\n\")\n   (when (get opts :flush-on-newline)\n     (flush))))\n\n(defn pr-str\n  \"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.\"\n  [& objs]\n  (pr-str-with-opts objs (pr-opts)))\n\n(defn prn-str\n  \"Same as pr-str followed by (newline)\"\n  [& objs]\n  (prn-str-with-opts objs (pr-opts)))\n\n(defn pr\n  \"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader\"\n  [& objs]\n  (pr-with-opts objs (pr-opts)))\n\n(def ^{:doc\n  \"Prints the object(s) using string-print.\n  print and println produce output for human consumption.\"}\n  print\n  (fn cljs-core-print [& objs]\n    (pr-with-opts objs (assoc (pr-opts) :readably false))))\n\n(defn print-str\n  \"print to a string, returning it\"\n  [& objs]\n  (pr-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn println\n  \"Same as print followed by (newline)\"\n  [& objs]\n  (pr-with-opts objs (assoc (pr-opts) :readably false))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn println-str\n  \"println to a string, returning it\"\n  [& objs]\n  (prn-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn prn\n  \"Same as pr followed by (newline).\"\n  [& objs]\n  (pr-with-opts objs (pr-opts))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn- strip-ns\n  [named]\n  (if (symbol? named)\n    (symbol nil (name named))\n    (keyword nil (name named))))\n\n(defn- lift-ns\n  \"Returns [lifted-ns lifted-map] or nil if m can't be lifted.\"\n  [m]\n  (when *print-namespace-maps*\n    (loop [ns nil\n           [[k v :as entry] & entries] (seq m)\n           lm (empty m)]\n      (if entry\n        (when (or (keyword? k) (symbol? k))\n          (if ns\n            (when (= ns (namespace k))\n              (recur ns entries (assoc lm (strip-ns k) v)))\n            (when-let [new-ns (namespace k)]\n              (recur new-ns entries (assoc lm (strip-ns k) v)))))\n        [ns lm]))))\n\n(defn print-prefix-map [prefix m print-one writer opts]\n  (pr-sequential-writer\n    writer\n    (fn [e w opts]\n      (do (print-one (key e) w opts)\n          (-write w \\space)\n          (print-one (val e) w opts)))\n    (str prefix \"{\") \", \" \"}\"\n    opts (seq m)))\n\n(defn print-map [m print-one writer opts]\n  (let [[ns lift-map] (when (map? m)\n                        (lift-ns m))]\n    (if ns\n      (print-prefix-map (str \"#:\" ns) lift-map print-one writer opts)\n      (print-prefix-map nil m print-one writer opts))))\n\n(extend-protocol IPrintWithWriter\n  LazySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  TransformerIterator\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IndexedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  RSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentQueue\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#queue [\" \" \" \"]\" opts (seq coll)))\n\n  PersistentQueueSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentTreeMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  NodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ArrayNodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  List\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  EmptyList\n  (-pr-writer [coll writer opts] (-write writer \"()\"))\n\n  PersistentVector\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ChunkedCons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ChunkedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Subvec\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  BlackNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  RedNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  MapEntry\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ObjMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  KeySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ValSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentTreeMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  PersistentTreeSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  Range\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IntegerRange\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cycle\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Repeat\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Iterate\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ES6IteratorSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Atom\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Atom \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Volatile\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Volatile \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Var\n  (-pr-writer [a writer opts]\n    (-write writer \"#'\")\n    (pr-writer (.-sym a) writer opts)))\n\n;; IComparable\n(extend-protocol IComparable\n  Symbol\n  (-compare [x y]\n    (if (symbol? y)\n      (compare-symbols x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Keyword\n  (-compare [x y]\n    (if (keyword? y)\n      (compare-keywords x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Subvec\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  PersistentVector\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  MapEntry\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  BlackNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  RedNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reference Types ;;;;;;;;;;;;;;;;\n\n(defn alter-meta!\n  \"Atomically sets the metadata for a namespace\/var\/ref\/agent\/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects\"\n  [iref f & args]\n  (set! (.-meta iref) (apply f (.-meta iref) args)))\n\n(defn reset-meta!\n  \"Atomically resets the metadata for an atom\"\n  [iref m]\n  (set! (.-meta iref) m))\n\n(defn add-watch\n  \"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old\/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1\"\n  [iref key f]\n  (-add-watch iref key f)\n  iref)\n\n(defn remove-watch\n  \"Removes a watch (set by add-watch) from a reference\"\n  [iref key]\n  (-remove-watch iref key)\n  iref)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; gensym ;;;;;;;;;;;;;;;;\n;; Internal - do not use!\n(def\n  ^{:jsdoc [\"@type {*}\"]}\n  gensym_counter nil)\n\n(defn gensym\n  \"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.\"\n  ([] (gensym \"G__\"))\n  ([prefix-string]\n     (when (nil? gensym_counter)\n       (set! gensym_counter (atom 0)))\n     (symbol (str prefix-string (swap! gensym_counter inc)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Delay ;;;;;;;;;;;;;;;;;;;;\n\n(deftype Delay [^:mutable f ^:mutable value]\n  IDeref\n  (-deref [_]\n    (when f\n      (set! value (f))\n      (set! f nil))\n    value)\n\n  IPending\n  (-realized? [x]\n    (not f))\n\n  IPrintWithWriter\n  (-pr-writer [x writer opts]\n    (-write writer \"#object[cljs.core.Delay \")\n    (pr-writer {:status (if (nil? f) :ready :pending), :val value} writer opts)\n    (-write writer \"]\")))\n\n(defn delay?\n  \"returns true if x is a Delay created with delay\"\n  [x] (instance? Delay x))\n\n(defn force\n  \"If x is a Delay, returns the (possibly cached) value of its expression, else returns x\"\n  [x]\n  (if (delay? x)\n    (deref x)\n    x))\n\n(defn ^boolean realized?\n  \"Returns true if a value has been produced for a delay or lazy sequence.\"\n  [x]\n  (-realized? x))\n\n(defn- preserving-reduced\n  [rf]\n  #(let [ret (rf %1 %2)]\n     (if (reduced? ret)\n       (reduced ret)\n       ret)))\n\n(defn cat\n  \"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.\"\n  {:added \"1.7\"}\n  [rf]\n  (let [rf1 (preserving-reduced rf)]\n    (fn\n      ([] (rf))\n      ([result] (rf result))\n      ([result input]\n         (reduce rf1 result input)))))\n\n(defn halt-when\n  \"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.\"\n  {:added \"1.9\"}\n  ([pred] (halt-when pred nil))\n  ([pred retf]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result]\n            (if (and (map? result) (contains? result ::halt))\n              (::halt result)\n              (rf result)))\n         ([result input]\n            (if (pred input)\n              (reduced {::halt (if retf (retf (rf result) input) input)})\n              (rf result input)))))))\n\n(defn dedupe\n  \"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.\"\n  ([]\n   (fn [rf]\n     (let [pa (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [prior @pa]\n              (vreset! pa input)\n              (if (= prior input)\n                result\n                (rf result input))))))))\n  ([coll] (sequence (dedupe) coll)))\n\n(declare rand)\n\n(defn random-sample\n  \"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.\"\n  ([prob]\n     (filter (fn [_] (< (rand) prob))))\n  ([prob coll]\n     (filter (fn [_] (< (rand) prob)) coll)))\n\n(deftype Eduction [xform coll]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISequential\n\n  IIterable\n  (-iterator [_]\n    (.create TransformerIterator xform (iter coll)))\n\n  ISeqable\n  (-seq [_] (seq (sequence xform coll)))\n\n  IReduce\n  (-reduce [_ f] (transduce xform (completing f) coll))\n  (-reduce [_ f init] (transduce xform (completing f) init coll))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll)))\n\n(es6-iterable Eduction)\n\n(defn eduction\n  \"Returns a reducible\/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce\/iterator is called.\"\n  {:arglists '([xform* coll])}\n  [& xforms]\n  (Eduction. (apply comp (butlast xforms)) (last xforms)))\n\n(defn run!\n  \"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil\"\n  [proc coll]\n  (reduce #(proc %2) nil coll)\n  nil)\n\n(defn iteration\n  \"Creates a seqable\/reducible via repeated calls to step,\n  a function of some (continuation token) 'k'. The first call to step\n  will be passed initk, returning 'ret'. Iff (somef ret) is true,\n  (vf ret) will be included in the iteration, else iteration will\n  terminate and vf\/kf will not be called. If (kf ret) is non-nil it\n  will be passed to the next step call, else iteration will terminate.\n  This can be used e.g. to consume APIs that return paginated or batched data.\n   step - (possibly impure) fn of 'k' -> 'ret'\n   :somef - fn of 'ret' -> logical true\/false, default 'some?'\n   :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n   :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n   :initk - the first value passed to step, default 'nil'\n  It is presumed that step with non-initk is unreproducible\/non-idempotent.\n  If step with initk is unreproducible it is on the consumer to not consume twice.\"\n  {:added \"1.11\"}\n  [step & {:keys [somef vf kf initk]\n           :or {vf identity\n                kf identity\n                somef some?\n                initk nil}}]\n  (reify\n    ISeqable\n    (-seq [_]\n      ((fn next [ret]\n         (when (somef ret)\n           (cons (vf ret)\n             (when-some [k (kf ret)]\n               (lazy-seq (next (step k)))))))\n       (step initk)))\n    IReduce\n    (-reduce [_ rf init]\n      (loop [acc init\n             ret (step initk)]\n        (if (somef ret)\n          (let [acc (rf acc (vf ret))]\n            (if (reduced? acc)\n              @acc\n              (if-some [k (kf ret)]\n                (recur acc (step k))\n                acc)))\n          acc)))))\n\n(defprotocol IEncodeJS\n  (-clj->js [x] \"Recursively transforms clj values to JavaScript\")\n  (-key->js [x] \"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)\"))\n\n(declare clj->js)\n\n(defn key->js\n  ([k] (key->js k clj->js))\n  ([k primitive-fn]\n   (cond\n     (satisfies? IEncodeJS k) (-clj->js k)\n     (or (string? k)\n         (number? k)\n         (keyword? k)\n         (symbol? k)) (primitive-fn k)\n     :default (pr-str k))))\n\n(defn clj->js\n  \"Recursively transforms ClojureScript values to JavaScript.\n  sets\/vectors\/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.\"\n  [x & {:keys [keyword-fn]\n        :or   {keyword-fn name}\n        :as options}]\n  (letfn [(keyfn [k] (key->js k thisfn))\n          (thisfn [x] (cond\n                        (nil? x) nil\n                        (satisfies? IEncodeJS x) (-clj->js x)\n                        (keyword? x) (keyword-fn x)\n                        (symbol? x) (str x)\n                        (map? x) (let [m (js-obj)]\n                                   (doseq [[k v] x]\n                                     (gobject\/set m (keyfn k) (thisfn v)))\n                                   m)\n                        (coll? x) (let [arr (array)]\n                                    (doseq [x (map thisfn x)]\n                                      (.push arr x))\n                                    arr)\n                        :else x))]\n    (thisfn x)))\n\n\n(defprotocol IEncodeClojure\n  (-js->clj [x options] \"Transforms JavaScript values to Clojure\"))\n\n(defn js->clj\n  \"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.\"\n  ([x] (js->clj x :keywordize-keys false))\n  ([x & opts]\n    (let [{:keys [keywordize-keys]} opts\n          keyfn (if keywordize-keys keyword str)\n          f (fn thisfn [x]\n              (cond\n                (satisfies? IEncodeClojure x)\n                (-js->clj x (apply array-map opts))\n\n                (seq? x)\n                (doall (map thisfn x))\n\n                (map-entry? x)\n                (MapEntry. (thisfn (key x)) (thisfn (val x)) nil)\n\n                (coll? x)\n                (into (empty x) (map thisfn) x)\n\n                (array? x)\n                (persistent!\n                 (reduce #(conj! %1 (thisfn %2))\n                         (transient []) x))\n\n                (identical? (type x) js\/Object)\n                (persistent!\n                 (reduce (fn [r k] (assoc! r (keyfn k) (thisfn (gobject\/get x k))))\n                         (transient {}) (js-keys x)))\n                :else x))]\n      (f x))))\n\n(defn memoize\n  \"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.\"\n  [f]\n  (let [mem (atom {})]\n    (fn [& args]\n      (let [v (get @mem args lookup-sentinel)]\n        (if (identical? v lookup-sentinel)\n          (let [ret (apply f args)]\n            (swap! mem assoc args ret)\n            ret)\n          v)))))\n\n(defn trampoline\n  \"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.\"\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline #(apply f args))))\n\n(defn rand\n  \"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).\"\n  ([] (rand 1))\n  ([n] (* (Math\/random) n)))\n\n(defn rand-int\n  \"Returns a random integer between 0 (inclusive) and n (exclusive).\"\n  [n] (Math\/floor (* (Math\/random) n)))\n\n(defn rand-nth\n  \"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.\"\n  [coll]\n  (nth coll (rand-int (count coll))))\n\n(defn group-by\n  \"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.\"\n  [f coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k (conj (get ret k []) x))))\n      (transient {}) coll)))\n\n(defn make-hierarchy\n  \"Creates a hierarchy object for use with derive, isa? etc.\"\n  [] {:parents {} :descendants {} :ancestors {}})\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  -global-hierarchy nil)\n\n(defn- get-global-hierarchy []\n  (when (nil? -global-hierarchy)\n    (set! -global-hierarchy (atom (make-hierarchy))))\n  -global-hierarchy)\n\n(defn- swap-global-hierarchy! [f & args]\n  (apply swap! (get-global-hierarchy) f args))\n\n(defn ^boolean isa?\n  \"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy\"\n  ([child parent] (isa? @(get-global-hierarchy) child parent))\n  ([h child parent]\n     (or (= child parent)\n         ;; (and (class? parent) (class? child)\n         ;;    (. ^Class parent isAssignableFrom child))\n         (contains? ((:ancestors h) child) parent)\n         ;;(and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))\n         (and (vector? parent) (vector? child)\n              (== (count parent) (count child))\n              (loop [ret true i 0]\n                (if (or (not ret) (== i (count parent)))\n                  ret\n                  (recur (isa? h (child i) (parent i)) (inc i))))))))\n\n(defn parents\n  \"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (parents @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:parents h) tag))))\n\n(defn ancestors\n  \"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (ancestors @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:ancestors h) tag))))\n\n(defn descendants\n  \"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.\"\n  ([tag] (descendants @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:descendants h) tag))))\n\n(defn derive\n  \"Establishes a parent\/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n   (assert (namespace parent))\n   ;; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))\n   (swap-global-hierarchy! derive tag parent) nil)\n  ([h tag parent]\n   (assert (not= tag parent))\n   ;; (assert (or (class? tag) (instance? clojure.lang.Named tag)))\n   ;; (assert (instance? clojure.lang.INamed tag))\n   ;; (assert (instance? clojure.lang.INamed parent))\n   (let [tp (:parents h)\n         td (:descendants h)\n         ta (:ancestors h)\n         tf (fn [m source sources target targets]\n              (reduce (fn [ret k]\n                        (assoc ret k\n                               (reduce conj (get targets k #{}) (cons target (targets target)))))\n                      m (cons source (sources source))))]\n     (or\n      (when-not (contains? (tp tag) parent)\n        (when (contains? (ta tag) parent)\n          (throw (js\/Error. (str tag \"already has\" parent \"as ancestor\"))))\n        (when (contains? (ta parent) tag)\n          (throw (js\/Error. (str \"Cyclic derivation:\" parent \"has\" tag \"as ancestor\"))))\n        {:parents (assoc (:parents h) tag (conj (get tp tag #{}) parent))\n         :ancestors (tf (:ancestors h) tag td parent ta)\n         :descendants (tf (:descendants h) parent ta tag td)})\n      h))))\n\n(defn underive\n  \"Removes a parent\/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n    (swap-global-hierarchy! underive tag parent)\n    nil)\n  ([h tag parent]\n    (let [parentMap (:parents h)\n          childsParents (if (parentMap tag)\n                          (disj (parentMap tag) parent) #{})\n          newParents (if (not-empty childsParents)\n                      (assoc parentMap tag childsParents)\n                      (dissoc parentMap tag))\n          deriv-seq (flatten (map #(cons (first %) (interpose (first %) (second %)))\n                                  (seq newParents)))]\n      (if (contains? (parentMap tag) parent)\n        (reduce #(apply derive %1 %2) (make-hierarchy)\n                (partition 2 deriv-seq))\n        h))))\n\n(defn- reset-cache\n  [method-cache method-table cached-hierarchy hierarchy]\n  (swap! method-cache (fn [_] (deref method-table)))\n  (swap! cached-hierarchy (fn [_] (deref hierarchy))))\n\n(defn- prefers*\n  [x y prefer-table]\n  (let [xprefs (@prefer-table x)]\n    (or\n     (when (and xprefs (xprefs y))\n       true)\n     (loop [ps (parents y)]\n       (when (pos? (count ps))\n         (when (prefers* x (first ps) prefer-table)\n           true)\n         (recur (rest ps))))\n     (loop [ps (parents x)]\n       (when (pos? (count ps))\n         (when (prefers* (first ps) y prefer-table)\n           true)\n         (recur (rest ps))))\n     false)))\n\n(defn- dominates\n  [x y prefer-table hierarchy]\n  (or (prefers* x y prefer-table) (isa? hierarchy x y)))\n\n(defn- find-and-cache-best-method\n  [name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val]\n  (let [best-entry (reduce (fn [be [k _ :as e]]\n                             (if (isa? @hierarchy dispatch-val k)\n                               (let [be2 (if (or (nil? be) (dominates k (first be) prefer-table @hierarchy))\n                                           e\n                                           be)]\n                                 (when-not (dominates (first be2) k prefer-table @hierarchy)\n                                   (throw (js\/Error.\n                                            (str \"Multiple methods in multimethod '\" name\n                                              \"' match dispatch value: \" dispatch-val \" -> \" k\n                                              \" and \" (first be2) \", and neither is preferred\"))))\n                                 be2)\n                               be))\n                     nil @method-table)\n        best-entry (if-let [entry (and (nil? best-entry) (@method-table default-dispatch-val))]\n                     [default-dispatch-val entry]\n                     best-entry)]\n    (when best-entry\n      (if (= @cached-hierarchy @hierarchy)\n        (do\n          (swap! method-cache assoc dispatch-val (second best-entry))\n          (second best-entry))\n        (do\n          (reset-cache method-cache method-table cached-hierarchy hierarchy)\n          (find-and-cache-best-method name dispatch-val hierarchy method-table prefer-table\n            method-cache cached-hierarchy default-dispatch-val))))))\n\n(defprotocol IMultiFn\n  (-reset [mf])\n  (-add-method [mf dispatch-val method])\n  (-remove-method [mf dispatch-val])\n  (-prefer-method [mf dispatch-val dispatch-val-y])\n  (-get-method [mf dispatch-val])\n  (-methods [mf])\n  (-prefers [mf])\n  (-default-dispatch-val [mf])\n  (-dispatch-fn [mf]))\n\n(defn- throw-no-method-error [name dispatch-val]\n  (throw (js\/Error. (str \"No method in multimethod '\" name \"' for dispatch value: \" dispatch-val))))\n\n(deftype MultiFn [name dispatch-fn default-dispatch-val hierarchy\n                  method-table prefer-table method-cache cached-hierarchy]\n  IFn\n  (-invoke [mf]\n    (let [dispatch-val (dispatch-fn)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn)))\n  (-invoke [mf a]\n    (let [dispatch-val (dispatch-fn a)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a)))\n  (-invoke [mf a b]\n    (let [dispatch-val (dispatch-fn a b)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b)))\n  (-invoke [mf a b c]\n    (let [dispatch-val (dispatch-fn a b c)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c)))\n  (-invoke [mf a b c d]\n    (let [dispatch-val (dispatch-fn a b c d)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d)))\n  (-invoke [mf a b c d e]\n    (let [dispatch-val (dispatch-fn a b c d e)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e)))\n  (-invoke [mf a b c d e f]\n    (let [dispatch-val (dispatch-fn a b c d e f)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f)))\n  (-invoke [mf a b c d e f g]\n    (let [dispatch-val (dispatch-fn a b c d e f g)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g)))\n  (-invoke [mf a b c d e f g h]\n    (let [dispatch-val (dispatch-fn a b c d e f g h)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h)))\n  (-invoke [mf a b c d e f g h i]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i)))\n  (-invoke [mf a b c d e f g h i j]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j)))\n  (-invoke [mf a b c d e f g h i j k]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k)))\n  (-invoke [mf a b c d e f g h i j k l]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l)))\n  (-invoke [mf a b c d e f g h i j k l m]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m)))\n  (-invoke [mf a b c d e f g h i j k l m n]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n)))\n  (-invoke [mf a b c d e f g h i j k l m n o]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o)))\n  (-invoke [mf a b c d e f g h i j k l m n o p]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s t)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s t)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t rest]\n    (let [dispatch-val (apply dispatch-fn a b c d e f g h i j k l m n o p q r s t rest)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (apply target-fn a b c d e f g h i j k l m n o p q r s t rest)))\n\n  IMultiFn\n  (-reset [mf]\n    (swap! method-table (fn [mf] {}))\n    (swap! method-cache (fn [mf] {}))\n    (swap! prefer-table (fn [mf] {}))\n    (swap! cached-hierarchy (fn [mf] nil))\n    mf)\n\n  (-add-method [mf dispatch-val method]\n    (swap! method-table assoc dispatch-val method)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-remove-method [mf dispatch-val]\n    (swap! method-table dissoc dispatch-val)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-get-method [mf dispatch-val]\n    (when-not (= @cached-hierarchy @hierarchy)\n      (reset-cache method-cache method-table cached-hierarchy hierarchy))\n    (if-let [target-fn (@method-cache dispatch-val)]\n      target-fn\n      (find-and-cache-best-method name dispatch-val hierarchy method-table\n        prefer-table method-cache cached-hierarchy default-dispatch-val)))\n\n  (-prefer-method [mf dispatch-val-x dispatch-val-y]\n    (when (prefers* dispatch-val-y dispatch-val-x  prefer-table)\n      (throw (js\/Error. (str \"Preference conflict in multimethod '\" name \"': \" dispatch-val-y\n                   \" is already preferred to \" dispatch-val-x))))\n    (swap! prefer-table\n           (fn [old]\n             (assoc old dispatch-val-x\n                    (conj (get old dispatch-val-x #{})\n                          dispatch-val-y))))\n    (reset-cache method-cache method-table cached-hierarchy hierarchy))\n\n  (-methods [mf] @method-table)\n  (-prefers [mf] @prefer-table)\n  (-default-dispatch-val [mf] default-dispatch-val)\n  (-dispatch-fn [mf] dispatch-fn)\n\n  INamed\n  (-name [this] (-name name))\n  (-namespace [this] (-namespace name))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn remove-all-methods\n  \"Removes all of the methods of multimethod.\"\n [multifn]\n (-reset multifn))\n\n(defn remove-method\n  \"Removes the method of multimethod associated with dispatch-value.\"\n [multifn dispatch-val]\n (-remove-method multifn dispatch-val))\n\n(defn prefer-method\n  \"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict\"\n  [multifn dispatch-val-x dispatch-val-y]\n  (-prefer-method multifn dispatch-val-x dispatch-val-y))\n\n(defn methods\n  \"Given a multimethod, returns a map of dispatch values -> dispatch fns\"\n  [multifn] (-methods multifn))\n\n(defn get-method\n  \"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default\"\n  [multifn dispatch-val] (-get-method multifn dispatch-val))\n\n(defn prefers\n  \"Given a multimethod, returns a map of preferred value -> set of other values\"\n  [multifn] (-prefers multifn))\n\n(defn default-dispatch-val\n  \"Given a multimethod, return its default-dispatch-val.\"\n  [multifn] (-default-dispatch-val multifn))\n\n(defn dispatch-fn\n  \"Given a multimethod, return its dispatch-fn.\"\n  [multifn] (-dispatch-fn multifn))\n\n;; UUID\n(defprotocol IUUID \"A marker protocol for UUIDs\")\n\n(deftype UUID [uuid ^:mutable __hash]\n  IUUID\n\n  Object\n  (toString [_] uuid)\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (implements? IUUID other) (identical? uuid (.-uuid other))))\n\n  IPrintWithWriter\n  (-pr-writer [_ writer _]\n    (-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))\n\n  IHash\n  (-hash [this]\n    (when (nil? __hash)\n      (set! __hash (hash uuid)))\n    __hash)\n\n  IComparable\n  (-compare [this other]\n    (if (instance? UUID other)\n      (garray\/defaultCompare uuid (.-uuid other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defn uuid\n  \"Returns a UUID consistent with the string s.\"\n  [s]\n  (assert (string? s))\n  (UUID. (.toLowerCase s) nil))\n\n(defn random-uuid\n  \"Returns a pseudo-randomly generated UUID instance (i.e. type 4).\"\n  []\n  (letfn [(^string quad-hex []\n            (let [unpadded-hex ^string (.toString (rand-int 65536) 16)]\n              (case (count unpadded-hex)\n                1 (str \"000\" unpadded-hex)\n                2 (str \"00\" unpadded-hex)\n                3 (str \"0\" unpadded-hex)\n                unpadded-hex)))]\n    (let [ver-tripple-hex ^string (.toString (bit-or 0x4000 (bit-and 0x0fff (rand-int 65536))) 16)\n          res-tripple-hex ^string (.toString (bit-or 0x8000 (bit-and 0x3fff (rand-int 65536))) 16)]\n      (uuid\n        (str (quad-hex) (quad-hex) \"-\" (quad-hex) \"-\"\n             ver-tripple-hex \"-\" res-tripple-hex \"-\"\n             (quad-hex) (quad-hex) (quad-hex))))))\n\n(defn uuid?\n  \"Return true if x is a UUID.\"\n  [x] (implements? IUUID x))\n\n;;; ExceptionInfo\n\n(defn- pr-writer-ex-info [obj writer opts]\n  (-write writer \"#error {:message \")\n  (pr-writer (.-message obj) writer opts)\n  (when (.-data obj)\n    (-write writer \", :data \")\n    (pr-writer (.-data obj) writer opts))\n  (when (.-cause obj)\n    (-write writer \", :cause \")\n    (pr-writer (.-cause obj) writer opts))\n  (-write writer \"}\"))\n\n(defn ^{:jsdoc [\"@constructor\"]}\n  ExceptionInfo [message data cause]\n  (let [e (js\/Error. message)]\n    (this-as this\n      (set! (.-message this) message)\n      (set! (.-data this) data)\n      (set! (.-cause this) cause)\n      (do\n        (set! (.-name this) (.-name e))\n        ;; non-standard\n        (set! (.-description this) (.-description e))\n        (set! (.-number this) (.-number e))\n        (set! (.-fileName this) (.-fileName e))\n        (set! (.-lineNumber this) (.-lineNumber e))\n        (set! (.-columnNumber this) (.-columnNumber e))\n        (set! (.-stack this) (.-stack e)))\n      this)))\n\n(set! (.. ExceptionInfo -prototype -__proto__) js\/Error.prototype)\n\n(extend-type ExceptionInfo\n  IPrintWithWriter\n  (-pr-writer [obj writer opts]\n    (pr-writer-ex-info obj writer opts)))\n\n(set! (.. ExceptionInfo -prototype -toString)\n  (fn []\n    (this-as this (pr-str* this))))\n\n(defn ex-info\n  \"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.\"\n  ([msg data] (ex-info msg data nil))\n  ([msg data cause]\n    (ExceptionInfo. msg data cause)))\n\n(defn ex-data\n  \"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-data ex)))\n\n(defn ex-message\n  \"Returns the message attached to the given Error \/ ExceptionInfo object.\n  For non-Errors returns nil.\"\n  [ex]\n  (when (instance? js\/Error ex)\n    (.-message ex)))\n\n(defn ex-cause\n  \"Returns exception cause (an Error \/ ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-cause ex)))\n\n(defn Throwable->map\n  \"Constructs a data representation for an Error with keys:\n    :cause - root cause message\n    :phase - error phase\n    :via - cause chain, with cause keys:\n             :type - exception class symbol\n             :message - exception message\n             :data - ex-data\n             :at - top stack element\n    :trace - root cause stack elements\"\n  [o]\n  (let [base (fn [t]\n               (merge {:type (cond\n                               (instance? ExceptionInfo t) `ExceptionInfo\n                               (instance? js\/Error t) (symbol \"js\" (.-name t))\n                               :else nil)}\n                 (when-let [msg (ex-message t)]\n                   {:message msg})\n                 (when-let [ed (ex-data t)]\n                   {:data ed})\n                 #_(let [st (extract-canonical-stacktrace t)]\n                     (when (pos? (count st))\n                       {:at st}))))\n        via  (loop [via [], t o]\n               (if t\n                 (recur (conj via t) (ex-cause t))\n                 via))\n        root (peek via)]\n    (merge {:via   (vec (map base via))\n            :trace nil #_(extract-canonical-stacktrace (or root o))}\n      (when-let [root-msg (ex-message root)]\n        {:cause root-msg})\n      (when-let [data (ex-data root)]\n        {:data data})\n      (when-let [phase (-> o ex-data :clojure.error\/phase)]\n        {:phase phase}))))\n\n(defn comparator\n  \"Returns an JavaScript compatible comparator based upon pred.\"\n  [pred]\n  (fn [x y]\n    (cond (pred x y) -1 (pred y x) 1 :else 0)))\n\n(defn ^boolean special-symbol?\n  \"Returns true if x names a special form\"\n  [x]\n  (contains?\n    '#{if def fn* do let* loop* letfn* throw try catch finally\n       recur new set! ns deftype* defrecord* . js* & quote case* var ns*}\n    x))\n\n(defn test\n  \"test [v] - if var, finds fn at key :test in var metadata, if function, finds\n  special test property. Calls it, presuming failure will throw exception.\n\n  Examples:\n\n  (test my-fn) ;; :ok\n  (test #'my-fn) ;; :ok\"\n  [v]\n  (let [f (if (instance? Var v)\n            (-> v meta :test)\n            (some-> v .-cljs$lang$test))]\n    (if f\n      (do (f) :ok)\n      :no-test)))\n\n\n(deftype TaggedLiteral [tag form]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? TaggedLiteral other)\n         (= tag (.-tag other))\n         (= form (.-form other))))\n\n  IHash\n  (-hash [this]\n    (+ (* 31 (hash tag))\n       (hash form)))\n\n  ILookup\n  (-lookup [this v]\n    (-lookup this v nil))\n  (-lookup [this v not-found]\n    (case v\n      :tag tag\n      :form form\n      not-found))\n\n  IPrintWithWriter\n  (-pr-writer [o writer opts]\n    (-write writer (str \"#\" tag \" \"))\n    (pr-writer form writer opts)))\n\n(defn tagged-literal?\n  \"Return true if the value is the data representation of a tagged literal\"\n  [value]\n  (instance? TaggedLiteral value))\n\n(defn tagged-literal\n  \"Construct a data representation of a tagged literal from a\n  tag symbol and a form.\"\n  [tag form]\n  {:pre [(symbol? tag)]}\n  (TaggedLiteral. tag form))\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  js-reserved-arr\n  #js [\"arguments\" \"abstract\" \"await\" \"boolean\" \"break\" \"byte\" \"case\"\n       \"catch\" \"char\" \"class\" \"const\" \"continue\"\n       \"debugger\" \"default\" \"delete\" \"do\" \"double\"\n       \"else\" \"enum\" \"export\" \"extends\" \"final\"\n       \"finally\" \"float\" \"for\" \"function\" \"goto\" \"if\"\n       \"implements\" \"import\" \"in\" \"instanceof\" \"int\"\n       \"interface\" \"let\" \"long\" \"native\" \"new\"\n       \"package\" \"private\" \"protected\" \"public\"\n       \"return\" \"short\" \"static\" \"super\" \"switch\"\n       \"synchronized\" \"this\" \"throw\" \"throws\"\n       \"transient\" \"try\" \"typeof\" \"var\" \"void\"\n       \"volatile\" \"while\" \"with\" \"yield\" \"methods\"\n       \"null\" \"constructor\"])\n\n(def\n  ^{:jsdoc [\"@type {null|Object}\"]}\n  js-reserved nil)\n\n(defn- js-reserved? [x]\n  (when (nil? js-reserved)\n    (set! js-reserved\n      (reduce #(do (gobject\/set %1 %2 true) %1)\n        #js {} js-reserved-arr)))\n  (.hasOwnProperty js-reserved x))\n\n(defn- demunge-pattern []\n  (when-not DEMUNGE_PATTERN\n    (set! DEMUNGE_PATTERN\n      (let [ks (sort (fn [a b] (- (. b -length) (. a -length)))\n                 (js-keys DEMUNGE_MAP))]\n        (loop [ks ks ret \"\"]\n          (if (seq ks)\n            (recur\n              (next ks)\n              (str\n                (cond-> ret\n                  (not (identical? ret \"\")) (str \"|\"))\n                (first ks)))\n            (str ret \"|\\\\$\"))))))\n  DEMUNGE_PATTERN)\n\n(defn- ^string munge-str [name]\n  (let [sb (StringBuffer.)]\n    (loop [i 0]\n      (if (< i (. name -length))\n        (let [c (.charAt name i)\n              sub (gobject\/get CHAR_MAP c)]\n          (if-not (nil? sub)\n            (.append sb sub)\n            (.append sb c))\n          (recur (inc i)))))\n    (.toString sb)))\n\n(defn munge [name]\n  (let [name' (munge-str (str name))\n        name' (cond\n                (identical? name' \"..\") \"_DOT__DOT_\"\n                (js-reserved? name') (str name' \"$\")\n                :else name')]\n    (if (symbol? name)\n      (symbol name')\n      name')))\n\n(defn- demunge-str [munged-name]\n  (let [r (js\/RegExp. (demunge-pattern) \"g\")\n        munged-name (if (gstring\/endsWith munged-name \"$\")\n                      (.substring munged-name 0 (dec (. munged-name -length)))\n                      munged-name)]\n    (loop [ret \"\" last-match-end 0]\n      (if-let [match (.exec r munged-name)]\n        (let [[x] match]\n          (recur\n            (str ret\n              (.substring munged-name last-match-end\n                (- (. r -lastIndex) (. x -length)))\n              (if (identical? x \"$\") \"\/\" (gobject\/get DEMUNGE_MAP x)))\n            (. r -lastIndex)))\n        (str ret\n          (.substring munged-name last-match-end (.-length munged-name)))))))\n\n(defn demunge [name]\n  ((if (symbol? name) symbol str)\n    (let [name' (str name)]\n      (if (identical? name' \"_DOT__DOT_\")\n        \"..\"\n        (demunge-str name')))))\n\n(defonce ^{:jsdoc [\"@type {*}\"] :private true}\n  tapset nil)\n\n(defn- maybe-init-tapset []\n  (when (nil? tapset)\n    (set! tapset (atom #{}))))\n\n(defn add-tap\n  \"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset conj f)\n  nil)\n\n(defn remove-tap\n  \"Remove f from the tap set.\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset disj f)\n  nil)\n\n(defn ^boolean tap>\n  \"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.\"\n  [x]\n  (maybe-init-tapset)\n  (*exec-tap-fn*\n    (fn []\n      (doseq [tap @tapset]\n        (try\n          (tap x)\n          (catch js\/Error ex))))))\n\n(defn update-vals\n  \"m f => {k (f v) ...}\n  Given a map m and a function f of 1-argument, returns a new map where the keys of m\n  are mapped to result of applying f to the corresponding values of m.\"\n  {:added \"1.11\"}\n  [m f]\n  (with-meta\n    (persistent!\n      (reduce-kv (fn [acc k v] (assoc! acc k (f v)))\n                 (if (implements? IEditableCollection m)\n                   (transient m)\n                   (transient {}))\n                 m))\n    (meta m)))\n\n(defn update-keys\n  \"m f => {(f k) v ...}\n  Given a map m and a function f of 1-argument, returns a new map whose\n  keys are the result of applying f to the keys of m, mapped to the\n  corresponding values of m.\n  f must return a unique key for each key of m, else the behavior is undefined.\"\n  {:added \"1.11\"}\n  [m f]\n  (let [ret (persistent!\n              (reduce-kv (fn [acc k v] (assoc! acc (f k) v))\n                         (transient {})\n                         m))]\n    (with-meta ret (meta m))))\n\n;; -----------------------------------------------------------------------------\n;; Bootstrap helpers - incompatible with advanced compilation\n\n(defn- ns-lookup\n  \"Bootstrap only.\"\n  [ns-obj k]\n  (fn [] (gobject\/get ns-obj k)))\n\n;; Bootstrap only\n(deftype Namespace [obj name]\n  Object\n  (findInternedVar [this sym]\n    (let [k (munge (str sym))]\n      (when ^boolean (gobject\/containsKey obj k)\n        (let [var-sym (symbol (str name) (str sym))\n              var-meta {:ns this}]\n          (Var. (ns-lookup obj k) var-sym var-meta)))))\n  (getName [_] name)\n  (toString [_]\n    (str name))\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Namespace other)\n      (= name (.-name other))\n      false))\n  IHash\n  (-hash [_]\n    (hash name)))\n\n(def\n  ^{:doc \"Bootstrap only.\" :jsdoc [\"@type {*}\"]}\n  NS_CACHE nil)\n\n(defn- find-ns-obj*\n  \"Bootstrap only.\"\n  [ctxt xs]\n  (cond\n    (nil? ctxt) nil\n    (nil? xs) ctxt\n    :else (recur (gobject\/get ctxt (first xs)) (next xs))))\n\n(defn find-ns-obj\n  \"Bootstrap only.\"\n  [ns]\n  (let [munged-ns (munge (str ns))\n        segs (.split munged-ns \".\")]\n    (case *target*\n      \"nodejs\"  (if ^boolean js\/COMPILED\n                  ; Under simple optimizations on nodejs, namespaces will be in module\n                  ; rather than global scope and must be accessed by a direct call to eval.\n                  ; The first segment may refer to an undefined variable, so its evaluation\n                  ; may throw ReferenceError.\n                  (find-ns-obj*\n                    (try\n                      (let [ctxt (js\/eval (first segs))]\n                        (when (and ctxt (object? ctxt))\n                          ctxt))\n                      (catch js\/ReferenceError e\n                        nil))\n                    (next segs))\n                  (find-ns-obj* goog\/global segs))\n      (\"default\" \"webworker\") (find-ns-obj* goog\/global segs)\n      (throw (js\/Error. (str \"find-ns-obj not supported for target \" *target*))))))\n\n(defn ns-interns*\n  \"Returns a map of the intern mappings for the namespace.\n  Bootstrap only.\"\n  [sym]\n  (let [ns-obj (find-ns-obj sym)\n        ns     (Namespace. ns-obj sym)]\n    (letfn [(step [ret k]\n              (let [var-sym (symbol (demunge k))]\n                (assoc ret\n                  var-sym (Var. #(gobject\/get ns-obj k)\n                            (symbol (str sym) (str var-sym)) {:ns ns}))))]\n      (reduce step {} (js-keys ns-obj)))))\n\n(defn create-ns\n  \"Create a new namespace named by the symbol. Bootstrap only.\"\n  ([sym]\n   (create-ns sym (find-ns-obj sym)))\n  ([sym ns-obj]\n   (Namespace. ns-obj sym)))\n\n(defn find-ns\n  \"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n        (when-not (nil? ns-obj)\n          (let [new-ns (create-ns ns ns-obj)]\n            (swap! NS_CACHE assoc ns new-ns)\n            new-ns))))))\n\n(defn find-macros-ns\n  \"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [ns-str (str ns)\n        ns (if (not ^boolean (gstring\/contains ns-str \"$macros\"))\n             (symbol (str ns-str \"$macros\"))\n             ns)\n        the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n       (when-not (nil? ns-obj)\n         (let [new-ns (create-ns ns ns-obj)]\n           (swap! NS_CACHE assoc ns new-ns)\n           new-ns))))))\n\n(defn ns-name\n  \"Returns the name of the namespace, a Namespace object.\n  Bootstrap only.\"\n  [ns-obj]\n  (.-name ns-obj))\n\n(defn uri?\n  \"Returns true x is a goog.Uri instance.\"\n  {:added \"1.9\"}\n  [x]\n  (instance? goog.Uri x))\n\n(defn ^boolean NaN?\n  \"Returns true if num is NaN, else false\"\n  [val]\n  (js\/isNaN val))\n\n(defn ^:private parsing-err\n  \"Construct message for parsing for non-string parsing error\"\n  [val]\n  (str \"Expected string, got: \" (if (nil? val) \"nil\" (goog\/typeOf val))))\n\n(defn ^number parse-long\n  \"Parse string of decimal digits with optional leading -\/+ and return an\n  integer value, or nil if parse fails\"\n  [s]\n  (if (string? s)\n    (and (re-matches #\"[+-]?\\d+\" s)\n         (let [i (js\/parseInt s)]\n           (when (and (<= i js\/Number.MAX_SAFE_INTEGER)\n                      (>= i js\/Number.MIN_SAFE_INTEGER))\n             i)))\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn ^number parse-double\n  \"Parse string with floating point components and return a floating point value,\n  or nil if parse fails.\n  Grammar: https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/Double.html#valueOf-java.lang.String-\"\n  [s]\n  (if (string? s)\n    (cond\n      ^boolean (re-matches #\"[\\x00-\\x20]*[+-]?NaN[\\x00-\\x20]*\" s) ##NaN\n      ^boolean (re-matches\n                #\"[\\x00-\\x20]*[+-]?(Infinity|((\\d+\\.?\\d*|\\.\\d+)([eE][+-]?\\d+)?)[dDfF]?)[\\x00-\\x20]*\"\n                s) (js\/parseFloat s)\n      :default nil)\n    (throw (js\/Error. (parsing-err s)))))\n\n(def ^:private uuid-regex\n  #\"^[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]$\")\n\n(defn parse-uuid\n  \"Parse a string representing a UUID and return a UUID instance,\n  or nil if parse fails.\n  Grammar: https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/UUID.html#toString--\"\n  [s]\n  (if (string? s)\n    (when ^boolean (re-matches uuid-regex s)\n      (uuid s))\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn parse-boolean\n  \"Parse strings \\\"true\\\" or \\\"false\\\" and return a boolean, or nil if invalid. Note that this explicitly\n  excludes strings with different cases, or space characters.\"\n  [s]\n  (if (string? s)\n    (case s\n      \"true\" true\n      \"false\" false\n      nil)\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn- maybe-enable-print! []\n  (cond\n    (exists? js\/console)\n    (enable-console-print!)\n\n    (or (identical? *target* \"nashorn\")\n        (identical? *target* \"graaljs\"))\n    (let [system (.type js\/Java \"java.lang.System\")]\n      (set! *print-newline* false)\n      (set-print-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-out system) s))))\n      (set-print-err-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-error system) s)))))))\n\n(maybe-enable-print!)\n\n(defonce\n  ^{:doc \"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.\" :dynamic true}\n  *eval*\n  (fn [_]\n    (throw (js\/Error. \"cljs.core\/*eval* not bound\"))))\n\n(defn eval\n  \"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core\/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core\/*eval* for that environment.\"\n  [form]\n  (*eval* form))\n\n(when ^boolean js\/COMPILED\n  (when (identical? \"nodejs\" *target*)\n    (set! goog\/global js\/global))\n  (cond\n    (identical? \"window\" *global*) (set! goog\/global js\/window)\n    (identical? \"self\" *global*) (set! goog\/global js\/self)\n    (identical? \"global\" *global*) (set! goog\/global js\/global)))\n","(ns ajax.easy\n    (:require [ajax.simple :as simple]\n              [ajax.transit :as t]\n              [ajax.json :as json]\n              [ajax.ring :as ring]\n              [ajax.url :as url]\n              [ajax.formats :as f]))\n\n(def default-formats\n  (atom\n    [[\"application\/transit+json\" t\/transit-response-format]\n     [\"application\/transit+transit\" t\/transit-response-format]\n     [\"application\/json\" json\/json-response-format]\n     [\"text\/plain\" f\/text-response-format]\n     [\"text\/html\" f\/text-response-format]\n     [\"*\/*\" f\/raw-response-format]]))\n\n(defn detect-response-format\n  ([] (f\/detect-response-format {:response-format @default-formats}))\n  ([opts] (f\/detect-response-format opts)))\n\n(defn keyword-request-format \n  \"Converts an easy API request format specifier to an `ajax-request`\n  request format specifier.\"\n  [format format-params]\n  (cond\n   (map? format) format\n   (fn? format) {:write format}\n   (nil? format) (t\/transit-request-format format-params)\n   :else (case format\n           :transit (t\/transit-request-format format-params)\n           :json (json\/json-request-format)\n           :text (f\/text-request-format)\n           :raw (url\/url-request-format format-params)\n           :url (url\/url-request-format format-params)\n           nil)))\n\n(defn- keyword-response-format-element [format format-params]\n  (cond\n   (vector? format) [(first format)\n                  (keyword-response-format-element (second format)\n                                             format-params)]\n   (map? format) format\n   (fn? format) {:read format :description \"custom\"}\n   (nil? format) (detect-response-format)\n   :else (case format\n           :transit (t\/transit-response-format format-params)\n           :json (json\/json-response-format format-params)\n           :text (f\/text-response-format)\n           :ring (ring\/ring-response-format)\n           :raw (f\/raw-response-format)\n           :detect (detect-response-format)\n           nil)))\n\n(defn keyword-response-format \n  \"Converts an easy API format specifier to an `ajax-request`\n   format specifier. Mostly this is just a case of replacing `:json`\n   with `json-response-format`. However, it gets complex when you\n   specify a detection format such as `[[\\\"application\/madeup\\\" :json]]`.\"\n  [format format-params]\n  (if (vector? format)\n    (->> format\n         (map #(keyword-response-format-element % format-params))\n         (apply vector))\n    (keyword-response-format-element format format-params)))\n\n(defn print-response [response]\n  (println \"CLJS-AJAX response:\" response))\n\n(def default-handler\n  \"This gets called if you forget to attach a handler to an easy\n  API function.\"\n  (atom print-response))\n\n(defn print-error-response [response]\n  #? (:clj  (println \"CLJS-AJAX ERROR:\" response)\n      :cljs (cond (exists? js\/console) (.error js\/console response)\n                  (exists? js\/window)  (.alert js\/window (str response))\n                  :else                (println \"CLJS-AJAX ERROR:\" response))))\n\n(def default-error-handler\n  \"This will be called when errors occur if you don't supply\n   an error handler to the easy API functions. If you don't\n   want it writing errors to the console (or worse, flashing up\n   alerts), make sure you always handle errors.\"\n  (atom print-error-response))\n\n(defn transform-handler\n  \"Converts easy API handlers to a `ajax-request` handler\"\n  [{:keys [handler error-handler finally]}]\n  (let [h (or handler @default-handler)\n        e (or error-handler @default-error-handler)]\n    (fn easy-handler [[ok result]]\n      ((if ok h e) result)\n      (when (fn? finally)\n        (finally)))))\n\n(defn transform-opts \n  \"Note that if you call GET, POST et al, this function gets\n   called and will include Transit code in your JS.\n   If you don't want this to happen, use ajax-request directly\n   (and use advanced optimisation).\"\n  [{:keys [method format response-format params body] :as opts}]\n  (let [needs-format (and (nil? body) (not= method \"GET\"))\n        rf (if (or format needs-format)\n             (keyword-request-format format opts))]\n    (assoc opts\n      :handler (transform-handler opts)\n      :format rf\n      :response-format (keyword-response-format response-format opts))))\n\n(defn easy-ajax-request [uri method opts]\n  (-> opts\n      (assoc :uri uri\n             :method method)\n      transform-opts\n      simple\/ajax-request))\n","(ns ajax.xml-http-request\n  (:require [ajax.protocols :refer [AjaxImpl AjaxRequest\n                                    AjaxResponse Interceptor]]\n            goog.string))\n\n(defn ready-state [e]\n  ({0 :not-initialized\n    1 :connection-established\n    2 :request-received\n    3 :processing-request\n    4 :response-ready} (.-readyState (.-target e))))\n\n(defn append [current next]\n  (if current\n    (str current \", \" next)\n    next))\n\n(defn process-headers [header-str]\n  (if header-str\n    (reduce (fn [headers header-line]\n              (if (goog.string\/isEmptyOrWhitespace header-line)\n                headers\n                (let [key-value (goog.string\/splitLimit header-line \": \" 2)]\n                  (update headers (aget key-value 0) append (aget key-value 1)))))\n            {}\n            (.split header-str \"\\r\\n\"))\n    {}))\n\n(def xmlhttprequest\n  (cond\n    (exists? goog\/global.XMLHttpRequest)\n    goog\/global.XMLHttpRequest\n    (exists? js\/require)\n    (let [req js\/require]\n      (.-XMLHttpRequest (req \"xmlhttprequest\")))))\n\n(extend-type xmlhttprequest\n  AjaxImpl\n  (-js-ajax-request\n    [this\n     {:keys [uri method body headers timeout with-credentials\n             response-format]\n      :or {with-credentials false\n           timeout 0}}\n     handler]\n    (set! (.-withCredentials this) with-credentials)\n    (set! (.-onreadystatechange this)\n          #(when (= :response-ready (ready-state %))\n             (handler this)))\n    (.open this method uri true)\n    (set! (.-timeout this) timeout)\n;;; IE8 needs timeout to be set between open and send\n;;; https:\/\/msdn.microsoft.com\/en-us\/library\/cc304105(v=vs.85).aspx\n    (when-let [response-type (:type response-format)]\n      (set! (.-responseType this) (name response-type)))\n    (doseq [[k v] headers]\n      (.setRequestHeader this k v))\n    (.send this (or body \"\"))\n    this)\n  AjaxRequest\n  (-abort [this] (.abort this))\n  AjaxResponse\n  (-body [this] (.-response this))\n  (-status [this] (.-status this))\n  (-status-text [this] (.-statusText this))\n  (-get-all-headers [this]\n    (process-headers (.getAllResponseHeaders this)))\n  (-get-response-header [this header]\n    (.getResponseHeader this header))\n  (-was-aborted [this] (= 0 (.-readyState this))))\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview String functions called from Closure packages that couldn't\n * depend on each other. Outside Closure, use goog.string function which\n * delegate to these.\n *\/\n\n\ngoog.provide('goog.string.internal');\n\n\n\/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n * @see goog.string.startsWith\n *\/\ngoog.string.internal.startsWith = function(str, prefix) {\n  'use strict';\n  return str.lastIndexOf(prefix, 0) == 0;\n};\n\n\n\/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n * @see goog.string.endsWith\n *\/\ngoog.string.internal.endsWith = function(str, suffix) {\n  'use strict';\n  const l = str.length - suffix.length;\n  return l >= 0 && str.indexOf(suffix, l) == l;\n};\n\n\n\/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n * @see goog.string.caseInsensitiveStartsWith\n *\/\ngoog.string.internal.caseInsensitiveStartsWith = function(str, prefix) {\n  'use strict';\n  return (\n      goog.string.internal.caseInsensitiveCompare(\n          prefix, str.slice(0, prefix.length)) == 0);\n};\n\n\n\/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n * @see goog.string.caseInsensitiveEndsWith\n *\/\ngoog.string.internal.caseInsensitiveEndsWith = function(str, suffix) {\n  'use strict';\n  return (\n      goog.string.internal.caseInsensitiveCompare(\n          suffix, str.slice(str.length - suffix.length)) == 0);\n};\n\n\n\/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n * @see goog.string.caseInsensitiveEquals\n *\/\ngoog.string.internal.caseInsensitiveEquals = function(str1, str2) {\n  'use strict';\n  return str1.toLowerCase() == str2.toLowerCase();\n};\n\n\n\/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @see goog.string.isEmptyOrWhitespace\n *\/\ngoog.string.internal.isEmptyOrWhitespace = function(str) {\n  'use strict';\n  \/\/ testing length == 0 first is actually slower in all browsers (about the\n  \/\/ same in Opera).\n  \/\/ Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  \/\/ class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  \/\/ include it in the regexp to enforce consistent cross-browser behavior.\n  return \/^[\\s\\xa0]*$\/.test(str);\n};\n\n\n\/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n *\/\ngoog.string.internal.trim =\n    (goog.TRUSTED_SITE && String.prototype.trim) ? function(str) {\n      'use strict';\n      return str.trim();\n    } : function(str) {\n      'use strict';\n      \/\/ Since IE doesn't include non-breaking-space (0xa0) in their \\s\n      \/\/ character class (as required by section 7.2 of the ECMAScript spec),\n      \/\/ we explicitly include it in the regexp to enforce consistent\n      \/\/ cross-browser behavior.\n      \/\/ NOTE: We don't use String#replace because it might have side effects\n      \/\/ causing this function to not compile to 0 bytes.\n      return \/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$\/.exec(str)[1];\n    };\n\n\n\/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n * @see goog.string.caseInsensitiveCompare\n *\/\ngoog.string.internal.caseInsensitiveCompare = function(str1, str2) {\n  'use strict';\n  const test1 = String(str1).toLowerCase();\n  const test2 = String(str2).toLowerCase();\n\n  if (test1 < test2) {\n    return -1;\n  } else if (test1 == test2) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n\n\/**\n * Converts \\n to <br>s or <br \/>s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n * @see goog.string.newLineToBr\n *\/\ngoog.string.internal.newLineToBr = function(str, opt_xml) {\n  'use strict';\n  return str.replace(\/(\\r\\n|\\r|\\n)\/g, opt_xml ? '<br \/>' : '<br>');\n};\n\n\n\/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars\n * @return {string} An escaped copy of `str`.\n * @see goog.string.htmlEscape\n *\/\ngoog.string.internal.htmlEscape = function(\n    str, opt_isLikelyToContainHtmlChars) {\n  'use strict';\n  if (opt_isLikelyToContainHtmlChars) {\n    str = str.replace(goog.string.internal.AMP_RE_, '&amp;')\n              .replace(goog.string.internal.LT_RE_, '&lt;')\n              .replace(goog.string.internal.GT_RE_, '&gt;')\n              .replace(goog.string.internal.QUOT_RE_, '&quot;')\n              .replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;')\n              .replace(goog.string.internal.NULL_RE_, '&#0;');\n    return str;\n\n  } else {\n    \/\/ quick test helps in the case when there are no chars to replace, in\n    \/\/ worst case this makes barely a difference to the time taken\n    if (!goog.string.internal.ALL_RE_.test(str)) return str;\n\n    \/\/ str.indexOf is faster than regex.test in this case\n    if (str.indexOf('&') != -1) {\n      str = str.replace(goog.string.internal.AMP_RE_, '&amp;');\n    }\n    if (str.indexOf('<') != -1) {\n      str = str.replace(goog.string.internal.LT_RE_, '&lt;');\n    }\n    if (str.indexOf('>') != -1) {\n      str = str.replace(goog.string.internal.GT_RE_, '&gt;');\n    }\n    if (str.indexOf('\"') != -1) {\n      str = str.replace(goog.string.internal.QUOT_RE_, '&quot;');\n    }\n    if (str.indexOf('\\'') != -1) {\n      str = str.replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;');\n    }\n    if (str.indexOf('\\x00') != -1) {\n      str = str.replace(goog.string.internal.NULL_RE_, '&#0;');\n    }\n    return str;\n  }\n};\n\n\n\/**\n * Regular expression that matches an ampersand, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.AMP_RE_ = \/&\/g;\n\n\n\/**\n * Regular expression that matches a less than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.LT_RE_ = \/<\/g;\n\n\n\/**\n * Regular expression that matches a greater than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.GT_RE_ = \/>\/g;\n\n\n\/**\n * Regular expression that matches a double quote, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.QUOT_RE_ = \/\"\/g;\n\n\n\/**\n * Regular expression that matches a single quote, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.SINGLE_QUOTE_RE_ = \/'\/g;\n\n\n\/**\n * Regular expression that matches null character, for use in escaping.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.NULL_RE_ = \/\\x00\/g;\n\n\n\/**\n * Regular expression that matches any character that needs to be escaped.\n * @const {!RegExp}\n * @private\n *\/\ngoog.string.internal.ALL_RE_ = \/[\\x00&<>\"']\/;\n\n\n\/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n * @see goog.string.whitespaceEscape\n *\/\ngoog.string.internal.whitespaceEscape = function(str, opt_xml) {\n  'use strict';\n  \/\/ This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.internal.newLineToBr(\n      str.replace(\/  \/g, ' &#160;'), opt_xml);\n};\n\n\n\/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n * @see goog.string.contains\n *\/\ngoog.string.internal.contains = function(str, subString) {\n  'use strict';\n  return str.indexOf(subString) != -1;\n};\n\n\n\/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n * @see goog.string.caseInsensitiveContains\n *\/\ngoog.string.internal.caseInsensitiveContains = function(str, subString) {\n  'use strict';\n  return goog.string.internal.contains(\n      str.toLowerCase(), subString.toLowerCase());\n};\n\n\n\/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n * @see goog.string.compareVersions\n *\/\ngoog.string.internal.compareVersions = function(version1, version2) {\n  'use strict';\n  let order = 0;\n  \/\/ Trim leading and trailing whitespace and split the versions into\n  \/\/ subversions.\n  const v1Subs = goog.string.internal.trim(String(version1)).split('.');\n  const v2Subs = goog.string.internal.trim(String(version2)).split('.');\n  const subCount = Math.max(v1Subs.length, v2Subs.length);\n\n  \/\/ Iterate over the subversions, as long as they appear to be equivalent.\n  for (let subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {\n    let v1Sub = v1Subs[subIdx] || '';\n    let v2Sub = v2Subs[subIdx] || '';\n\n    do {\n      \/\/ Split the subversions into pairs of numbers and qualifiers (like 'b').\n      \/\/ Two different RegExp objects are use to make it clear the code\n      \/\/ is side-effect free\n      const v1Comp = \/(\\d*)(\\D*)(.*)\/.exec(v1Sub) || ['', '', '', ''];\n      const v2Comp = \/(\\d*)(\\D*)(.*)\/.exec(v2Sub) || ['', '', '', ''];\n      \/\/ Break if there are no more matches.\n      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {\n        break;\n      }\n\n      \/\/ Parse the numeric part of the subversion. A missing number is\n      \/\/ equivalent to 0.\n      const v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);\n      const v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);\n\n      \/\/ Compare the subversion components. The number has the highest\n      \/\/ precedence. Next, if the numbers are equal, a subversion without any\n      \/\/ qualifier is always higher than a subversion with any qualifier. Next,\n      \/\/ the qualifiers are compared as strings.\n      order = goog.string.internal.compareElements_(v1CompNum, v2CompNum) ||\n          goog.string.internal.compareElements_(\n              v1Comp[2].length == 0, v2Comp[2].length == 0) ||\n          goog.string.internal.compareElements_(v1Comp[2], v2Comp[2]);\n      \/\/ Stop as soon as an inequality is discovered.\n\n      v1Sub = v1Comp[3];\n      v2Sub = v2Comp[3];\n    } while (order == 0);\n  }\n\n  return order;\n};\n\n\n\/**\n * Compares elements of a version number.\n *\n * @param {string|number|boolean} left An element from a version number.\n * @param {string|number|boolean} right An element from a version number.\n *\n * @return {number}  1 if `left` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `right` is higher.\n * @private\n *\/\ngoog.string.internal.compareElements_ = function(left, right) {\n  'use strict';\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  }\n  return 0;\n};\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Utilities for manipulating arrays.\n *\/\n\n\ngoog.module('goog.array');\ngoog.module.declareLegacyNamespace();\n\nconst asserts = goog.require('goog.asserts');\n\n\n\/**\n * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should\n * rely on Array.prototype functions, if available.\n *\n * The Array.prototype functions can be defined by external libraries like\n * Prototype and setting this flag to false forces closure to use its own\n * goog.array implementation.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on the prototype functions, specify\n * \"--define goog.NATIVE_ARRAY_PROTOTYPES=false\" to the JSCompiler.\n *\n * Setting goog.TRUSTED_SITE to false will automatically set\n * NATIVE_ARRAY_PROTOTYPES to false.\n *\/\ngoog.NATIVE_ARRAY_PROTOTYPES =\n    goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);\n\n\n\/**\n * @define {boolean} If true, JSCompiler will use the native implementation of\n * array functions where appropriate (e.g., `Array#filter`) and remove the\n * unused pure JS implementation.\n *\/\nconst ASSUME_NATIVE_FUNCTIONS = goog.define(\n    'goog.array.ASSUME_NATIVE_FUNCTIONS', goog.FEATURESET_YEAR > 2012);\nexports.ASSUME_NATIVE_FUNCTIONS = ASSUME_NATIVE_FUNCTIONS;\n\n\n\/**\n * Returns the last element in an array without removing it.\n * Same as {@link goog.array.last}.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n *\/\nfunction peek(array) {\n  return array[array.length - 1];\n}\nexports.peek = peek;\n\n\n\/**\n * Returns the last element in an array without removing it.\n * Same as {@link goog.array.peek}.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n *\/\nexports.last = peek;\n\n\/\/ NOTE(arv): Since most of the array functions are generic it allows you to\n\/\/ pass an array-like object. Strings have a length and are considered array-\n\/\/ like. However, the 'in' operator does not work on strings so we cannot just\n\/\/ use the array path even if the browser supports indexing into strings. We\n\/\/ therefore end up splitting the string.\n\n\n\/**\n * Returns the index of the first element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-indexof}\n *\n * @param {IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at index 0.\n * @return {number} The index of the first matching array element.\n * @template T\n *\/\nconst indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      const fromIndex = opt_fromIndex == null ?\n          0 :\n          (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :\n                               opt_fromIndex);\n\n      if (typeof arr === 'string') {\n        \/\/ Array.prototype.indexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.indexOf(obj, fromIndex);\n      }\n\n      for (let i = fromIndex; i < arr.length; i++) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\nexports.indexOf = indexOf;\n\n\n\/**\n * Returns the index of the last element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-lastindexof}\n *\n * @param {!IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {?number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at the end of the array.\n * @return {number} The index of the last matching array element.\n * @template T\n *\/\nconst lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      asserts.assert(arr.length != null);\n\n      \/\/ Firefox treats undefined and null as 0 in the fromIndex argument which\n      \/\/ leads it to always return -1\n      const fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      let fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n\n      if (fromIndex < 0) {\n        fromIndex = Math.max(0, arr.length + fromIndex);\n      }\n\n      if (typeof arr === 'string') {\n        \/\/ Array.prototype.lastIndexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.lastIndexOf(obj, fromIndex);\n      }\n\n      for (let i = fromIndex; i >= 0; i--) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\nexports.lastIndexOf = lastIndexOf;\n\n\n\/**\n * Calls a function for each element in an array. Skips holes in the array.\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-foreach}\n *\n * @param {IArrayLike<T>|string} arr Array or array like object over\n *     which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function takes 3 arguments (the element, the index and the\n *     array). The return value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @template T,S\n *\/\nconst forEach = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      Array.prototype.forEach.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  \/\/ must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr);\n        }\n      }\n    };\nexports.forEach = forEach;\n\n\n\/**\n * Calls a function for each element in an array, starting from the last\n * element rather than the first.\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array). The return\n *     value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @template T,S\n *\/\nfunction forEachRight(arr, f, opt_obj) {\n  const l = arr.length;  \/\/ must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = l - 1; i >= 0; --i) {\n    if (i in arr2) {\n      f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr);\n    }\n  }\n}\nexports.forEachRight = forEachRight;\n\n\n\/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-filter}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a Boolean. If the return value is true the element is added to the\n *     result array. If it is false the element is not included.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {!Array<T>} a new array in which only elements that passed the test\n *     are present.\n * @template T,S\n *\/\nconst filter = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.filter.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  \/\/ must be fixed during loop... see docs\n      const res = [];\n      let resLength = 0;\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          const val = arr2[i];  \/\/ in case f mutates arr2\n          if (f.call(\/** @type {?} *\/ (opt_obj), val, i, arr)) {\n            res[resLength++] = val;\n          }\n        }\n      }\n      return res;\n    };\nexports.filter = filter;\n\n\n\/**\n * Calls a function for each element in an array and inserts the result into a\n * new array.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-map}\n *\n * @param {IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call\n *     for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return something. The result will be\n *     inserted into a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the results from f.\n * @template THIS, VALUE, RESULT\n *\/\nconst map = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.map.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  \/\/ must be fixed during loop... see docs\n      const res = new Array(l);\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          res[i] = f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr);\n        }\n      }\n      return res;\n    };\nexports.map = map;\n\n\n\/**\n * Passes every element of an array into a function and accumulates the result.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-reduce}\n * Note that this implementation differs from the native Array.prototype.reduce\n * in that the initial value is assumed to be defined (the MDN docs linked above\n * recommend not omitting this parameter, although it is technically optional).\n *\n * For example:\n * var a = [1, 2, 3, 4];\n * reduce(a, function(r, v, i, arr) {return r + v;}, 0);\n * returns 10\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {R} Result of evaluating f repeatedly across the values of the array.\n * @template T,S,R\n *\/\nconst reduce = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?\n    function(arr, f, val, opt_obj) {\n      asserts.assert(arr.length != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduce.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      let rval = val;\n      forEach(arr, function(val, index) {\n        rval = f.call(\/** @type {?} *\/ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\nexports.reduce = reduce;\n\n\n\/**\n * Passes every element of an array into a function and accumulates the result,\n * starting from the last element and working towards the first.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-reduceright}\n *\n * For example:\n * var a = ['a', 'b', 'c'];\n * reduceRight(a, function(r, v, i, arr) {return r + v;}, '');\n * returns 'cba'\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {R} Object returned as a result of evaluating f repeatedly across the\n *     values of the array.\n * @template T,S,R\n *\/\nconst reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?\n    function(arr, f, val, opt_obj) {\n      asserts.assert(arr.length != null);\n      asserts.assert(f != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduceRight.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      let rval = val;\n      forEachRight(arr, function(val, index) {\n        rval = f.call(\/** @type {?} *\/ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\nexports.reduceRight = reduceRight;\n\n\n\/**\n * Calls f for each element of an array. If any call returns true, some()\n * returns true (without checking the remaining elements). If all calls\n * return false, some() returns false.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-some}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} true if any element passes the test.\n * @template T,S\n *\/\nconst some = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.some.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  \/\/ must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2 && f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr)) {\n          return true;\n        }\n      }\n      return false;\n    };\nexports.some = some;\n\n\n\/**\n * Call f for each element of an array. If all calls return true, every()\n * returns true. If any call returns false, every() returns false and\n * does not continue to check the remaining elements.\n *\n * See {@link http:\/\/tinyurl.com\/developer-mozilla-org-array-every}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} false if any element fails the test.\n * @template T,S\n *\/\nconst every = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.every.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  \/\/ must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2 && !f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\nexports.every = every;\n\n\n\/**\n * Counts the array elements that fulfill the predicate, i.e. for which the\n * callback function returns true. Skips holes in the array.\n *\n * @param {!IArrayLike<T>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this: S, T, number, ?): boolean} f The function to call for\n *     every element. Takes 3 arguments (the element, the index and the array).\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @return {number} The number of the matching elements.\n * @template T,S\n *\/\nfunction count(arr, f, opt_obj) {\n  let count = 0;\n  forEach(arr, function(element, index, arr) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), element, index, arr)) {\n      ++count;\n    }\n  }, opt_obj);\n  return count;\n}\nexports.count = count;\n\n\n\/**\n * Search an array for the first element that satisfies a given condition and\n * return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The first array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n *\/\nfunction find(arr, f, opt_obj) {\n  const i = findIndex(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n}\nexports.find = find;\n\n\n\/**\n * Search an array for the first element that satisfies a given condition and\n * return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the first array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n *\/\nfunction findIndex(arr, f, opt_obj) {\n  const l = arr.length;  \/\/ must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = 0; i < l; i++) {\n    if (i in arr2 && f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n}\nexports.findIndex = findIndex;\n\n\n\/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The last array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n *\/\nfunction findRight(arr, f, opt_obj) {\n  const i = findIndexRight(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n}\nexports.findRight = findRight;\n\n\n\/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the last array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n *\/\nfunction findIndexRight(arr, f, opt_obj) {\n  const l = arr.length;  \/\/ must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = l - 1; i >= 0; i--) {\n    if (i in arr2 && f.call(\/** @type {?} *\/ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n}\nexports.findIndexRight = findIndexRight;\n\n\n\/**\n * Whether the array contains the given object.\n * @param {IArrayLike<?>|string} arr The array to test for the presence of the\n *     element.\n * @param {*} obj The object for which to test.\n * @return {boolean} true if obj is present.\n *\/\nfunction contains(arr, obj) {\n  return indexOf(arr, obj) >= 0;\n}\nexports.contains = contains;\n\n\n\/**\n * Whether the array is empty.\n * @param {IArrayLike<?>|string} arr The array to test.\n * @return {boolean} true if empty.\n *\/\nfunction isEmpty(arr) {\n  return arr.length == 0;\n}\nexports.isEmpty = isEmpty;\n\n\n\/**\n * Clears the array.\n * @param {IArrayLike<?>} arr Array or array like object to clear.\n *\/\nfunction clear(arr) {\n  \/\/ For non real arrays we don't have the magic length so we delete the\n  \/\/ indices.\n  if (!Array.isArray(arr)) {\n    for (let i = arr.length - 1; i >= 0; i--) {\n      delete arr[i];\n    }\n  }\n  arr.length = 0;\n}\nexports.clear = clear;\n\n\n\/**\n * Pushes an item into an array, if it's not already in the array.\n * @param {Array<T>} arr Array into which to insert the item.\n * @param {T} obj Value to add.\n * @template T\n *\/\nfunction insert(arr, obj) {\n  if (!contains(arr, obj)) {\n    arr.push(obj);\n  }\n}\nexports.insert = insert;\n\n\n\/**\n * Inserts an object at the given index of the array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {*} obj The object to insert.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n *\/\nfunction insertAt(arr, obj, opt_i) {\n  splice(arr, opt_i, 0, obj);\n}\nexports.insertAt = insertAt;\n\n\n\/**\n * Inserts at the given index of the array, all elements of another array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {IArrayLike<?>} elementsToAdd The array of elements to add.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n *\/\nfunction insertArrayAt(arr, elementsToAdd, opt_i) {\n  goog.partial(splice, arr, opt_i, 0).apply(null, elementsToAdd);\n}\nexports.insertArrayAt = insertArrayAt;\n\n\n\/**\n * Inserts an object into an array before a specified object.\n * @param {Array<T>} arr The array to modify.\n * @param {T} obj The object to insert.\n * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2\n *     is omitted or not found, obj is inserted at the end of the array.\n * @template T\n *\/\nfunction insertBefore(arr, obj, opt_obj2) {\n  let i;\n  if (arguments.length == 2 || (i = indexOf(arr, opt_obj2)) < 0) {\n    arr.push(obj);\n  } else {\n    insertAt(arr, obj, i);\n  }\n}\nexports.insertBefore = insertBefore;\n\n\n\/**\n * Removes the first occurrence of a particular value from an array.\n * @param {IArrayLike<T>} arr Array from which to remove\n *     value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n *\/\nfunction remove(arr, obj) {\n  const i = indexOf(arr, obj);\n  let rv;\n  if ((rv = i >= 0)) {\n    removeAt(arr, i);\n  }\n  return rv;\n}\nexports.remove = remove;\n\n\n\/**\n * Removes the last occurrence of a particular value from an array.\n * @param {!IArrayLike<T>} arr Array from which to remove value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n *\/\nfunction removeLast(arr, obj) {\n  const i = lastIndexOf(arr, obj);\n  if (i >= 0) {\n    removeAt(arr, i);\n    return true;\n  }\n  return false;\n}\nexports.removeLast = removeLast;\n\n\n\/**\n * Removes from an array the element at index i\n * @param {IArrayLike<?>} arr Array or array like object from which to\n *     remove value.\n * @param {number} i The index to remove.\n * @return {boolean} True if an element was removed.\n *\/\nfunction removeAt(arr, i) {\n  asserts.assert(arr.length != null);\n\n  \/\/ use generic form of splice\n  \/\/ splice returns the removed items and if successful the length of that\n  \/\/ will be 1\n  return Array.prototype.splice.call(arr, i, 1).length == 1;\n}\nexports.removeAt = removeAt;\n\n\n\/**\n * Removes the first value that satisfies the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {boolean} True if an element was removed.\n * @template T,S\n *\/\nfunction removeIf(arr, f, opt_obj) {\n  const i = findIndex(arr, f, opt_obj);\n  if (i >= 0) {\n    removeAt(arr, i);\n    return true;\n  }\n  return false;\n}\nexports.removeIf = removeIf;\n\n\n\/**\n * Removes all values that satisfy the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The number of items removed\n * @template T,S\n *\/\nfunction removeAllIf(arr, f, opt_obj) {\n  let removedCount = 0;\n  forEachRight(arr, function(val, index) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), val, index, arr)) {\n      if (removeAt(arr, index)) {\n        removedCount++;\n      }\n    }\n  });\n  return removedCount;\n}\nexports.removeAllIf = removeAllIf;\n\n\n\/**\n * Returns a new array that is the result of joining the arguments.  If arrays\n * are passed then their items are added, however, if non-arrays are passed they\n * will be added to the return array as is.\n *\n * Note that ArrayLike objects will be added as is, rather than having their\n * items added.\n *\n * concat([1, 2], [3, 4]) -> [1, 2, 3, 4]\n * concat(0, [1, 2]) -> [0, 1, 2]\n * concat([1, 2], null) -> [1, 2, null]\n *\n * @param {...*} var_args Items to concatenate.  Arrays will have each item\n *     added, while primitives and objects will be added as is.\n * @return {!Array<?>} The new resultant array.\n *\/\nfunction concat(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n}\nexports.concat = concat;\n\n\n\/**\n * Returns a new array that contains the contents of all the arrays passed.\n * @param {...!Array<T>} var_args\n * @return {!Array<T>}\n * @template T\n *\/\nfunction join(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n}\nexports.join = join;\n\n\n\/**\n * Converts an object to an array.\n * @param {IArrayLike<T>|string} object  The object to convert to an\n *     array.\n * @return {!Array<T>} The object converted into an array. If object has a\n *     length property, every property indexed with a non-negative number\n *     less than length will be included in the result. If object does not\n *     have a length property, an empty array will be returned.\n * @template T\n *\/\nfunction toArray(object) {\n  const length = object.length;\n\n  \/\/ If length is not a number the following is false. This case is kept for\n  \/\/ backwards compatibility since there are callers that pass objects that are\n  \/\/ not array like.\n  if (length > 0) {\n    const rv = new Array(length);\n    for (let i = 0; i < length; i++) {\n      rv[i] = object[i];\n    }\n    return rv;\n  }\n  return [];\n}\nexports.toArray = toArray;\n\n\n\/**\n * Does a shallow copy of an array.\n * @param {IArrayLike<T>|string} arr  Array or array-like object to\n *     clone.\n * @return {!Array<T>} Clone of the input array.\n * @template T\n *\/\nconst clone = toArray;\nexports.clone = clone;\n\n\n\/**\n * Extends an array with another array, element, or \"array like\" object.\n * This function operates 'in-place', it does not create a new Array.\n *\n * Example:\n * var a = [];\n * extend(a, [0, 1]);\n * a; \/\/ [0, 1]\n * extend(a, 2);\n * a; \/\/ [0, 1, 2]\n *\n * @param {Array<VALUE>} arr1  The array to modify.\n * @param {...(IArrayLike<VALUE>|VALUE)} var_args The elements or arrays of\n *     elements to add to arr1.\n * @template VALUE\n *\/\nfunction extend(arr1, var_args) {\n  for (let i = 1; i < arguments.length; i++) {\n    const arr2 = arguments[i];\n    if (goog.isArrayLike(arr2)) {\n      const len1 = arr1.length || 0;\n      const len2 = arr2.length || 0;\n      arr1.length = len1 + len2;\n      for (let j = 0; j < len2; j++) {\n        arr1[len1 + j] = arr2[j];\n      }\n    } else {\n      arr1.push(arr2);\n    }\n  }\n}\nexports.extend = extend;\n\n\n\/**\n * Adds or removes elements from an array. This is a generic version of Array\n * splice. This means that it might work on other objects similar to arrays,\n * such as the arguments object.\n *\n * @param {IArrayLike<T>} arr The array to modify.\n * @param {number|undefined} index The index at which to start changing the\n *     array. If not defined, treated as 0.\n * @param {number} howMany How many elements to remove (0 means no removal. A\n *     value below 0 is treated as zero and so is any other non number. Numbers\n *     are floored).\n * @param {...T} var_args Optional, additional elements to insert into the\n *     array.\n * @return {!Array<T>} the removed elements.\n * @template T\n *\/\nfunction splice(arr, index, howMany, var_args) {\n  asserts.assert(arr.length != null);\n\n  return Array.prototype.splice.apply(arr, slice(arguments, 1));\n}\nexports.splice = splice;\n\n\n\/**\n * Returns a new array from a segment of an array. This is a generic version of\n * Array slice. This means that it might work on other objects similar to\n * arrays, such as the arguments object.\n *\n * @param {IArrayLike<T>|string} arr The array from\n * which to copy a segment.\n * @param {number} start The index of the first element to copy.\n * @param {number=} opt_end The index after the last element to copy.\n * @return {!Array<T>} A new array containing the specified segment of the\n *     original array.\n * @template T\n *\/\nfunction slice(arr, start, opt_end) {\n  asserts.assert(arr.length != null);\n\n  \/\/ passing 1 arg to slice is not the same as passing 2 where the second is\n  \/\/ null or undefined (in that case the second argument is treated as 0).\n  \/\/ we could use slice on the arguments object and then use apply instead of\n  \/\/ testing the length\n  if (arguments.length <= 2) {\n    return Array.prototype.slice.call(arr, start);\n  } else {\n    return Array.prototype.slice.call(arr, start, opt_end);\n  }\n}\nexports.slice = slice;\n\n\n\/**\n * Removes all duplicates from an array (retaining only the first\n * occurrence of each array element).  This function modifies the\n * array in place and doesn't change the order of the non-duplicate items.\n *\n * For objects, duplicates are identified as having the same unique ID as\n * defined by {@link goog.getUid}.\n *\n * Alternatively you can specify a custom hash function that returns a unique\n * value for each item in the array it should consider unique.\n *\n * Runtime: N,\n * Worstcase space: 2N (no dupes)\n *\n * @param {IArrayLike<T>} arr The array from which to remove\n *     duplicates.\n * @param {Array=} opt_rv An optional array in which to return the results,\n *     instead of performing the removal inplace.  If specified, the original\n *     array will remain unchanged.\n * @param {function(T):string=} opt_hashFn An optional function to use to\n *     apply to every item in the array. This function should return a unique\n *     value for each item in the array it should consider unique.\n * @template T\n *\/\nfunction removeDuplicates(arr, opt_rv, opt_hashFn) {\n  const returnArray = opt_rv || arr;\n  const defaultHashFn = function(item) {\n    \/\/ Prefix each type with a single character representing the type to\n    \/\/ prevent conflicting keys (e.g. true and 'true').\n    return goog.isObject(item) ? 'o' + goog.getUid(item) :\n                                 (typeof item).charAt(0) + item;\n  };\n  const hashFn = opt_hashFn || defaultHashFn;\n\n  let cursorInsert = 0;\n  let cursorRead = 0;\n  const seen = {};\n\n  while (cursorRead < arr.length) {\n    const current = arr[cursorRead++];\n    const key = hashFn(current);\n    if (!Object.prototype.hasOwnProperty.call(seen, key)) {\n      seen[key] = true;\n      returnArray[cursorInsert++] = current;\n    }\n  }\n  returnArray.length = cursorInsert;\n}\nexports.removeDuplicates = removeDuplicates;\n\n\n\/**\n * Searches the specified array for the specified target using the binary\n * search algorithm.  If no opt_compareFn is specified, elements are compared\n * using <code>defaultCompare<\/code>, which compares the elements\n * using the built in < and > operators.  This will produce the expected\n * behavior for homogeneous arrays of String(s) and Number(s). The array\n * specified <b>must<\/b> be sorted in ascending order (as defined by the\n * comparison function).  If the array is not sorted, results are undefined.\n * If the array contains multiple instances of the specified target value, the\n * left-most instance will be found.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {TARGET} target The sought value.\n * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, the target value and an element from your array, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @template TARGET, VALUE\n *\/\nfunction binarySearch(arr, target, opt_compareFn) {\n  return binarySearch_(\n      arr, opt_compareFn || defaultCompare, false \/* isEvaluator *\/, target);\n}\nexports.binarySearch = binarySearch;\n\n\n\/**\n * Selects an index in the specified array using the binary search algorithm.\n * The evaluator receives an element and determines whether the desired index\n * is before, at, or after it.  The evaluator must be consistent (formally,\n * map(map(arr, evaluator, opt_obj), goog.math.sign)\n * must be monotonically non-increasing).\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {function(this:THIS, VALUE, number, ?): number} evaluator\n *     Evaluator function that receives 3 arguments (the element, the index and\n *     the array). Should return a negative number, zero, or a positive number\n *     depending on whether the desired index is before, at, or after the\n *     element passed to it.\n * @param {THIS=} opt_obj The object to be used as the value of 'this'\n *     within evaluator.\n * @return {number} Index of the leftmost element matched by the evaluator, if\n *     such exists; otherwise (-(insertion point) - 1). The insertion point is\n *     the index of the first element for which the evaluator returns negative,\n *     or arr.length if no such element exists. The return value is non-negative\n *     iff a match is found.\n * @template THIS, VALUE\n *\/\nfunction binarySelect(arr, evaluator, opt_obj) {\n  return binarySearch_(\n      arr, evaluator, true \/* isEvaluator *\/, undefined \/* opt_target *\/,\n      opt_obj);\n}\nexports.binarySelect = binarySelect;\n\n\n\/**\n * Implementation of a binary search algorithm which knows how to use both\n * comparison functions and evaluators. If an evaluator is provided, will call\n * the evaluator with the given optional data object, conforming to the\n * interface defined in binarySelect. Otherwise, if a comparison function is\n * provided, will call the comparison function against the given data object.\n *\n * This implementation purposefully does not use goog.bind or goog.partial for\n * performance reasons.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<?>} arr The array to be searched.\n * @param {function(?, ?, ?): number | function(?, ?): number} compareFn\n *     Either an evaluator or a comparison function, as defined by binarySearch\n *     and binarySelect above.\n * @param {boolean} isEvaluator Whether the function is an evaluator or a\n *     comparison function.\n * @param {?=} opt_target If the function is a comparison function, then\n *     this is the target to binary search for.\n * @param {Object=} opt_selfObj If the function is an evaluator, this is an\n *     optional this object for the evaluator.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @private\n *\/\nfunction binarySearch_(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {\n  let left = 0;            \/\/ inclusive\n  let right = arr.length;  \/\/ exclusive\n  let found;\n  while (left < right) {\n    const middle = left + ((right - left) >>> 1);\n    let compareResult;\n    if (isEvaluator) {\n      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);\n    } else {\n      \/\/ NOTE(dimvar): To avoid this cast, we'd have to use function overloading\n      \/\/ for the type of binarySearch_, which the type system can't express yet.\n      compareResult = \/** @type {function(?, ?): number} *\/ (compareFn)(\n          opt_target, arr[middle]);\n    }\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      \/\/ We are looking for the lowest index so we can't return immediately.\n      found = !compareResult;\n    }\n  }\n  \/\/ left is the index if found, or the insertion point otherwise.\n  \/\/ Avoiding bitwise not operator, as that causes a loss in precision for array\n  \/\/ indexes outside the bounds of a 32-bit signed integer.  Array indexes have\n  \/\/ a maximum value of 2^32-2 https:\/\/tc39.es\/ecma262\/#array-index\n  return found ? left : -left - 1;\n}\n\n\n\/**\n * Sorts the specified array into ascending order.  If no opt_compareFn is\n * specified, elements are compared using\n * <code>defaultCompare<\/code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s), unlike the native sort,\n * but will give unpredictable results for heterogeneous lists of strings and\n * numbers with different numbers of digits.\n *\n * This sort is not guaranteed to be stable.\n *\n * Runtime: Same as `Array.prototype.sort`\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T,T):number=} opt_compareFn Optional comparison\n *     function by which the\n *     array is to be ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @template T\n *\/\nfunction sort(arr, opt_compareFn) {\n  \/\/ TODO(arv): Update type annotation since null is not accepted.\n  arr.sort(opt_compareFn || defaultCompare);\n}\nexports.sort = sort;\n\n\n\/**\n * Sorts the specified array into ascending order in a stable way.  If no\n * opt_compareFn is specified, elements are compared using\n * <code>defaultCompare<\/code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s).\n *\n * Runtime: Same as `Array.prototype.sort`, plus an additional\n * O(n) overhead of copying the array twice.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T, T): number=} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T\n *\/\nfunction stableSort(arr, opt_compareFn) {\n  const compArr = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    compArr[i] = {index: i, value: arr[i]};\n  }\n  const valueCompareFn = opt_compareFn || defaultCompare;\n  function stableCompareFn(obj1, obj2) {\n    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;\n  }\n  sort(compArr, stableCompareFn);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = compArr[i].value;\n  }\n}\nexports.stableSort = stableSort;\n\n\n\/**\n * Sort the specified array into ascending order based on item keys\n * returned by the specified key function.\n * If no opt_compareFn is specified, the keys are compared in ascending order\n * using <code>defaultCompare<\/code>.\n *\n * Runtime: O(S(f(n)), where S is runtime of <code>sort<\/code>\n * and f(n) is runtime of the key function.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {function(T): K} keyFn Function taking array element and returning\n *     a key used for sorting this element.\n * @param {?function(K, K): number=} opt_compareFn Optional comparison function\n *     by which the keys are to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T,K\n *\/\nfunction sortByKey(arr, keyFn, opt_compareFn) {\n  const keyCompareFn = opt_compareFn || defaultCompare;\n  sort(arr, function(a, b) {\n    return keyCompareFn(keyFn(a), keyFn(b));\n  });\n}\nexports.sortByKey = sortByKey;\n\n\n\/**\n * Sorts an array of objects by the specified object key and compare\n * function. If no compare function is provided, the key values are\n * compared in ascending order using <code>defaultCompare<\/code>.\n * This won't work for keys that get renamed by the compiler. So use\n * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.\n * @param {Array<Object>} arr An array of objects to sort.\n * @param {string} key The object key to sort by.\n * @param {Function=} opt_compareFn The function to use to compare key\n *     values.\n *\/\nfunction sortObjectsByKey(arr, key, opt_compareFn) {\n  sortByKey(arr, function(obj) {\n    return obj[key];\n  }, opt_compareFn);\n}\nexports.sortObjectsByKey = sortObjectsByKey;\n\n\n\/**\n * Tells if the array is sorted.\n * @param {!IArrayLike<T>} arr The array.\n * @param {?function(T,T):number=} opt_compareFn Function to compare the\n *     array elements.\n *     Should take 2 arguments to compare, and return a negative number, zero,\n *     or a positive number depending on whether the first argument is less\n *     than, equal to, or greater than the second.\n * @param {boolean=} opt_strict If true no equal elements are allowed.\n * @return {boolean} Whether the array is sorted.\n * @template T\n *\/\nfunction isSorted(arr, opt_compareFn, opt_strict) {\n  const compare = opt_compareFn || defaultCompare;\n  for (let i = 1; i < arr.length; i++) {\n    const compareResult = compare(arr[i - 1], arr[i]);\n    if (compareResult > 0 || compareResult == 0 && opt_strict) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isSorted = isSorted;\n\n\n\/**\n * Compares two arrays for equality. Two arrays are considered equal if they\n * have the same length and their corresponding elements are equal according to\n * the comparison function.\n *\n * @param {IArrayLike<A>} arr1 The first array to compare.\n * @param {IArrayLike<B>} arr2 The second array to compare.\n * @param {?function(A,B):boolean=} opt_equalsFn Optional comparison function.\n *     Should take 2 arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} Whether the two arrays are equal.\n * @template A\n * @template B\n *\/\nfunction equals(arr1, arr2, opt_equalsFn) {\n  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||\n      arr1.length != arr2.length) {\n    return false;\n  }\n  const l = arr1.length;\n  const equalsFn = opt_equalsFn || defaultCompareEquality;\n  for (let i = 0; i < l; i++) {\n    if (!equalsFn(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.equals = equals;\n\n\n\/**\n * 3-way array compare function.\n * @param {!IArrayLike<VALUE>} arr1 The first array to\n *     compare.\n * @param {!IArrayLike<VALUE>} arr2 The second array to\n *     compare.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is to be ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {number} Negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template VALUE\n *\/\nfunction compare3(arr1, arr2, opt_compareFn) {\n  const compare = opt_compareFn || defaultCompare;\n  const l = Math.min(arr1.length, arr2.length);\n  for (let i = 0; i < l; i++) {\n    const result = compare(arr1[i], arr2[i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return defaultCompare(arr1.length, arr2.length);\n}\nexports.compare3 = compare3;\n\n\n\/**\n * Compares its two arguments for order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second,\n *     respectively.\n * @template VALUE\n *\/\nfunction defaultCompare(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\nexports.defaultCompare = defaultCompare;\n\n\n\/**\n * Compares its two arguments for inverse order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second,\n *     respectively.\n * @template VALUE\n *\/\nfunction inverseDefaultCompare(a, b) {\n  return -defaultCompare(a, b);\n}\nexports.inverseDefaultCompare = inverseDefaultCompare;\n\n\n\/**\n * Compares its two arguments for equality, using the built in === operator.\n * @param {*} a The first object to compare.\n * @param {*} b The second object to compare.\n * @return {boolean} True if the two arguments are equal, false otherwise.\n *\/\nfunction defaultCompareEquality(a, b) {\n  return a === b;\n}\nexports.defaultCompareEquality = defaultCompareEquality;\n\n\n\/**\n * Inserts a value into a sorted array. The array is not modified if the\n * value is already present.\n * @param {IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to insert.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was inserted.\n * @template VALUE\n *\/\nfunction binaryInsert(array, value, opt_compareFn) {\n  const index = binarySearch(array, value, opt_compareFn);\n  if (index < 0) {\n    insertAt(array, value, -(index + 1));\n    return true;\n  }\n  return false;\n}\nexports.binaryInsert = binaryInsert;\n\n\n\/**\n * Removes a value from a sorted array.\n * @param {!IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to remove.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was removed.\n * @template VALUE\n *\/\nfunction binaryRemove(array, value, opt_compareFn) {\n  const index = binarySearch(array, value, opt_compareFn);\n  return (index >= 0) ? removeAt(array, index) : false;\n}\nexports.binaryRemove = binaryRemove;\n\n\n\/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {IArrayLike<T>} array The array.\n * @param {function(this:S, T, number, !IArrayLike<T>):?} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index\n *     and the array) and must return a valid object key (a string, number,\n *     etc), or undefined, if that object should not be placed in a bucket.\n * @param {S=} opt_obj The object to be used as the value of 'this' within\n *     sorter.\n * @return {!Object<!Array<T>>} An object, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template T,S\n *\/\nfunction bucket(array, sorter, opt_obj) {\n  const buckets = {};\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const key = sorter.call(\/** @type {?} *\/ (opt_obj), value, i, array);\n    if (key !== undefined) {\n      \/\/ Push the value to the right bucket, creating it if necessary.\n      const bucket = buckets[key] || (buckets[key] = []);\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n}\nexports.bucket = bucket;\n\n\n\/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {!IArrayLike<V>} array The array.\n * @param {function(V, number, !IArrayLike<V>):(K|undefined)} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index,\n *     and the array) and must return a value to use as a key, or undefined, if\n *     that object should not be placed in a bucket.\n * @return {!Map<K, !Array<V>>} A map, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template K,V\n *\/\nfunction bucketToMap(array, sorter) {\n  const \/** !Map<K, !Array<V>> *\/ buckets = new Map();\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const key = sorter(value, i, array);\n    if (key !== undefined) {\n      \/\/ Push the value to the right bucket, creating it if necessary.\n      let bucket = buckets.get(key);\n      if (!bucket) {\n        bucket = [];\n        buckets.set(key, bucket);\n      }\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n}\nexports.bucketToMap = bucketToMap;\n\n\n\/**\n * Creates a new object built from the provided array and the key-generation\n * function.\n * @param {IArrayLike<T>} arr Array or array like object over\n *     which to iterate whose elements will be the values in the new object.\n * @param {?function(this:S, T, number, ?) : string} keyFunc The function to\n *     call for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a string that will be used as the\n *     key for the element in the new object. If the function returns the same\n *     key for more than one element, the value for that key is\n *     implementation-defined.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within keyFunc.\n * @return {!Object<T>} The new object.\n * @template T,S\n *\/\nfunction toObject(arr, keyFunc, opt_obj) {\n  const ret = {};\n  forEach(arr, function(element, index) {\n    ret[keyFunc.call(\/** @type {?} *\/ (opt_obj), element, index, arr)] =\n        element;\n  });\n  return ret;\n}\nexports.toObject = toObject;\n\n\n\/**\n * Creates a new ES6 Map built from the provided array and the key-generation\n * function.\n * @param {!IArrayLike<V>} arr Array or array like object over which to iterate\n *     whose elements will be the values in the new object.\n * @param {?function(V, number, ?) : K} keyFunc The function to call for every\n *     element. This function takes 3 arguments (the element, the index, and the\n *     array) and should return a value that will be used as the key for the\n *     element in the new object. If the function returns the same key for more\n *     than one element, the value for that key is implementation-defined.\n * @return {!Map<K, V>} The new map.\n * @template K,V\n *\/\nfunction toMap(arr, keyFunc) {\n  const \/** !Map<K, V> *\/ map = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    map.set(keyFunc(element, i, arr), element);\n  }\n\n  return map;\n}\nexports.toMap = toMap;\n\n\n\/**\n * Creates a range of numbers in an arithmetic progression.\n *\n * Range takes 1, 2, or 3 arguments:\n * <pre>\n * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]\n * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]\n * range(-2, -5, -1) produces [-2, -3, -4]\n * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.\n * <\/pre>\n *\n * @param {number} startOrEnd The starting value of the range if an end argument\n *     is provided. Otherwise, the start value is 0, and this is the end value.\n * @param {number=} opt_end The optional end value of the range.\n * @param {number=} opt_step The step size between range values. Defaults to 1\n *     if opt_step is undefined or 0.\n * @return {!Array<number>} An array of numbers for the requested range. May be\n *     an empty array if adding the step would not converge toward the end\n *     value.\n *\/\nfunction range(startOrEnd, opt_end, opt_step) {\n  const array = [];\n  let start = 0;\n  let end = startOrEnd;\n  const step = opt_step || 1;\n  if (opt_end !== undefined) {\n    start = startOrEnd;\n    end = opt_end;\n  }\n\n  if (step * (end - start) < 0) {\n    \/\/ Sign mismatch: start + step will never reach the end value.\n    return [];\n  }\n\n  if (step > 0) {\n    for (let i = start; i < end; i += step) {\n      array.push(i);\n    }\n  } else {\n    for (let i = start; i > end; i += step) {\n      array.push(i);\n    }\n  }\n  return array;\n}\nexports.range = range;\n\n\n\/**\n * Returns an array consisting of the given value repeated N times.\n *\n * @param {VALUE} value The value to repeat.\n * @param {number} n The repeat count.\n * @return {!Array<VALUE>} An array with the repeated value.\n * @template VALUE\n *\/\nfunction repeat(value, n) {\n  const array = [];\n  for (let i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\nexports.repeat = repeat;\n\n\n\/**\n * Returns an array consisting of every argument with all arrays\n * expanded in-place recursively.\n *\n * @param {...*} var_args The values to flatten.\n * @return {!Array<?>} An array containing the flattened values.\n *\/\nfunction flatten(var_args) {\n  const CHUNK_SIZE = 8192;\n\n  const result = [];\n  for (let i = 0; i < arguments.length; i++) {\n    const element = arguments[i];\n    if (Array.isArray(element)) {\n      for (let c = 0; c < element.length; c += CHUNK_SIZE) {\n        const chunk = slice(element, c, c + CHUNK_SIZE);\n        const recurseResult = flatten.apply(null, chunk);\n        for (let r = 0; r < recurseResult.length; r++) {\n          result.push(recurseResult[r]);\n        }\n      }\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n}\nexports.flatten = flatten;\n\n\n\/**\n * Rotates an array in-place. After calling this method, the element at\n * index i will be the element previously at index (i - n) %\n * array.length, for all values of i between 0 and array.length - 1,\n * inclusive.\n *\n * For example, suppose list comprises [t, a, n, k, s]. After invoking\n * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].\n *\n * @param {!Array<T>} array The array to rotate.\n * @param {number} n The amount to rotate.\n * @return {!Array<T>} The array.\n * @template T\n *\/\nfunction rotate(array, n) {\n  asserts.assert(array.length != null);\n\n  if (array.length) {\n    n %= array.length;\n    if (n > 0) {\n      Array.prototype.unshift.apply(array, array.splice(-n, n));\n    } else if (n < 0) {\n      Array.prototype.push.apply(array, array.splice(0, -n));\n    }\n  }\n  return array;\n}\nexports.rotate = rotate;\n\n\n\/**\n * Moves one item of an array to a new position keeping the order of the rest\n * of the items. Example use case: keeping a list of JavaScript objects\n * synchronized with the corresponding list of DOM elements after one of the\n * elements has been dragged to a new position.\n * @param {!IArrayLike<?>} arr The array to modify.\n * @param {number} fromIndex Index of the item to move between 0 and\n *     `arr.length - 1`.\n * @param {number} toIndex Target index between 0 and `arr.length - 1`.\n *\/\nfunction moveItem(arr, fromIndex, toIndex) {\n  asserts.assert(fromIndex >= 0 && fromIndex < arr.length);\n  asserts.assert(toIndex >= 0 && toIndex < arr.length);\n  \/\/ Remove 1 item at fromIndex.\n  const removedItems = Array.prototype.splice.call(arr, fromIndex, 1);\n  \/\/ Insert the removed item at toIndex.\n  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);\n  \/\/ We don't use goog.array.insertAt and goog.array.removeAt, because they're\n  \/\/ significantly slower than splice.\n}\nexports.moveItem = moveItem;\n\n\n\/**\n * Creates a new array for which the element at position i is an array of the\n * ith element of the provided arrays.  The returned array will only be as long\n * as the shortest array provided; additional values are ignored.  For example,\n * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].\n *\n * This is similar to the zip() function in Python.  See {@link\n * http:\/\/docs.python.org\/library\/functions.html#zip}\n *\n * @param {...!IArrayLike<?>} var_args Arrays to be combined.\n * @return {!Array<!Array<?>>} A new array of arrays created from\n *     provided arrays.\n *\/\nfunction zip(var_args) {\n  if (!arguments.length) {\n    return [];\n  }\n  const result = [];\n  let minLen = arguments[0].length;\n  for (let i = 1; i < arguments.length; i++) {\n    if (arguments[i].length < minLen) {\n      minLen = arguments[i].length;\n    }\n  }\n  for (let i = 0; i < minLen; i++) {\n    const value = [];\n    for (let j = 0; j < arguments.length; j++) {\n      value.push(arguments[j][i]);\n    }\n    result.push(value);\n  }\n  return result;\n}\nexports.zip = zip;\n\n\n\/**\n * Shuffles the values in the specified array using the Fisher-Yates in-place\n * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()\n * and so resets the state of that random number generator. Similarly, may reset\n * the state of any other specified random number generator.\n *\n * Runtime: O(n)\n *\n * @param {!Array<?>} arr The array to be shuffled.\n * @param {function():number=} opt_randFn Optional random function to use for\n *     shuffling.\n *     Takes no arguments, and returns a random number on the interval [0, 1).\n *     Defaults to Math.random() using JavaScript's built-in Math library.\n *\/\nfunction shuffle(arr, opt_randFn) {\n  const randFn = opt_randFn || Math.random;\n\n  for (let i = arr.length - 1; i > 0; i--) {\n    \/\/ Choose a random array index in [0, i] (inclusive with i).\n    const j = Math.floor(randFn() * (i + 1));\n\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n}\nexports.shuffle = shuffle;\n\n\n\/**\n * Returns a new array of elements from arr, based on the indexes of elements\n * provided by index_arr. For example, the result of index copying\n * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].\n *\n * @param {!IArrayLike<T>} arr The array to get a indexed copy from.\n * @param {!IArrayLike<number>} index_arr An array of indexes to get from arr.\n * @return {!Array<T>} A new array of elements from arr in index_arr order.\n * @template T\n *\/\nfunction copyByIndex(arr, index_arr) {\n  const result = [];\n  forEach(index_arr, function(index) {\n    result.push(arr[index]);\n  });\n  return result;\n}\nexports.copyByIndex = copyByIndex;\n\n\n\/**\n * Maps each element of the input array into zero or more elements of the output\n * array.\n *\n * @param {!IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): !Array<RESULT>} f The function\n *     to call for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return an array. The result will be\n *     used to extend a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the concatenation of all arrays\n *     returned from f.\n * @template THIS, VALUE, RESULT\n *\/\nfunction concatMap(arr, f, opt_obj) {\n  return concat.apply([], map(arr, f, opt_obj));\n}\nexports.concatMap = concatMap;\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Implements the disposable interface.\n *\/\n\ngoog.provide('goog.Disposable');\n\ngoog.require('goog.disposable.IDisposable');\ngoog.require('goog.dispose');\n\/**\n * TODO(user): Remove this require.\n * @suppress {extraRequire}\n *\/\ngoog.require('goog.disposeAll');\n\n\/**\n * Class that provides the basic implementation for disposable objects. If your\n * class holds references or resources that can't be collected by standard GC,\n * it should extend this class or implement the disposable interface (defined\n * in goog.disposable.IDisposable). See description of\n * goog.disposable.IDisposable for examples of cleanup.\n * @constructor\n * @implements {goog.disposable.IDisposable}\n *\/\ngoog.Disposable = function() {\n  'use strict';\n  \/**\n   * If monitoring the goog.Disposable instances is enabled, stores the creation\n   * stack trace of the Disposable instance.\n   * @type {string|undefined}\n   *\/\n  this.creationStack;\n\n  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {\n    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {\n      this.creationStack = new Error().stack;\n    }\n    goog.Disposable.instances_[goog.getUid(this)] = this;\n  }\n  \/\/ Support sealing\n  this.disposed_ = this.disposed_;\n  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;\n};\n\n\n\/**\n * @enum {number} Different monitoring modes for Disposable.\n *\/\ngoog.Disposable.MonitoringMode = {\n  \/**\n   * No monitoring.\n   *\/\n  OFF: 0,\n  \/**\n   * Creating and disposing the goog.Disposable instances is monitored. All\n   * disposable objects need to call the `goog.Disposable` base\n   * constructor. The PERMANENT mode must be switched on before creating any\n   * goog.Disposable instances.\n   *\/\n  PERMANENT: 1,\n  \/**\n   * INTERACTIVE mode can be switched on and off on the fly without producing\n   * errors. It also doesn't warn if the disposable objects don't call the\n   * `goog.Disposable` base constructor.\n   *\/\n  INTERACTIVE: 2\n};\n\n\n\/**\n * @define {number} The monitoring mode of the goog.Disposable\n *     instances. Default is OFF. Switching on the monitoring is only\n *     recommended for debugging because it has a significant impact on\n *     performance and memory usage. If switched off, the monitoring code\n *     compiles down to 0 bytes.\n *\/\ngoog.Disposable.MONITORING_MODE =\n    goog.define('goog.Disposable.MONITORING_MODE', 0);\n\n\n\/**\n * @define {boolean} Whether to attach creation stack to each created disposable\n *     instance; This is only relevant for when MonitoringMode != OFF.\n *\/\ngoog.Disposable.INCLUDE_STACK_ON_CREATION =\n    goog.define('goog.Disposable.INCLUDE_STACK_ON_CREATION', true);\n\n\n\/**\n * Maps the unique ID of every undisposed `goog.Disposable` object to\n * the object itself.\n * @type {!Object<number, !goog.Disposable>}\n * @private\n *\/\ngoog.Disposable.instances_ = {};\n\n\n\/**\n * @return {!Array<!goog.Disposable>} All `goog.Disposable` objects that\n *     haven't been disposed of.\n *\/\ngoog.Disposable.getUndisposedObjects = function() {\n  'use strict';\n  var ret = [];\n  for (var id in goog.Disposable.instances_) {\n    if (goog.Disposable.instances_.hasOwnProperty(id)) {\n      ret.push(goog.Disposable.instances_[Number(id)]);\n    }\n  }\n  return ret;\n};\n\n\n\/**\n * Clears the registry of undisposed objects but doesn't dispose of them.\n *\/\ngoog.Disposable.clearUndisposedObjects = function() {\n  'use strict';\n  goog.Disposable.instances_ = {};\n};\n\n\n\/**\n * Whether the object has been disposed of.\n * @type {boolean}\n * @private\n *\/\ngoog.Disposable.prototype.disposed_ = false;\n\n\n\/**\n * Callbacks to invoke when this object is disposed.\n * @type {Array<!Function>}\n * @private\n *\/\ngoog.Disposable.prototype.onDisposeCallbacks_;\n\n\n\/**\n * @return {boolean} Whether the object has been disposed of.\n * @override\n *\/\ngoog.Disposable.prototype.isDisposed = function() {\n  'use strict';\n  return this.disposed_;\n};\n\n\n\/**\n * @return {boolean} Whether the object has been disposed of.\n * @deprecated Use {@link #isDisposed} instead.\n *\/\ngoog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;\n\n\n\/**\n * Disposes of the object. If the object hasn't already been disposed of, calls\n * {@link #disposeInternal}. Classes that extend `goog.Disposable` should\n * override {@link #disposeInternal} in order to cleanup references, resources\n * and other disposable objects. Reentrant.\n *\n * @return {void} Nothing.\n * @override\n *\/\ngoog.Disposable.prototype.dispose = function() {\n  'use strict';\n  if (!this.disposed_) {\n    \/\/ Set disposed_ to true first, in case during the chain of disposal this\n    \/\/ gets disposed recursively.\n    this.disposed_ = true;\n    this.disposeInternal();\n    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {\n      var uid = goog.getUid(this);\n      if (goog.Disposable.MONITORING_MODE ==\n              goog.Disposable.MonitoringMode.PERMANENT &&\n          !goog.Disposable.instances_.hasOwnProperty(uid)) {\n        throw new Error(\n            this + ' did not call the goog.Disposable base ' +\n            'constructor or was disposed of after a clearUndisposedObjects ' +\n            'call');\n      }\n      if (goog.Disposable.MONITORING_MODE !=\n              goog.Disposable.MonitoringMode.OFF &&\n          this.onDisposeCallbacks_ && this.onDisposeCallbacks_.length > 0) {\n        throw new Error(\n            this + ' did not empty its onDisposeCallbacks queue. This ' +\n            'probably means it overrode dispose() or disposeInternal() ' +\n            'without calling the superclass\\' method.');\n      }\n      delete goog.Disposable.instances_[uid];\n    }\n  }\n};\n\n\n\/**\n * Associates a disposable object with this object so that they will be disposed\n * together.\n * @param {goog.disposable.IDisposable} disposable that will be disposed when\n *     this object is disposed.\n *\/\ngoog.Disposable.prototype.registerDisposable = function(disposable) {\n  'use strict';\n  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));\n};\n\n\n\/**\n * Invokes a callback function when this object is disposed. Callbacks are\n * invoked in the order in which they were added. If a callback is added to\n * an already disposed Disposable, it will be called immediately.\n * @param {function(this:T):?} callback The callback function.\n * @param {T=} opt_scope An optional scope to call the callback in.\n * @template T\n *\/\ngoog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {\n  'use strict';\n  if (this.disposed_) {\n    opt_scope !== undefined ? callback.call(opt_scope) : callback();\n    return;\n  }\n  if (!this.onDisposeCallbacks_) {\n    this.onDisposeCallbacks_ = [];\n  }\n\n  this.onDisposeCallbacks_.push(\n      opt_scope !== undefined ? goog.bind(callback, opt_scope) : callback);\n};\n\n\n\/**\n * Performs appropriate cleanup. See description of goog.disposable.IDisposable\n * for examples. Classes that extend `goog.Disposable` should override this\n * method. Not reentrant. To avoid calling it twice, it must only be called from\n * the subclass' `disposeInternal` method. Everywhere else the public `dispose`\n * method must be used. For example:\n *\n * <pre>\n * mypackage.MyClass = function() {\n * mypackage.MyClass.base(this, 'constructor');\n *     \/\/ Constructor logic specific to MyClass.\n *     ...\n *   };\n *   goog.inherits(mypackage.MyClass, goog.Disposable);\n *\n *   mypackage.MyClass.prototype.disposeInternal = function() {\n *     \/\/ Dispose logic specific to MyClass.\n *     ...\n *     \/\/ Call superclass's disposeInternal at the end of the subclass's, like\n *     \/\/ in C++, to avoid hard-to-catch issues.\n *     mypackage.MyClass.base(this, 'disposeInternal');\n *   };\n * <\/pre>\n *\n * @protected\n *\/\ngoog.Disposable.prototype.disposeInternal = function() {\n  'use strict';\n  if (this.onDisposeCallbacks_) {\n    while (this.onDisposeCallbacks_.length) {\n      this.onDisposeCallbacks_.shift()();\n    }\n  }\n};\n\n\n\/**\n * Returns True if we can verify the object is disposed.\n * Calls `isDisposed` on the argument if it supports it.  If obj\n * is not an object with an isDisposed() method, return false.\n * @param {*} obj The object to investigate.\n * @return {boolean} True if we can verify the object is disposed.\n *\/\ngoog.Disposable.isDisposed = function(obj) {\n  'use strict';\n  if (obj && typeof obj.isDisposed == 'function') {\n    return obj.isDisposed();\n  }\n  return false;\n};\n","","(ns scittle.cljs-ajax\n  (:require [ajax.core]\n            [sci.core :as sci]\n            [scittle.core :as scittle]))\n\n(def ans (sci\/create-ns 'ajax.core nil))\n\n(def ajax-namespace\n  (sci\/copy-ns ajax.core ans))\n\n(scittle\/register-plugin!\n ::ajax\n {:namespaces {'ajax.core ajax-namespace}})\n","(ns ajax.xhrio\n  (:require goog.net.EventType\n            goog.net.ErrorCode\n            [goog.net.XhrIo :as xhr]\n            [goog.net.XhrManager :as xhrm]\n            [goog.Uri :as uri]\n            [goog.json :as goog-json]\n            [goog.events :as events]\n            [ajax.protocols :refer [AjaxImpl AjaxRequest\n                                    AjaxResponse Interceptor]]))\n\n(extend-type goog.net.XhrIo\n  AjaxImpl\n  (-js-ajax-request\n    [this\n     {:keys [uri method body headers timeout with-credentials\n             response-format progress-handler]\n      :or {with-credentials false\n           timeout 0}}\n     handler]\n    (when-let [response-type (:type response-format)]\n      (.setResponseType this (name response-type)))\n    (when (fn? progress-handler)\n      (doto this\n        (.setProgressEventsEnabled true)\n        (events\/listen goog.net.EventType.UPLOAD_PROGRESS progress-handler)))\n    (doto this\n      (events\/listen goog.net.EventType\/COMPLETE\n                     #(handler (.-target %)))\n      (.setTimeoutInterval timeout)\n      (.setWithCredentials with-credentials)\n      (.send uri method body (clj->js headers))))\n  AjaxRequest\n  (-abort [this] (.abort this goog.net.ErrorCode\/ABORT))\n  AjaxResponse\n  (-body [this] (.getResponse this))\n  (-status [this] (.getStatus this))\n  (-status-text [this] (.getStatusText this))\n  (-get-all-headers [this]\n    (js->clj (.getResponseHeaders this)))\n  (-get-response-header [this header]\n    (.getResponseHeader this header))\n  (-was-aborted [this]\n    (= (.getLastErrorCode this) goog.net.ErrorCode\/ABORT)))\n\n(extend-type goog.net.XhrManager\n  AjaxImpl\n  (-js-ajax-request\n    [this {:keys [uri method body headers\n                  id timeout priority max-retries]\n           :or {timeout 0}}\n     handler]\n    (doto this\n      (.setTimeoutInterval timeout)\n      (.send id uri method body (clj->js headers)\n             priority handler max-retries))))\n","(ns ajax.json\n  (:require [cognitect.transit :as t]\n            [clojure.walk :as w]\n            [ajax.interceptors :refer \n                [map->ResponseFormat]]\n            [ajax.protocols :refer\n                [-body -process-request -process-response -abort -status\n                -get-response-header -status-text -js-ajax-request\n                -was-aborted]]\n            #?@ (:clj  [[cheshire.core :as c]\n                        [clojure.java.io :as io]]))\n  #? (:clj (:import [java.io OutputStreamWriter ByteArrayOutputStream\n                InputStreamReader Closeable OutputStream\n                InputStream])))\n\n;;; NB If you're looking to use the google closure JSON implementation,\n;;; You'll need ajax.goog-json instead\n\n#? (:clj (defn write-json-cheshire [stream data]\n           (c\/generate-stream data (io\/writer stream))))\n\n#? (:cljs (defn write-json-native [data]\n            (.stringify js\/JSON (clj->js data))))\n\n#? (:clj (defn read-json-cheshire [raw keywords? text]\n           ; NB Raw is ignored since it makes no sense in this context\n           (c\/parse-stream (io\/reader text) keywords?)))\n\n#? (:cljs (defn read-json-native [raw keywords? text]\n               (let [result-raw (.parse js\/JSON text)]\n                    (if raw\n                        result-raw\n                        (js->clj result-raw :keywordize-keys keywords?)))))\n\n; From Kjetil Thuen's \"safe\" converter\n#? (:cljs (defn read-json-transit [raw keywords? text]\n            (if raw\n              (.parse js\/JSON text)\n              (let [edn (t\/read (t\/reader :json) text) ]\n                  (if keywords?\n                    (w\/keywordize-keys edn)\n                    edn)))))\n\n(defn make-json-request-format [write-json]\n  (fn json-request-format []\n      {:write write-json\n       :content-type \"application\/json\"}))\n\n#? (:clj (defn strip-prefix\n           ^InputStream [^String prefix ^InputStream text]\n           (if prefix\n             (let [utf8 (.getBytes prefix \"UTF-8\")]\n               (loop [i 0]\n                 (if (and (< i (alength utf8))\n                          (= (aget utf8 i) (.read text)))\n                   (recur (inc i))\n                   text)))\n             text))\n     :cljs (defn strip-prefix [^String prefix text]\n             (if (and prefix (= 0 (.indexOf text prefix)))\n               (.substring text (.-length prefix))\n               text)))\n\n(defn make-json-response-format \n  \"Create a json request format given `read-json` function.\"\n  [read-json]\n  (fn json-response-format\n    ([] (json-response-format {}))\n    ([{:keys [prefix keywords? raw]}]\n       (map->ResponseFormat\n        {:read (fn json-read-response-format [xhrio] \n            (read-json raw\n                       keywords?\n                       (strip-prefix prefix (-body xhrio))))\n         :description (str \"JSON\"\n                         (if prefix (str \" prefix '\" prefix \"'\"))\n                         (if keywords? \" keywordize\"))\n         :content-type [\"application\/json\"]}))))\n\n(def json-response-format\n  \"Returns a JSON response format using the native JSON \n   implementation. Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http:\/\/stackoverflow.com\/questions\/2669690\/why-does-google-prepend-while1-to-their-json-responses\n   http:\/\/haacked.com\/archive\/2009\/06\/24\/json-hijacking.aspx\"\n    (make-json-response-format \n        #? (:clj read-json-cheshire :cljs read-json-native)))\n\n(def json-request-format \n    (make-json-request-format \n     #? (:clj write-json-cheshire :cljs write-json-native)))\n\n(def safe-json-request-format \n    (make-json-response-format \n        #? (:clj read-json-cheshire :cljs read-json-transit)))\n","(ns ajax.core\n  \"This is the documented API for cljs-ajax. The only functions not\n   exposed here that are documented are the deprecated features.\"\n  (:require [clojure.string :as str]\n            [ajax.url :as url]\n            [ajax.json :as json]\n            [ajax.transit :as transit]\n            [ajax.ring :as ring]\n            [ajax.formats :as f]\n            [ajax.util :as u]\n            [ajax.interceptors :as i]\n            [ajax.simple :as simple]\n            [ajax.easy :as easy]\n            [ajax.protocols :as pr]\n            #?@ (:clj  [[ajax.macros :as m]\n                        [ajax.apache]]\n                 :cljs [[ajax.xhrio]\n                        [ajax.xml-http-request]]))\n  #? (:cljs\n      (:require-macros [ajax.macros :as m])))\n\n;;; NB As a matter of policy, this file shouldn't reference any\n;;; google closure files. That functionality should be off in\n;;; specific namespaces and exposed here in a platform indepdent\n;;; way\n\n;;; Ideally this would be true of all functionality, but it's\n;;; an ongoing project.\n\n(def to-interceptor i\/to-interceptor)\n\n(defn abort \n  \"Call this on the result of `ajax-request` to cancel the request.\"\n  [this]\n  (pr\/-abort this))\n\n;;; Standard Formats\n\n(def json-request-format json\/json-request-format)\n(def json-response-format json\/json-response-format)\n\n(def transit-request-format transit\/transit-request-format)\n(def transit-response-format transit\/transit-response-format)\n\n(def ring-response-format ring\/ring-response-format)\n\n(def url-request-format url\/url-request-format)\n\n(def text-request-format f\/text-request-format)\n(def text-response-format f\/text-response-format)\n; There's no raw-request-format because it's handled by the DirectSubmission code\n(def raw-response-format f\/raw-response-format)\n\n(def success? u\/success?)\n\n;;; Here's the entire \"simple\" API.\n\n(def default-interceptors simple\/default-interceptors)\n\n(def ajax-request simple\/ajax-request)\n\n;;; \"Easy\" API beyond this point\n\n(def default-formats easy\/default-formats)\n\n;;; NB detect-response-format with no parameters will pull\n;;; in every non-deprecated format in the code and so is\n;;; considered part of the \"easy\" API. However,\n;;; using your own vector specification works with the\n;;; simple API and allows you to control what formats you\n;;; want to support.\n(def detect-response-format easy\/detect-response-format)\n\n(m\/easy-api GET)\n(m\/easy-api HEAD)\n(m\/easy-api POST)\n(m\/easy-api PUT)\n(m\/easy-api DELETE)\n(m\/easy-api OPTIONS)\n(m\/easy-api TRACE)\n(m\/easy-api PATCH)\n(m\/easy-api PURGE)\n"],"names":["map","obj","f","res","key","call","opt_obj","goog.string.splitLimit","str","separator","limit","parts","split","returnVal","length","push","shift","join","goog.Timer.callOnce","listener","opt_delay","opt_handler","goog.bind","handleEvent","Error","Number","goog.Timer.MAX_TIMEOUT_","goog.Timer.INVALID_TIMEOUT_ID_","goog.global","setTimeout","goog.net.DefaultXmlHttpFactory.prototype.getProgId_","ieProgId_","XMLHttpRequest","ActiveXObject","ACTIVE_X_IDENTS","i","candidate","e","goog.net.XmlHttpFactory.prototype.getOptions","cachedOptions_","options","getProgId_","progId","USE_NULL_FUNCTION","LOCAL_REQUEST_ERROR","goog.net.DefaultXmlHttpFactory.prototype.createInstance","goog.net.XhrIo.prototype.cleanUpTimeoutTimer_","xhr_","useXhr2Timeout_","timeoutId_","clearTimeout","goog.net.XhrIo.shouldUseXhr2Timeout_","xhr","goog.userAgent.IE","undefined","goog.net.XhrIo.prototype.dispatchErrors_","errorDispatched_","dispatchEvent","COMPLETE","ERROR","goog.net.XhrIo.prototype.cleanUpXhr_","opt_fromDispose","cleanUpTimeoutTimer_","clearedOnReadyStateChange","xhrOptions_","READY","onreadystatechange","goog.net.XhrIo.prototype.getReadyState","readyState","UNINITIALIZED","goog.net.XhrIo.prototype.onReadyStateChangeHelper_","active_","goog","getReadyState","getStatus","formatMsg_","inSend_","onReadyStateChange_","READY_STATE_CHANGE","isComplete","status","isSuccess","OK","CREATED","ACCEPTED","NO_CONTENT","PARTIAL_CONTENT","NOT_MODIFIED","QUIRK_IE_NO_CONTENT","scheme","String","uri","lastUri_","match","result","goog.uri.utils.splitRe_","SCHEME","goog.globalself","self","goog.globalselflocation","location","goog.globalselflocationprotocol","protocol","slice","goog.net.XhrIo.HTTP_SCHEME_PATTERNtest","test","toLowerCase","SUCCESS","lastErrorCode_","HTTP_ERROR","lastError_","getStatusText","dispatchErrors_","cleanUpXhr_","goog.net.XhrIo.buildProgressEvent_","eventType","type","lengthComputable","loaded","total","goog.net.XhrIo","opt_xmlHttpFactory","goog.events.EventTargetcall","goog.net.XhrIo.base","headers","Map","xmlHttpFactory_","NO_ERROR","inAbort_","inOpen_","timeoutInterval_","responseType_","goog.net.XhrIo.ResponseType.DEFAULT","progressEventsEnabled_","withCredentials_","trustToken_","ajax.protocols\/-js-ajax-request","this","request","handler","ajax.protocols._js_ajax_request","this$","m__5374__auto__","goog\/typeOf","ajax$protocols$AjaxImpl$_js_ajax_request$dyn","x__5373__auto__","m__5372__auto__","cljs.core\/missing-protocol","ajax.protocols\/-abort","ajax.protocols._abort","ajax$protocols$AjaxRequest$_abort$dyn","ajax.protocols\/-status","ajax.protocols._status","ajax$protocols$AjaxResponse$_status$dyn","ajax.protocols\/-status-text","ajax.protocols._status_text","ajax$protocols$AjaxResponse$_status_text$dyn","ajax.protocols\/-get-all-headers","ajax.protocols._get_all_headers","ajax$protocols$AjaxResponse$_get_all_headers$dyn","ajax.protocols\/-body","ajax.protocols._body","ajax$protocols$AjaxResponse$_body$dyn","ajax.protocols\/-get-response-header","header","ajax.protocols._get_response_header","response","ajax$protocols$AjaxResponse$_get_response_header$dyn","ajax.protocols\/-was-aborted","ajax.protocols._was_aborted","ajax$protocols$AjaxResponse$_was_aborted$dyn","ajax.protocols\/-process-request","ajax.protocols._process_request","ajax$protocols$Interceptor$_process_request$dyn","ajax.protocols\/-process-response","ajax.protocols._process_response","ajax$protocols$Interceptor$_process_response$dyn","ajax.util\/throw-error","args","ajax.util.throw_error","js\/Error","cljs.core.strcljs$core$IFn$_invoke$arity$1","cljs$core$IFn$_invoke$arity$1","ajax.util\/get-content-type","or__5025__auto__","ajax.util.get_content_type","cljs.core.truth_","ajax.util\/success?","ajax.util.success_QMARK_","cljs.core\/contains?","ajax.util\/successful-response-codes-set","ajax.url\/key-encode","ajax.url.key_encode","cljs.core\/qualified-keyword?","clojure.string.joincljs$core$IFn$_invoke$arity$2","cljs$core$IFn$_invoke$arity$2","cljs.core.juxt","cljs.core\/namespace","cljs.core\/name","ajax.url.key_value_pair_to_str","p__46158","ajax.url\/key-value-pair-to-str","cljs.core.nth","k","ajax.url\/value-encode","v","ajax.url\/vec-key-transform-fn","vec-key-encode","ajax.url.vec_key_transform_fn","cljs.core.PersistentVector","cljs.core.PersistentVector.EMPTY_NODE","ajax.url\/to-vec-key-transform","vec-strategy","ajax.url.to_vec_key_transform","G__46162","cljs.core\/Keyword","cljs.core\/identity","cljs.core.partial","ajax.url\/params-to-str","params","ajax.url.params_to_str","cljs.core.mapcljs$core$IFn$_invoke$arity$2","ajax.url.param_to_key_value_pairs","clojure.string.join","ajax.interceptors.StandardInterceptor","name","__meta","__extmap","__hash","cljs$lang$protocol_mask$partition0$","cljs$lang$protocol_mask$partition1$","ajax.interceptors\/content-type-to-request-header","content-type","ajax.interceptors.content_type_to_request_header","ajax.interceptors.ResponseFormat","read","description","content_type","ajax.interceptors.map__GT_ResponseFormat","G__46221","ajax.interceptors\/map->ResponseFormat","G__46240","cljs.core.dissoc","cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2","cljs.core\/record?","cljs.core.into","cljs.core.PersistentArrayMap.EMPTY","ajax.interceptors\/ResponseFormat","cljs.core\/not-empty","extmap__5365__auto__","ajax.interceptors.ApplyRequestFormat","ajax.interceptors.uri_with_params","p__46258","map__46259","cljs.core\/--destructure-map","cljs.core.get","method","temp__5823__auto__","cljs.core._EQ_cljs$core$IFn$_invoke$arity$2","url_params","url-params","cljs.core\/re-find","final-url-params","ajax.interceptors.ProcessUrlParameters","ajax.interceptors.DirectSubmission","ajax.interceptors.get_response_format","p__46293","interpret-vector","interpret_vector","ajax.formats\/detect-response-format","map__46294","opts","response-format","cljs.core\/vector?","cljs.core\/map?","response_format","cljs.core\/ifn?","cljs.core.PersistentArrayMap","ajax.transit.transit_type","p__46296","ajax.transit\/transit-type","map__46298","ajax.transit\/transit-write-fn","ajax.transit.transit_write_fn","writer","cognitect.transit.writer","ajax$transit$transit_write_fn_$_transit_write_params","w","ajax.transit\/transit-read-fn","ajax.transit.transit_read_fn","reader","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","ajax$transit$transit_read_fn_$_transit_read_response","r","ajax.formats\/text-request-format","ajax.formats.text_request_format","cljs.core.identity","ajax.formats\/get-accept-entries","format-entry","fe","ajax.formats.get_accept_entries","cljs.core\/first","ajax.formats\/get-format","ajax.formats\/detect-content-type","accept","ajax.formats.detect_content_type","cljs.core.some","p1__46310#","cljs.core\/some","ajax.formats.get_default_format","p__46311","map__46312","ajax.formats.get_format","cljs.core.first","cljs.core.filtercljs$core$IFn$_invoke$arity$2","accepted_format_QMARK_","ajax.formats\/detect-response-format-read","ajax.formats.detect_response_format_read","ajax$formats$detect_response_format_read_$_detect_response_format","format","ajax.formats\/get-default-format","fexpr__46319","ajax.formats.accept_header","p__46321","ajax.formats\/accept-header","map__46322","cljs.core.mapcatcljs$core$IFn$_invoke$arity$variadic","cljs$core$IFn$_invoke$arity$variadic","p1__46320#","cljs.core.mapcat","cljs.core.vector_QMARK_","formats","ajax.formats.detect_response_format","ajax.ring\/make-ring-read","body-read","ajax.ring.make_ring_read","ajax$ring$make_ring_read_$_ring_read","ajax.simple\/normalize-method","ajax.simple.normalize_method","clojure.string\/upper-case","ajax.simple\/process-response","interceptor","ajax.simple.process_response","ajax.simple\/make-js-handler","interceptors","ajax.simple.make_js_handler","ajax$simple$make_js_handler_$_js_handler","processed","cljs.core.reduce","ajax.simple\/normalize-request","ajax.simple.normalize_request","ajax.interceptors\/get-response-format","cljs.core.updatecljs$core$IFn$_invoke$arity$3","cljs$core$IFn$_invoke$arity$3","p1__46334#","cljs.core.update","cljs.core.concat","cljs.core\/-deref","ajax.simple\/default-interceptors","ajax.interceptors\/request-interceptors","ajax.simple\/process-request","ajax.simple.process_request","ajax.simple\/ajax-request","ajax.simple.ajax_request","ajax.simple\/raw-ajax-request","map__46341","p__46340","cljs.core\/reverse","p__46332","map__46333","js\/goog.net.XhrIo","api","ajax.easy\/keyword-request-format","format-params","ajax.easy.keyword_request_format","cljs.core\/fn?","ajax.transit.transit_request_format","G__46347__$1","G__46347","ajax.json\/json-request-format","ajax.url.url_request_format","ajax.easy\/keyword-response-format","ajax.easy.keyword_response_format","cljs.core\/vector","cljs.core.map","ajax.easy.keyword_response_format_element","p1__46354#","ajax.easy\/keyword-response-format-element","ajax.easy.transform_handler","p__46358","ajax.easy\/transform-handler","map__46360","error-handler","h","ajax.easy\/default-handler","ajax.easy\/default-error-handler","ajax$easy$transform_handler_$_easy_handler","p__46363","ok","fexpr__46367","finally","ajax.easy\/easy-ajax-request","ajax.easy.easy_ajax_request","cljs.core.assoccljs$core$IFn$_invoke$arity$variadic","map__46369","p__46368","needs-format","body","cljs.core.not_EQ_cljs$core$IFn$_invoke$arity$2","rf","ajax.xml-http-request\/append","current","next","ajax.xml_http_request.append","ajax.xml-http-request\/process-headers","header-str","ajax.xml_http_request.process_headers","header-line","goog.string\/isEmptyOrWhitespace","key-value","header_line","key_value","header_str","DEFAULT","goog.net.XhrIo.HTTP_SCHEME_PATTERN","goog.net.XhrIo.METHODS_WITH_FORM_DATA","goog.inherits","goog.events.EventTarget","goog.net.XhrIo.prototype","setTimeoutInterval","goog.net.XhrIo.prototype.setTimeoutInterval","ms","Math","max","setResponseType","goog.net.XhrIo.prototype.setResponseType","setWithCredentials","goog.net.XhrIo.prototype.setWithCredentials","withCredentials","setProgressEventsEnabled","goog.net.XhrIo.prototype.setProgressEventsEnabled","enabled","setTrustToken","goog.net.XhrIo.prototype.setTrustToken","trustToken","send","goog.net.XhrIo.prototype.send","url","opt_method","opt_content","opt_headers","toUpperCase","createXhr","createInstance","goog.net.XmlHttp.factory_createInstance","getOptions","goog.net.XmlHttp.factory_getOptions","getProgressEventsEnabled","onprogress","onProgressHandler_","upload","open","err","error_","content","Object","getPrototypeOf","prototype","set","keys","get","contentTypeKey","Array","from","find","contentIsFormData","indexOf","goog.net.XhrIo.CONTENT_TYPE_HEADER","goog.net.XhrIo.FORM_CONTENT_TYPE","value","setRequestHeader","responseType","timeout_","goog.net.XhrIo.prototype.timeout_","TIMEOUT","abort","goog.net.XhrIo.prototype.error_","EXCEPTION","goog.net.XhrIo.prototype.abort","opt_failureCode","ABORT","disposeInternal","goog.net.XhrIo.prototype.disposeInternal","goog.net.XhrIosuperClass_disposeInternalcall","base","goog.net.XhrIo.prototype.disposeInternal.base","goog.net.XhrIo.prototype.onReadyStateChange_","isDisposed","disposed_","onReadyStateChangeHelper_","onReadyStateChangeEntryPoint_","goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_","goog.net.XhrIo.prototype.onProgressHandler_","opt_isDownload","PROGRESS","DOWNLOAD_PROGRESS","UPLOAD_PROGRESS","isActive","goog.net.XhrIo.prototype.isActive","goog.net.XhrIo.prototype.getStatus","LOADED","goog.net.XhrIo.prototype.getStatusText","statusText","getResponse","goog.net.XhrIo.prototype.getResponse","TEXT","responseText","ARRAY_BUFFER","mozResponseArrayBuffer","getResponseHeader","goog.net.XhrIo.prototype.getResponseHeader","getAllResponseHeaders","goog.net.XhrIo.prototype.getAllResponseHeaders","getResponseHeaders","goog.net.XhrIo.prototype.getResponseHeaders","headersObject","headersArray","goog.string.internal.isEmptyOrWhitespace","keyValue","trim","values","getLastErrorCode","goog.net.XhrIo.prototype.getLastErrorCode","cljs.core.Symbol","cljs.core.Keyword","status-text","fail","xhrio","keywords?","progress-handler","ajax.util.successful_response_codes_set","cljs.core.PersistentHashSet","js\/encodeURIComponent","ajax.url\/param-to-key-value-pairs","vec-key-transform","prefix","p__46163","k1","new-key","recurse","cljs.core\/seq","cljs.core\/sequential?","cljs.core\/set?","ajax$url$url_request_format","var_args","ajax.url\/url-request-format","arguments","G__46168","ajax.url.url_request_formatcljs$core$IFn$_invoke$arity$0","cljs$core$IFn$_invoke$arity$0","ajax.url.url_request_formatcljs$core$IFn$_invoke$arity$1","ajax.url.url_request_format.cljs$core$IFn$_invoke$arity$1","p__46169","map__46170","ajax.url.url_request_formatcljs$lang$maxFixedArity","cljs$lang$maxFixedArity","ajax.interceptors.StandardInterceptor.prototype","cljs$core$ILookup$_lookup$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ILookup$_lookup$arity$2","this__5323__auto__","k__5324__auto__","ajax.interceptors\/StandardInterceptor","this__5323__auto____$1","cljs$core$ILookup$_lookup$arity$3","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ILookup$_lookup$arity$3","this__5325__auto__","k46190","else__5326__auto__","G__46194__$1","G__46194","cljs$core$IKVReduce$_kv_reduce$arity$3","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3","this__5343__auto__","f__5344__auto__","init__5345__auto__","ret__5346__auto__","p__46195","k__5347__auto__","v__5348__auto__","this__5343__auto____$1","ajax$protocols$Interceptor$_process_request$arity$2","map__46200","p__46199","map__46201","ajax$protocols$Interceptor$_process_response$arity$2","map__46203","p__46202","map__46204","cljs$core$IPrintWithWriter$_pr_writer$arity$3","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3","this__5338__auto__","writer__5339__auto__","opts__5340__auto__","cljs.core\/pr-sequential-writer","pr_pair__5341__auto__","keyval__5342__auto__","cljs.core.pr_writer","cljs.core\/PersistentVector","cljs$core$IIterable$_iterator$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IIterable$_iterator$arity$1","cljs.core\/RecordIter","G__46189__$1","cljs.core\/-iterator","cljs.core\/nil-iter","cljs$core$IMeta$_meta$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IMeta$_meta$arity$1","cljs$core$ICloneable$_clone$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ICloneable$_clone$arity$1","cljs$core$ICounted$_count$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ICounted$_count$arity$1","cljs.core\/count","cljs$core$IHash$_hash$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IHash$_hash$arity$1","h__5134__auto__","cljs.core\/hash-unordered-coll","this__5319__auto____$1","cljs$core$IEquiv$_equiv$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IEquiv$_equiv$arity$2","this46191","other46192","this46191__$1","cljs.core._EQ_","cljs$core$IMap$_dissoc$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IMap$_dissoc$arity$2","this__5333__auto__","k__5334__auto__","cljs.core\/-with-meta","this__5333__auto____$1","cljs$core$IAssociative$_contains_key_QMARK_$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2","this__5330__auto__","G__46205__$1","G__46205","cljs$core$IAssociative$_assoc$arity$3","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IAssociative$_assoc$arity$3","this__5331__auto__","k__5332__auto__","G__46189","pred__46206","cljs.core.assoc","cljs$core$ISeqable$_seq$arity$1","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ISeqable$_seq$arity$1","cljs.core\/MapEntry","cljs$core$IWithMeta$_with_meta$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$IWithMeta$_with_meta$arity$2","this__5322__auto__","cljs$core$ICollection$_conj$arity$2","ajax.interceptors.StandardInterceptor.prototype.cljs$core$ICollection$_conj$arity$2","this__5328__auto__","entry__5329__auto__","this__5328__auto____$1","cljs.core\/-nth","cljs.core\/-conj","ajax.interceptors.fail","ajax$interceptors$fail","ajax.interceptors\/fail","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core\/IndexedSeq","failure","cljs.core\/conj","cljs.core\/vec","cljs.core.partition","ajax.interceptors.failcljs$lang$maxFixedArity","ajax.interceptors.failcljs$lang$applyTo","cljs$lang$applyTo","ajax.interceptors.fail.cljs$lang$applyTo","seq46212","G__46213","cljs.core\/next","G__46214","G__46215","self__5734__auto__","ajax.interceptors.ResponseFormat.prototype","ajax.interceptors.ResponseFormat.prototype.cljs$core$ILookup$_lookup$arity$2","ajax.interceptors.ResponseFormat.prototype.cljs$core$ILookup$_lookup$arity$3","k46218","G__46222__$1","G__46222","ajax.interceptors.ResponseFormat.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3","p__46223","map__46228","p__46227","map__46229","cljs.core.mergecljs$core$IFn$_invoke$arity$variadic","p1__46216#","map__46231","p__46230","map__46232","G__46234","e46235","js\/Object","ajax.interceptors\/exception-response","map__46211","parse-error","status_text","e46233","ajax.interceptors.failcljs$core$IFn$_invoke$arity$variadic","message","ajax.interceptors.ResponseFormat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3","ajax.interceptors.ResponseFormat.prototype.cljs$core$IIterable$_iterator$arity$1","G__46217__$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$IMeta$_meta$arity$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$ICloneable$_clone$arity$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$ICounted$_count$arity$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$IHash$_hash$arity$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$IEquiv$_equiv$arity$2","this46219","other46220","this46219__$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$IMap$_dissoc$arity$2","ajax.interceptors.ResponseFormat.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2","G__46236__$1","G__46236","ajax.interceptors.ResponseFormat.prototype.cljs$core$IAssociative$_assoc$arity$3","G__46217","pred__46237","ajax.interceptors.ResponseFormat.prototype.cljs$core$ISeqable$_seq$arity$1","ajax.interceptors.ResponseFormat.prototype.cljs$core$IWithMeta$_with_meta$arity$2","ajax.interceptors.ResponseFormat.prototype.cljs$core$ICollection$_conj$arity$2","ajax.interceptors.ApplyRequestFormat.prototype","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ILookup$_lookup$arity$2","ajax.interceptors\/ApplyRequestFormat","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ILookup$_lookup$arity$3","k46242","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3","p__46247","_","map__46252","p__46251","map__46253","write","ajax.interceptors\/apply-request-format","cljs.core.assoccljs$core$IFn$_invoke$arity$3","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3","cljs.core.PersistentVector.EMPTY","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IIterable$_iterator$arity$1","G__46241__$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IMeta$_meta$arity$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ICloneable$_clone$arity$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ICounted$_count$arity$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IHash$_hash$arity$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IEquiv$_equiv$arity$2","this46243","other46244","this46243__$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IMap$_dissoc$arity$2","cljs.core.PersistentHashSet.EMPTY","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IAssociative$_assoc$arity$3","G__46241","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ISeqable$_seq$arity$1","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$IWithMeta$_with_meta$arity$2","ajax.interceptors.ApplyRequestFormat.prototype.cljs$core$ICollection$_conj$arity$2","ajax.interceptors.ProcessUrlParameters.prototype","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ILookup$_lookup$arity$2","ajax.interceptors\/ProcessUrlParameters","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ILookup$_lookup$arity$3","k46261","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3","p__46266","map__46271","p__46270","G__46272","ajax.interceptors\/uri-with-params","cljs.core.reduced","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IIterable$_iterator$arity$1","G__46260__$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IMeta$_meta$arity$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ICloneable$_clone$arity$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ICounted$_count$arity$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IHash$_hash$arity$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IEquiv$_equiv$arity$2","this46262","other46263","this46262__$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IMap$_dissoc$arity$2","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IAssociative$_assoc$arity$3","G__46260","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ISeqable$_seq$arity$1","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$IWithMeta$_with_meta$arity$2","ajax.interceptors.ProcessUrlParameters.prototype.cljs$core$ICollection$_conj$arity$2","ajax.interceptors.DirectSubmission.prototype","ajax.interceptors.DirectSubmission.prototype.cljs$core$ILookup$_lookup$arity$2","ajax.interceptors\/DirectSubmission","ajax.interceptors.DirectSubmission.prototype.cljs$core$ILookup$_lookup$arity$3","k46278","ajax.interceptors.DirectSubmission.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3","p__46283","map__46288","p__46287","cljs.core\/reduced","ajax.interceptors.DirectSubmission.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3","ajax.interceptors.DirectSubmission.prototype.cljs$core$IIterable$_iterator$arity$1","G__46277__$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$IMeta$_meta$arity$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$ICloneable$_clone$arity$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$ICounted$_count$arity$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$IHash$_hash$arity$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$IEquiv$_equiv$arity$2","this46279","other46280","this46279__$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$IMap$_dissoc$arity$2","ajax.interceptors.DirectSubmission.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2","ajax.interceptors.DirectSubmission.prototype.cljs$core$IAssociative$_assoc$arity$3","G__46277","ajax.interceptors.DirectSubmission.prototype.cljs$core$ISeqable$_seq$arity$1","ajax.interceptors.DirectSubmission.prototype.cljs$core$IWithMeta$_with_meta$arity$2","ajax.interceptors.DirectSubmission.prototype.cljs$core$ICollection$_conj$arity$2","ajax.interceptors.request_interceptors","ajax.json\/json-response-format","ajax.json\/make-json-response-format","read-json","ajax$json$make_json_response_format_$_json_response_format","p__46305","map__46306","ajax$json$make_json_response_format_$_json_response_format_$_json_read_response_format","text","read_json","raw","G__46309","keywords_QMARK_","ajax$json$make_json_response_format_$_json_response_format__0","ajax.json\/read-json-native","result-raw","js\/JSON","cljs.core.js__GT_clj","ajax.json.json_request_format","ajax.json\/make-json-request-format","write-json","ajax$json$make_json_request_format_$_json_request_format","write_json","ajax.json\/write-json-native","data","cljs.core\/clj->js","ajax$transit$transit_request_format","ajax.transit\/transit-request-format","G__46301","ajax.transit.transit_request_formatcljs$core$IFn$_invoke$arity$0","ajax.transit.transit_request_formatcljs$core$IFn$_invoke$arity$1","mime-type","ajax.transit.transit_request_formatcljs$lang$maxFixedArity","ajax.transit.transit_response_format","ajax$transit$transit_response_format","ajax.transit\/transit-response-format","G__46317","ajax.transit.transit_response_formatcljs$core$IFn$_invoke$arity$0","ajax.transit.transit_response_formatcljs$core$IFn$_invoke$arity$1","ajax.transit.transit_response_formatcljs$core$IFn$_invoke$arity$2","ajax.transit.transit_response_formatcljs$lang$maxFixedArity","ajax.formats.raw_response_format","ajax$formats$raw_response_format","ajax.formats\/raw-response-format","G__46299","ajax.formats.raw_response_formatcljs$core$IFn$_invoke$arity$0","ajax.formats.raw_response_formatcljs$core$IFn$_invoke$arity$1","ajax.formats.raw_response_formatcljs$lang$maxFixedArity","format_entry","G__46303","cljs.core\/second","ajax.formats.get_formatcljs$core$IFn$_invoke$arity$2","ajax.ring.ring_response_format","ajax$ring$ring_response_format","ajax.ring\/ring-response-format","G__46335","ajax.ring.ring_response_formatcljs$core$IFn$_invoke$arity$0","ajax.ring.ring_response_formatcljs$core$IFn$_invoke$arity$1","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1","p__46336","map__46337","map__46338","ajax.ring.ring_response_formatcljs$lang$maxFixedArity","ajax.simple.default_interceptors","cljs.core.atomcljs$core$IFn$_invoke$arity$1","cljs.core.atom","ajax.easy.default_formats","ajax.json.json_response_format","ajax.formats\/text-response-format","ajax.easy.detect_response_format","ajax$easy$detect_response_format","ajax.easy\/detect-response-format","G__46343","ajax.easy.detect_response_formatcljs$core$IFn$_invoke$arity$0","ajax.easy\/default-formats","ajax.easy.detect_response_formatcljs$core$IFn$_invoke$arity$1","ajax.easy.detect_response_formatcljs$lang$maxFixedArity","G__46350","ajax.easy.keyword_response_format_elementcljs$core$IFn$_invoke$arity$2","G__46351","G__46353__$1","G__46353","ajax.easy\/print-response","cljs.core.printlncljs$core$IFn$_invoke$arity$variadic","ajax.easy\/print-error-response","js\/console","js\/window","ajax$protocols$AjaxImpl$_js_ajax_request$arity$3","goog.net.XhrIo.prototype.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3","p__46345","map__46346","timeout","with-credentials","temp__5825__auto__","this$__$1","G__46348","goog.events\/listen","goog.events.listen","goog.net.EventType\/COMPLETE","G__46352","p1__46344_SHARP_","p1__46344#","G__46349","ajax$protocols$AjaxRequest$_abort$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxRequest$_abort$arity$1","ajax$protocols$AjaxResponse$_body$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_body$arity$1","ajax$protocols$AjaxResponse$_status$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_status$arity$1","ajax$protocols$AjaxResponse$_status_text$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_status_text$arity$1","ajax$protocols$AjaxResponse$_get_all_headers$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_get_all_headers$arity$1","ajax$protocols$AjaxResponse$_get_response_header$arity$2","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_get_response_header$arity$2","ajax$protocols$AjaxResponse$_was_aborted$arity$1","goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_was_aborted$arity$1","js\/goog","js\/goog.global","js\/goog.global.XMLHttpRequest","goog\/global.XMLHttpRequest","req","js\/require","ajax.xml_http_request.xmlhttprequest","ajax.xml-http-request\/xmlhttprequest","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3","p__46377","map__46378","this$__$1.onreadystatechange","p1__46376#","G__46375","fexpr__46374","seq__46379","chunk__46380","i__46382","count__46381","vec__46389","chunk__46380_46398","cljs.core\/chunked-seq?","c__5548__auto__","cljs.core\/-chunked-first","G__46411","cljs.core\/-chunked-rest","vec__46392","seq__46379_46397","G__46418","G__46419","count__46381_46399","G__46420","i__46382_46400","G__46414","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxRequest$_abort$arity$1","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_body$arity$1","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_status$arity$1","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_status_text$arity$1","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_get_all_headers$arity$1","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_get_response_header$arity$2","ajax.xml_http_request.xmlhttprequest.prototype.ajax$protocols$AjaxResponse$_was_aborted$arity$1","ajax.core.GET","ajax$core$GET","ajax.core\/GET","ajax.core.GETcljs$core$IFn$_invoke$arity$variadic","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","f__46183__auto__","cljs.core.apply","cljs.core\/hash-map","ajax.core.GETcljs$lang$maxFixedArity","ajax.core.GETcljs$lang$applyTo","ajax.core.GET.cljs$lang$applyTo","seq46422","G__46423","ajax.core.HEAD","ajax$core$HEAD","ajax.core\/HEAD","ajax.core.HEADcljs$core$IFn$_invoke$arity$variadic","ajax.core.HEAD.cljs$core$IFn$_invoke$arity$variadic","ajax.core.HEADcljs$lang$maxFixedArity","ajax.core.HEADcljs$lang$applyTo","ajax.core.HEAD.cljs$lang$applyTo","seq46429","G__46430","ajax.core.POST","ajax$core$POST","ajax.core\/POST","ajax.core.POSTcljs$core$IFn$_invoke$arity$variadic","ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic","ajax.core.POSTcljs$lang$maxFixedArity","ajax.core.POSTcljs$lang$applyTo","ajax.core.POST.cljs$lang$applyTo","seq46438","G__46439","ajax.core.PUT","ajax$core$PUT","ajax.core\/PUT","ajax.core.PUTcljs$core$IFn$_invoke$arity$variadic","ajax.core.PUT.cljs$core$IFn$_invoke$arity$variadic","ajax.core.PUTcljs$lang$maxFixedArity","ajax.core.PUTcljs$lang$applyTo","ajax.core.PUT.cljs$lang$applyTo","seq46445","G__46446","ajax.core.DELETE","ajax$core$DELETE","ajax.core\/DELETE","ajax.core.DELETEcljs$core$IFn$_invoke$arity$variadic","ajax.core.DELETE.cljs$core$IFn$_invoke$arity$variadic","ajax.core.DELETEcljs$lang$maxFixedArity","ajax.core.DELETEcljs$lang$applyTo","ajax.core.DELETE.cljs$lang$applyTo","seq46451","G__46452","ajax.core.OPTIONS","ajax$core$OPTIONS","ajax.core\/OPTIONS","ajax.core.OPTIONScljs$core$IFn$_invoke$arity$variadic","ajax.core.OPTIONS.cljs$core$IFn$_invoke$arity$variadic","ajax.core.OPTIONScljs$lang$maxFixedArity","ajax.core.OPTIONScljs$lang$applyTo","ajax.core.OPTIONS.cljs$lang$applyTo","seq46453","G__46454","ajax.core.TRACE","ajax$core$TRACE","ajax.core\/TRACE","ajax.core.TRACEcljs$core$IFn$_invoke$arity$variadic","ajax.core.TRACE.cljs$core$IFn$_invoke$arity$variadic","ajax.core.TRACEcljs$lang$maxFixedArity","ajax.core.TRACEcljs$lang$applyTo","ajax.core.TRACE.cljs$lang$applyTo","seq46455","G__46456","ajax.core.PATCH","ajax$core$PATCH","ajax.core\/PATCH","ajax.core.PATCHcljs$core$IFn$_invoke$arity$variadic","ajax.core.PATCH.cljs$core$IFn$_invoke$arity$variadic","ajax.core.PATCHcljs$lang$maxFixedArity","ajax.core.PATCHcljs$lang$applyTo","ajax.core.PATCH.cljs$lang$applyTo","seq46458","G__46459","ajax.core.PURGE","ajax$core$PURGE","ajax.core\/PURGE","ajax.core.PURGEcljs$core$IFn$_invoke$arity$variadic","ajax.core.PURGE.cljs$core$IFn$_invoke$arity$variadic","ajax.core.PURGEcljs$lang$maxFixedArity","ajax.core.PURGEcljs$lang$applyTo","ajax.core.PURGE.cljs$lang$applyTo","seq46465","G__46466","scittle.cljs-ajax\/ans","sci.core.create_ns.cljs$core$IFn$_invoke$arity$2","scittle.cljs-ajax\/ajax-namespace","sci.core\/-copy-ns","cljs.core.PersistentHashMap.fromArrays","cljs.core.with_meta","cljs.core.list","ajax.interceptors\/to-interceptor","m","G__46209","G__46193","ajax.core\/abort","scittle.cljs_ajax.ans","scittle.core.register_plugin_BANG_"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29]}}]}